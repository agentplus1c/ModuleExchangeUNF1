
#Область ГлобальныеПеременные

&НаКлиенте
Перем апОбъект; // объект из внешней компоненты APPlus.dll
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("СтатусАгентов,СтатусНастройкиОбмена,СписокВсеВидыДокументов,СписокОчищаемыеСправочники,ЗагружатьAPPlusDLL,ПервыйЗапускАвтообмена");
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.ЗагружатьAPPlusDLL = Ложь;	

	ТекОбъект.ЗаполнитьСпособыОбмена(Элементы.СпособОбмена.СписокВыбора);
	СтррКонтекст.СписокВсеВидыДокументов 	= ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Документ", Истина);
	СтррКонтекст.СписокОчищаемыеСправочники = ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Справочник", Истина);

	СправочникАгентовПрочитатьИзНастроекГотовностьКОбмену();
	НастройкиОбменаПрочитатьИзНастроекГотовностьКОбмену();
	                                     
	ПрочестьНастройкиСервер();
	Если Объект.ОчищатьДокументыПередЗагрузкой Тогда  // Этот флаг должен быть снят при открытии окна обработки обмена,
		Объект.ОчищатьДокументыПередЗагрузкой = Ложь; // чтобы в МУ не отправились команды удаления документов без ведома оператора.
		ТекОбъект = РеквизитФормыВЗначение("Объект"); // чтобы сохранился измененый реквизит, повторно реквизит формы Объект конфертируем в Значение.
		ТекОбъект.СохранитьЗначенияНастроекОбработки("ОчищатьДокументыПередЗагрузкой");
	КонецЕсли; 
	
	Объект.ВыбАгент = Справочники.Сотрудники.ПустаяСсылка();
	ЗаполнитьДокументыОчистки();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	
	ЗаполнитьВидыВыгрузки(Элементы.ВидВыгрузки.СписокВыбора);
	УстановитьДоступностьСтартовыхНомеров();
	
	ПопыткаЗагрузитьВнешнююКомпоненту();
	
	ОбновитьФормуДляАвтообмена();
	УстановитьДоступностьОчищаемыхДокументов();
	УстановитьДоступностьОчищаемыхСправочников();
	
	ОбновитьСтатусГотовности(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		ПеревыбратьАгента();
		
	ИначеЕсли ИмяСобытия = "АПНастройкиПараметровОбменаИзмененияЗаписаны" Тогда
		
		ПрочестьНастройкиСервер();
		ПопыткаЗагрузитьВнешнююКомпоненту();
		НастройкиОбменаПрочитатьИзНастроекГотовностьКОбмену();
		ОбновитьСтатусГотовности(Ложь);
		ОбновитьФормуДляАвтообмена();
		
	ИначеЕсли ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "APServer" И Событие = "NewDataFromServer" Тогда
		СОДЗагрузитьДанныеПоВнешнемуСобытию(Данные);
	ИначеЕсли Источник = "APShedule" Тогда
		Если апОбъект <> Неопределено Тогда
			ТекстСообщения = СтрШаблон_(НСтр("ru='Поступило событие от расписания - %1 Данные: %2';uk='Надійшло подія від розкладу - %1 Дані: %2'"), Событие,Данные);
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;     

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	// запоминаем изменения, выбранные пользователем на форме
	ПопыткаЗаписатьИзмененияВХранилище();

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгружатьСтартовыеНомераПриИзменении(Элемент)

	УстановитьМодифицированостьФормы(Истина);
	УстановитьДоступностьСтартовыхНомеров();

КонецПроцедуры

&НаКлиенте
Процедура ОчищатьСправочникиПередЗагрузкойПриИзменении(Элемент)

	УстановитьМодифицированостьФормы(Истина);	
	УстановитьДоступностьОчищаемыхСправочников();

КонецПроцедуры

&НаКлиенте
Процедура ОчищатьДокументыПередЗагрузкойПриИзменении(Элемент)

	УстановитьМодифицированостьФормы(Истина);
	УстановитьДоступностьОчищаемыхДокументов();

КонецПроцедуры

&НаКлиенте
Процедура СписокПомеченныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;	
	
	Если ИмяЭлемента = "СписокОчищаемыхСправочников" Тогда
		СписокДляПометки = СтррКонтекст.СписокОчищаемыеСправочники.Скопировать();
		ЗаголовокОкнаВыбора = НСтр("ru='Выберите очищаемые справочники';uk='Виберіть довідники, що очищаються'");
	ИначеЕсли ИмяЭлемента = "СписокОчищаемыхДокументов" Тогда
		СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
		ЗаголовокОкнаВыбора = НСтр("ru='Выберите очищаемые документы';uk='Виберіть документи, що очищаються'");
	Иначе
		ВызватьИсключение(НСтр("ru='Неизвестный элемент формы для помеченных значений списка: ';uk='Невідомий елемент форми для помічених значень списку:'") + ИмяЭлемента);
	КонецЕсли;
	
	Список = Объект[ИмяЭлемента];
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Список.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиЭлементовСписка", ЭтотОбъект, ИмяЭлемента);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, ЗаголовокОкнаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиЭлементовСписка(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "СписокОчищаемыхДокументов" Или ДополнительныеПараметры = "СписокОчищаемыхСправочников" Тогда
	
		СписокПолучатель = Объект[ДополнительныеПараметры];
		СписокПолучатель.Очистить();
		
		Для Каждого Элемент из Список Цикл
			Если Элемент.Пометка Тогда					
				СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЕсли;
		КонецЦикла;   			
		
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбАгентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если СтррКонтекст.СтатусАгентов.КодСостояния = "СправочникПустой" Тогда
		стррПараметры = Новый Структура("Предупреждение", "ПопыткаВыбораИзПустогоСправочника");
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", стррПараметры);
	Иначе
		ПараметрыВыбора = Новый Структура("Сотрудник,Ключ,КодСтатусаАгента", 
			Объект.ВыбАгент, "ОбменДаннымиВыбАгент", 1); // код статуса агента 1 - выбор агента только с зеленой галкой
		стррПараметры = Новый Структура("ПараметрыВыбора", ПараметрыВыбора);
		Оповещение = Новый ОписаниеОповещения("ВыбАгентВыборЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборАгента", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбАгентВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Объект.ВыбАгент = Результат;
		Если Объект.ВыгружатьСтартовыеНомера И Объект.ТабСтартовыеНомера.Количество() <> 0 Тогда
			Объект.ТабСтартовыеНомера.Очистить();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбАгентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ВыбАгент) Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Сотрудник", Объект.ВыбАгент));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	Если Элемент.Имя = "НадписьГотовностьАгентов" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("ВыделитьПервогоАгентаСОшибкой", Истина));				
	ИначеЕсли Элемент.Имя = "НадписьГотовностьНастроекОбмена" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообменПриИзменении(Элемент)
	
	ОбновитьФормуДляАвтообмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьДокументыПриЗагрузкеПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer.exe """ + Объект.КаталогОбмена + """");
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Найти(НРег(НавигационнаяСсылка), ".htm") = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если НавигационнаяСсылка= "ОбщиеНастройкиОбмена_КаналОбмена" Тогда
			МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
			Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", Новый Структура("Закладка", "ГруппаОбменДанными"));
		ИначеЕсли НавигационнаяСсылка = "ОбщиеНастройкиОбмена_КаталогОбмена" Тогда
			МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
			Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", Новый Структура("Закладка", "ГруппаКаталоги"));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтартовыеНомера

//Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСНачалаСтартовыеНомера(Команда)

	ТекстВопроса = НСтр("ru='Установить все стартовые номера в начало отсчета?';uk='Встановити все стартові номери в початок відліку?'");
	ОписаниеОповещенияНумераторов = Новый ОписаниеОповещения("НумераторыСНачалаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияНумераторов, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСтартовыеНомера(Команда)

	ЗаполнитьТаблицуСтартовыхНомеров();

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)

	ОчиститьСообщения();
	ПопыткаЗаписатьИзмененияВХранилище();
	
	ЗапуститьВыгрузкуДанныхСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)

	ОчиститьСообщения();
	ПопыткаЗаписатьИзмененияВХранилище();
	
	КоличествоЗагруженныхАгентов = ЗапуститьЗагрузкуДанныхНаСервере();
	Если КоличествоЗагруженныхАгентов > 0 Тогда
		ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗагруженныхАгентов, НСтр("ru='агента, агентов, агентов';uk='агента, агентів, агентів'"));
		Текст = СтрШаблон_(НСтр("ru='Загружены новые данные от %1.';uk='Завантажені нові дані від %1.'"), ЧислоАгентов);
		Сообщить(Текст);
		Оповестить("АПЗагруженыНовыеДанныеИзМУ", Неопределено);  // оповещаем все формы о загрузке из МУ новых данных 
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиКомандФормы_НавигацияПоФормам

// ОбработчикиКомандФормы_НавигацияПоФормам
#КонецОбласти

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	// запоминаем изменения, выбранные пользователем на форме в закладке БыстрыеНастройки.
	ИсключаемыеРеквизиты = "ВыбАгент,ИспользоватьАвтообмен,СпособОбмена,КаталогОбмена";
	ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект, ИсключаемыеРеквизиты));

КонецПроцедуры

&НаСервере
Процедура ПрочестьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	Элементы.ГруппаНеавтономныйОбмен.Видимость 	= Не ТекОбъект.ИспользоватьАвтообмен;
	Элементы.КаталогОбмена.Видимость = (ТекОбъект.СпособОбмена = "КаталогОбмена" Или ТекОбъект.СпособОбмена = "АПСОД");
	
	СтррКонтекст.ЗагружатьAPPlusDLL = (ТекОбъект.СпособОбмена = "АПСОД"); // если потребуется использовать работу с расписаниями, то нужна загрузка компоненты в любом случае

КонецПроцедуры

// Функция возвращает строку в виде списка названий реквизитов объекта для загрузки их значений из хранилища.
&НаСервере
Функция НастройкиФормы(ТекОбъект, ИсключаемыеРеквизиты = "ВыбАгент")

	СтрРеквизиты = "ИнтервалАвтообмена,";
	мИсключаемыеРеквизиты = СтрРазделить_(ИсключаемыеРеквизиты, ",", Ложь);
	Для Каждого ЭлементМетаданных Из ТекОбъект.Метаданные().Реквизиты Цикл
		Имя = ЭлементМетаданных.Имя;
		Если мИсключаемыеРеквизиты.Найти(Имя) = Неопределено И ЭтаФорма.Элементы.Найти(Имя) <> Неопределено Тогда 
			СтрРеквизиты = СтрРеквизиты + Имя + ","; 
		КонецЕсли;
	КонецЦикла;

	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);
	
КонецФункции 

&НаКлиенте
Процедура ПопыткаЗаписатьИзмененияВХранилище()

	// запоминаем изменения, выбранные пользователем на форме
	Если ЭтаФорма.Модифицированность Тогда
		СохранитьНастройкиСервер();
		УстановитьМодифицированостьФормы(Ложь);
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбменДанными

// Включение / выключение автообмена
&НаКлиенте
Процедура ЗадействоватьАвтообмен()
	
	ЗаголовокФлажка = НСтр("ru='Использовать автообмен';uk='Використовувати автообмін'");
	
	Если Объект.ИспользоватьАвтообмен Тогда // Включаем автообмен
		// Нужно проверить задан ли каталог обмена
		Если ПустаяСтрока(Объект.КаталогОбмена) Тогда
			Текст = НСтр("ru='В настройках не задан ""Каталог обмена"". Автообмен не будет производиться!';uk='В налаштуваннях не заданий ""Каталог обміну"". Автообмін не проводитиметься!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			
		ИначеЕсли Объект.СпособОбмена = "АПСОД" Тогда
			Если апОбъект = Неопределено Тогда
				Текст = НСтр("ru='Не удалось подключить внешнюю компоненту APPlus.dll!';uk='Не вдалося підключити зовнішню компоненту APPlus.dll!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Иначе
				апОбъект.АпсУстПапкуОбмена(Объект.КаталогОбмена); //SetExchangeDir(Объект.СОДКаталогОбмена);
				апОбъект.АпсВключитьСервер(); 	//EnableServer();			
			КонецЕсли;
			ОтключитьОбработчикОжидания("Автообмен");
			
		Иначе
			СОДВыключитьАвтообмен();
			Если Объект.СпособОбмена = "FTP" Или Объект.СпособОбмена = "КаталогОбмена" Тогда
				СтррКонтекст.ПервыйЗапускАвтообмена = Истина;
				ПодключитьОбработчикОжидания("Автообмен", 2, Истина);
				
				Интервал = ИнтервалАвтообмена();
				Если Интервал % 60 = 0 Тогда
					СтрИнтервал = ЧислоЦифрамиПредметИсчисленияПрописью(Интервал / 60, НСтр("ru='минуту, минуты, минут';uk='хвилину, хвилини, хвилин'"), Истина);
				Иначе
					СтрИнтервал = ЧислоЦифрамиПредметИсчисленияПрописью(Интервал, НСтр("ru='секунду, секунды, секунд';uk='секунду, секунди, секунд'"), Истина);
				КонецЕсли;
				ЗаголовокФлажка = СтрШаблон_(НСтр("ru='Автообмен каждые %1';uk='Автообмін кожні %1'"), СтрИнтервал);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Выключаем автообмен
		
		СОДВыключитьАвтообмен();
		ОтключитьОбработчикОжидания("Автообмен");
		
	КонецЕсли;
	
	Элементы.ИспользоватьАвтообмен.Заголовок = ЗаголовокФлажка;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыгрузкуДанныхСервер() 

	РеквизитФормыВЗначение("Объект").ВыгрузитьДанные(Объект.ВыбАгент);

КонецПроцедуры

&НаСервере
Функция ЗапуститьЗагрузкуДанныхНаСервере()

	Возврат РеквизитФормыВЗначение("Объект").ЗагрузитьДанные(Объект.ВыбАгент);

КонецФункции

// СлужебныеПроцедурыИФункции_ОбменДанными
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Нумераторы

&НаКлиенте
Процедура УстановитьДоступностьСтартовыхНомеров()

	Элементы.СтартовыеНомера.Видимость = Объект.ВыгружатьСтартовыеНомера;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСтартовыхНомеров(УстановитьНумерациюСначала = Ложь)

	Объект.ТабСтартовыеНомера.Очистить();
	
	Если Объект.ВыбАгент.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран Сотрудник.';uk='Не встановлено Співробітник.'"), , "ВыбАгент");
		Возврат;
	КонецЕсли;
	
	Нумераторы = НумераторыДокументов();
	Настройки = НастройкиДляТекущегоАгента();
	ВыбНастройкиАгента = Настройки.ВыбНастройкиАгента;

	Для Каждого ЭлементНумератор Из Нумераторы Цикл
		ДокументОбъект = Документы[ЭлементНумератор.ИмяДокумента].СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		НомерУстановлен = Ложь;
		
		//в цикле ниже определяем первый свободный номер в ЦБД с префиксом для каждой фирмы
		//все полученные свободные номера заносятся в таблицу значений
		Для Каждого ОрганизацияСсылка Из Настройки.Организации Цикл
			НужныйПрефикс = СокрЛП(ВыбНастройкиАгента.Префикс);
			Если Не ДокументОбъект.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
				ДокументОбъект.Организация = ОрганизацияСсылка;
			КонецЕсли;

			ДокументОбъект.УстановитьНовыйНомер(НужныйПрефикс); 
			СтартНомерДок = ДокументОбъект.Номер;

			//Получили стартовый номер документа для нумератора с учетом префикса организации
			Стр = Объект.ТабСтартовыеНомера.Добавить();
			Стр.Наименование = ЭлементНумератор.Нумератор;
			Стр.Организация = ОрганизацияСсылка;
			Стр.СтартовыйНомер = СтартНомерДок;
			
			Префикс = Лев(СтартНомерДок, 7);
			Стр.Префикс = Префикс;
			Стр.СтартовыйНомер = Прав(СтартНомерДок, СтрДлина(СтартНомерДок)- СтрДлина(Префикс));
			Если УстановитьНумерациюСначала Тогда
				СформироватьСтартовыйНомер(Стр.СтартовыйНомер);
			КонецЕсли;
			
			НомерУстановлен = Истина;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Функция устанавливает номер вида "00001", учитывая длину переданного в параметре номера.
&НаСервере
Процедура СформироватьСтартовыйНомер(НомерДокумента)

	ДлинаНомера = СтрДлина(НомерДокумента) - 2;
	НомерДокумента = "";
	Для индекс = 0 По ДлинаНомера Цикл
		НомерДокумента = НомерДокумента + "0";
	КонецЦикла;
	НомерДокумента = НомерДокумента + "1";

КонецПроцедуры

&НаСервере
Функция НумераторыДокументов()

	ТаблНумераторов = Новый ТаблицаЗначений;
	ТаблНумераторов.Колонки.Добавить("Нумератор");
	ТаблНумераторов.Колонки.Добавить("ИмяДокумента");
	ТаблНумераторов.Колонки.Добавить("ИдНумератора");
	ТаблНумераторов.Колонки.Добавить("ИдОбъекта");
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор = НСтр("ru='Заказ клиента';uk='Замовлення клієнта'");
	СтрокаНумераторов.ИмяДокумента = "ЗаказКлиента";
	СтрокаНумераторов.ИдНумератора = "293ff118-c039-4977-bc7b-1a73764237e0";
	СтрокаНумераторов.ИдОбъекта = "e01e1f5c-d6e4-46e8-b923-3758b0d79bde";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор = НСтр("ru='Реализация товаров и услуг';uk='Реалізація товарів і послуг'");
	СтрокаНумераторов.ИмяДокумента = "РеализацияТоваровУслуг";
	СтрокаНумераторов.ИдНумератора = "bd6460d1-5b99-41fe-b86d-34fdd8ce98c0";
	СтрокаНумераторов.ИдОбъекта = "7ffb418c-73c9-4883-91c5-827fa5145a3a";

	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.ИмяДокумента = "ПриходныйКассовыйОрдер";
	СтрокаНумераторов.Нумератор = НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'");
	СтрокаНумераторов.ИдНумератора = "b04b9dde-1868-4a80-9507-d66ecfeae942";
	СтрокаНумераторов.ИдОбъекта = "749be2e0-9b00-4d7b-9d4d-88ca53327511";

	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.ИмяДокумента = "РасходныйКассовыйОрдер";
	СтрокаНумераторов.Нумератор = НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'");
	СтрокаНумераторов.ИдНумератора = "a695650b-7c77-4426-a33f-84d336a5c476";
	СтрокаНумераторов.ИдОбъекта = "3890d435-96ba-4481-abc0-23782e15b32f";

	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.ИмяДокумента = "ПоступлениеТоваровУслуг";
	СтрокаНумераторов.Нумератор = НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'");
	СтрокаНумераторов.ИдНумератора = "ad10c572-3439-49b7-8986-7dc61e267309";
	СтрокаНумераторов.ИдОбъекта = "c9850d61-bc15-445a-8b1a-e328cc45ddae";

	Возврат ТаблНумераторов;
КонецФункции

&НаКлиенте
Процедура НумераторыСНачалаЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуСтартовыхНомеров(Истина);

КонецПроцедуры

&НаСервере
Функция НастройкиДляТекущегоАгента()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ТекОбъект.НастройкиДляТекущегоАгента();
	
КонецФункции 

// СлужебныеПроцедурыИФункции_Нумераторы
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Статусы

&НаСервере
Процедура СправочникАгентовПрочитатьИзНастроекГотовностьКОбмену()
	
	СтррКонтекст.СтатусАгентов = РеквизитФормыВЗначение("Объект").СправочникиГотовыКРаботе("НастройкиАгентов");
	
КонецПроцедуры

&НаСервере
Процедура НастройкиОбменаПрочитатьИзНастроекГотовностьКОбмену()
	
	СтррКонтекст.СтатусНастройкиОбмена = РеквизитФормыВЗначение("Объект").НастройкиОбменаГотовыКРаботе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусГотовности(ПрочитатьИзНастроек)
	
	Если ПрочитатьИзНастроек Тогда
		СправочникАгентовПрочитатьИзНастроекГотовностьКОбмену();
	КонецЕсли;
	
	СтррСтатус = СтррКонтекст.СтатусАгентов;
	Если СтррСтатус.Готов Тогда
		Элементы.НадписьГотовностьАгентов.Видимость = Ложь;
	Иначе
		Элементы.НадписьГотовностьАгентов.Видимость = Истина;
		Элементы.НадписьГотовностьАгентов.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	СтррСтатус = СтррКонтекст.СтатусНастройкиОбмена;
	Если СтррСтатус.Готов Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Истина;
		Элементы.НадписьГотовностьНастроекОбмена.Заголовок = СтррСтатус.Описание;
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Статусы
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура УстановитьДоступностьОчищаемыхСправочников()

	Элементы.СписокОчищаемыхСправочников.Доступность = Объект.ОчищатьСправочникиПередЗагрузкой;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОчищаемыхДокументов()

	Элементы.СписокОчищаемыхДокументов.Доступность  	= Объект.ОчищатьДокументыПередЗагрузкой;
	Элементы.РежимыОчистки.Доступность 					= Объект.ОчищатьДокументыПередЗагрузкой;
	Элементы.НадписьПредупреждениеУдалениеДокументов.Видимость = Объект.ОчищатьДокументыПередЗагрузкой;
	
	Если Объект.ОчищатьДокументыПередЗагрузкой Тогда
	    Элементы.ГруппаДополнительно.Картинка  = Элементы.ДекорацияПредупреждлениеОчищатьДокументы.Картинка;
		Элементы.ГруппаДополнительно.Подсказка = НСтр("ru='Внимание! Включен режим удаления документов в МУ!';uk='Увага! Включений режим видалення документів в МП!'");
		Элементы.ДекорацияПредупреждлениеОчищатьДокументы.Видимость = Истина; 
	Иначе
		Элементы.ГруппаДополнительно.Картинка = Новый Картинка;
		Элементы.ГруппаДополнительно.Подсказка = НСтр("ru='Дополнительные настройки обмена';uk='Додаткові настройки обміну'");
		Элементы.ДекорацияПредупреждлениеОчищатьДокументы.Видимость = Ложь; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыВыгрузки(Режимы)

	Режимы.Добавить("ВсеДанные", 		НСтр("ru='Все данные (с расчетом истории продаж)';uk='Всі дані (з розрахунком історії продажів)'"));
	Режимы.Добавить("ИсторияПродаж", 	НСтр("ru='Только история продаж';uk='Тільки історія продажів'"));	
	Режимы.Добавить("ВсеДанныеБезИсторииПродаж", НСтр("ru='Все данные (без истории продаж)';uk='Всі дані (без історії продажів)'"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОчистки()

	Если Объект.СписокОчищаемыхДокументов.Количество() = 0 Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		Список = ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Документ");
		Для Каждого Элемент Из Список Цикл
			Объект.СписокОчищаемыхДокументов.Добавить(Элемент.Значение, Элемент.Представление, Ложь);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СуществуетАгент(Агент)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗ = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	мСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", Агент));
	
	Возврат мСтроки.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПеревыбратьАгента()
	
	Если ЗначениеЗаполнено(Объект.ВыбАгент) И Не СуществуетАгент(Объект.ВыбАгент) Тогда
		Объект.ВыбАгент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста 
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьФормуДляАвтообмена(Интерактивно = Ложь)
	
	Элементы.ГруппаНеавтономныйОбмен.Видимость    = Не Объект.ИспользоватьАвтообмен;
	Элементы.ВыгружатьСтартовыеНомера.Доступность = Не Объект.ИспользоватьАвтообмен;
	
	Если Объект.ИспользоватьАвтообмен И Объект.ВыгружатьСтартовыеНомера Тогда
		Объект.ВыгружатьСтартовыеНомера = Ложь;
		УстановитьДоступностьСтартовыхНомеров();
	КонецЕсли;
	
	ЗадействоватьАвтообмен();
		
КонецПроцедуры

&НаКлиенте
Функция ИнтервалАвтообмена()
	
	Возврат ?(Объект.ИнтервалАвтообмена = 0, 3 * 60, Объект.ИнтервалАвтообмена);
	
КонецФункции

&НаКлиенте
Процедура Автообмен() Экспорт
	
	Если СтррКонтекст.ПервыйЗапускАвтообмена Тогда
		
		Интервал = ИнтервалАвтообмена();
		
		Если Объект.СпособОбмена = "FTP" Тогда
			ПодключитьОбработчикОжидания("Автообмен", Интервал);
		ИначеЕсли Объект.СпособОбмена = "КаталогОбмена" Тогда
			ПодключитьОбработчикОжидания("Автообмен", Интервал);
		КонецЕсли;
		СтррКонтекст.ПервыйЗапускАвтообмена = Ложь; // первый запуск автообмена после открытия окна или установки флажка Автообмен
		
	Иначе
		ОчиститьСообщения();
	КонецЕсли;		
	
	Текст = СтрШаблон_(НСтр("ru='%1. Автообмен - проверка новых данных.';uk='%1. Автообмін - перевірка нових даних.'"), ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
	ПопыткаЗаписатьИзмененияВХранилище();
	
	КоличествоЗагруженныхАгентов = ЗапуститьЗагрузкуДанныхНаСервере();
	Если КоличествоЗагруженныхАгентов = 0 Тогда
		Текст = НСтр("ru='Новых данных не поступало.';uk='Нових даних не надходило.'");
	Иначе
		ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗагруженныхАгентов, НСтр("ru='агента, агентов, агентов';uk='агента, агентів, агентів'"));
		Текст = СтрШаблон_(НСтр("ru='Загружены новые данные от %1.';uk='Завантажені нові дані від %1.'"), ЧислоАгентов);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);	
	
КонецПроцедуры

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_APPlusDLL

&НаКлиенте
Процедура ПопыткаЗагрузитьВнешнююКомпоненту()
	
	Если СтррКонтекст.ЗагружатьAPPlusDLL И апОбъект = Неопределено Тогда
		апОбъект = ЗагрузитьВнешнююКомпонентуAPPlus();
	КонецЕсли;
	
КонецПроцедуры

// Загружает внешнюю компоненту APPlus.dll.
//  
&НаКлиенте
Функция ЗагрузитьВнешнююКомпонентуAPPlus()
	
	Результат = Неопределено;
	
	Попытка				
		РезультатПодключения = ПодключитьВнешнююКомпоненту("AddIn.AddInObject.1");
		Результат = Новый("AddIn.CeDataExch");		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось подключить внешнюю компоненту APPlus.dll!';uk='Не вдалося підключити зовнішню компоненту APPlus.dll!'"));								
	КонецПопытки;		
		
	Возврат Результат;
	
КонецФункции

//  СлужебныеПроцедурыИФункции_APPlusDLL
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СОД

&НаКлиенте
Процедура СОДВыключитьАвтообмен()

	Если апОбъект <> Неопределено Тогда // Выключаем автообмен с СОД (если он был до этого включен)
		апОбъект.АпсУстПапкуОбмена(""); //SetExchangeDir("");
		апОбъект.АпсОтключитьСервер();	//DisableServer();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДЗагрузитьДанныеПоВнешнемуСобытию(Данные)
	
	мПараметры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сред(Данные, 2) + ",""", """,""");
	// В массиве следующие значения:
	//0-й - идентификатор МУ
	//1-й - псевдоним торгвого агента (владельца КПК)
	//2-й - директория обмена данными 
	//3-й - имя полученного с КПК файла с директорией
	//4-й - время сеанса
	//5-й - контрольная сумма полученного файла
	
	ИдМУ 		= мПараметры[0];
	Псевдоним 	= мПараметры[1];
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("**************************************************************************");
	ТекстСообщения = СтрШаблон_(НСтр("ru='%1 : поступили данные от агента: "" %2 "" (Идентификатор моб. устройства: %3)';uk='%1: надійшли дані від агента: ""%2"" (Ідентифікатор моб. Пристрою:%3)'")
								, ТекущаяДата(),СокрЛП(Псевдоним),СокрЛП(ИдМУ));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СОДЗагрузитьДанныеПоВнешнемуСобытиюСервер(мПараметры);
	
	апОбъект.АпсПроцессЗавершен(ИдМУ);
	
КонецПроцедуры

&НаСервере
Процедура СОДЗагрузитьДанныеПоВнешнемуСобытиюСервер(мПараметры)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СтррРезультат = ТекОбъект.СОДЗагрузитьДанныеПоВнешнемуСобытию(мПараметры, Истина);
	
	Для Каждого Элемент Из СтррРезультат.Сообщения Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Описание);
	КонецЦикла;
	
	Если СтррРезультат.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данные не загружены!';uk='Дані не завантажені!'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_СОД
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти
