#Область Описание
	
/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// 
// *** Общая информация.
// Используется для обновлений модуля обмена данными до новых версий - инициализации значений новых настроек, 
// конвертации значений настроек из прежнего формата в новый формат.
// 
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура("Версия,ВерсияНастроек"); // Версия - текущая версия обработки, ВерсияНастроек - версия сохраненных настроек
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТребуетсяОбновитьДоВерсии(ВерсияОбновления, ИзменитьНастройки = Неопределено)
		
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбновления, СтррКонтекст.Версия) > 0 Тогда
		Возврат Ложь; // требуется обновиться до более новой версии, о которой модуль не знает
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбновления, СтррКонтекст.ВерсияНастроек) < 0 Тогда
		Возврат Ложь; // сохранены настройки от более новой версии обработки, чем запущена в данный момент
	Иначе
		ИзменитьНастройки = Истина;
		Возврат Истина; // требуется обновить настройки до более новой версии
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ИнициализироватьДанныеВХранилищеДляНовойВерсииКлиент(СтараяВерсия, НоваяВерсия) Экспорт
	
	СтррКонтекст.ВерсияНастроек = СтараяВерсия;
	СтррКонтекст.Версия 		= НоваяВерсия;
	
	ИнициализироватьДанныеВХранилищеДляНовойВерсии();
	
	
	Если Не ПустаяСтрока(СтараяВерсия) Тогда
		ТекстРезультат = СтрШаблон_(НСтр("ru='Обновлены настройки с версии %1 до версии %2.';uk='Оновлені настройки з версії %1 до версії %2.'"), СтараяВерсия, НоваяВерсия);
	Иначе
		ТекстРезультат = СтрШаблон_(НСтр("ru='Инициализированы настройки для версии %1.';uk='Ініціалізовані налаштування для версії %1.'"), НоваяВерсия);
	КонецЕсли;

	Возврат ТекстРезультат;
	
КонецФункции	

&НаСервере
Процедура ИнициализироватьДанныеВХранилищеДляНовойВерсии()
	// в реквизите Объект.ВерсияМодуля содержится прежняя версия
	
	стррЗначения = Новый Структура;
	ИзменитьНастройки = Ложь;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭтоПервыйЗапуск = ПустаяСтрока(СтррКонтекст.ВерсияНастроек);
	
	Если ЭтоПервыйЗапуск Тогда // первый запуск
		
		ИнициализироватьМодульДляПервогоЗапуска(ТекОбъект);
		стррЗначения.Вставить("СпособРасчетаПросроченныхДолгов", "НеУчитывать");
		
		//НЕРИАЛИЗОВАНО убрать вообще РежимЗагрузкиЗаказов 
		//РежимЗагрузкиЗаказов = ?(Константы.ИспользоватьЗаказыКлиентов.Получить(), "ЗагружатьКакЗаказ", "ЗагружатьКакРеализацию");
		РежимЗагрузкиЗаказов = "ЗагружатьКакЗаказ";
		стррЗначения.Вставить("РежимЗагрузкиЗаказов", РежимЗагрузкиЗаказов);
		
		
		стррЗначения.Вставить("ПодтвержденияТолькоДляПроведенных", Истина);
		стррЗначения.Вставить("ОтветнаяВыгрузка", Истина);
		стррЗначения.Вставить("ВыгружатьМаршруты", Истина);		
		стррЗначения.Вставить("ИнтервалВыгрузкиМаршрутов", 7);
		стррЗначения.Вставить("РегистрОстатковТоваров", "СвободныеОстатки");
		стррЗначения.Вставить("ИспользоватьДоговоры", Истина);
		стррЗначения.Вставить("КлиентМетрика", Новый УникальныйИдентификатор()); // sk_191129 Добавлено в рамках (MOD-926)
		
		Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
			стррЗначения.Вставить("ИспользоватьХарактеристики", Истина);
		КонецЕсли;
			
	КонецЕсли;
		
	Если ТребуетсяОбновитьДоВерсии("1.0.0.23", ИзменитьНастройки) Тогда
		стррЗначения.Вставить("ИнтервалАвтообмена", 180);
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.0.29", ИзменитьНастройки) Тогда
		ТекОбъект.ПодтвержденияУдалить("Документы"); //vd_181003 ТекОбъект.УдалитьПодтвержденияДокументов();
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.0.31", ИзменитьНастройки) Тогда
		ОбновитьВидыДокументовИСправочниковВХранилище(ТекОбъект, стррЗначения);
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.0.32", ИзменитьНастройки) Тогда
		// изменен тип значения реквизита "СОДПорт" со "Строка" на "Число"
		СОДПорт = ТекОбъект.ПрочитатьЗначениеНастройки("СОДПорт");
		Если ТипЗнч(СОДПорт) = Тип("Строка") Тогда
			НовоеЗначение = СтрокуВЧисло(СОДПорт);
		ИначеЕсли ТипЗнч(СОДПорт) = Тип("Число") Тогда
			НовоеЗначение = СОДПорт;
		Иначе
			НовоеЗначение = 0;
		КонецЕсли; 
		Если НовоеЗначение <> СОДПорт Тогда
			стррЗначения.Вставить("СОДПорт", НовоеЗначение);
		КонецЕсли; 
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.0.33", ИзменитьНастройки) Тогда
		// заменено название реквизита "ЛКИдентификатор" на "ЛКЛогин"
		НовоеЗначение = ТекОбъект.ПрочитатьЗначениеНастройки("ЛКИдентификатор");
		Если НовоеЗначение <> Неопределено Тогда
			стррЗначения.Вставить("ЛКЛогин", НовоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.0.34", ИзменитьНастройки) Тогда
		// добавлен новый реквизит "ЛКЗапомнитьЛогинИПароль"
		ЛКЛогин = ТекОбъект.ПрочитатьЗначениеНастройки("ЛКЛогин");
		Если Не ПустаяСтрока(ЛКЛогин) Тогда
			стррЗначения.Вставить("ЛКЗапомнитьЛогинИПароль", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ТребуетсяОбновитьДоВерсии("1.0.0.54") Тогда
		// появился новый доп. реквизит справочника Партнеры - ИмяСвойстваАдресИзСервисаПартнер()
		ТекОбъект.СоздатьДополнительныеРеквизитыСправочников(); 
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ТребуетсяОбновитьДоВерсии("1.0.1.27") Тогда
		// появились новые доп. сведения документов - ИмяСвойстваДокументВремяНачала() и ИмяСвойстваДокументВремяОкончания().
		ТекОбъект.СоздатьДополнительныеРеквизитыДокументов(); 
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоВерсии("1.0.1.35", ИзменитьНастройки) Тогда 
		стррЗначения.Вставить("ПоказыватьАдресКоординат", Истина);
	КонецЕсли;
	
	//УНФ
	Если ТребуетсяОбновитьДоВерсии("1.0.2.1", ИзменитьНастройки) Тогда
		ВидДокумента = "_Мерчендайзинг";
		тз = ТекОбъект.ВОЗагрузитьТЗ(ВидДокумента);
		Если тз.Колонки.Найти("Менеджер") = Неопределено Тогда
			тз.Колонки.Добавить("Менеджер",	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ТекОбъект.ВОСохранитьТЗ(ВидДокумента, тз)
		КонецЕсли; 
	КонецЕсли; 
	
	
	//УНФ
	Если ТребуетсяОбновитьДоВерсии("1.0.2.4", ИзменитьНастройки) Тогда
		
		// 1. Переименована колонка тзЖурнала документов мерчендайзинга из "ДатаНачала" в "ВремяНачала".
		// 2. Добавлена колонка "СуммаДокумента".
		
		ВидДокумента = "_Мерчендайзинг";
		
		тз = ТекОбъект.ВОЗагрузитьТЗ(ВидДокумента);
		Если тз <> Неопределено Тогда
			
			БылиИзменения = Ложь;
			
			ЗаменитьНазваниеКолонки(тз, "ДатаНачала",    "ВремяНачала",    БылиИзменения);
			ЗаменитьНазваниеКолонки(тз, "ДатаОкончания", "ВремяОкончания", БылиИзменения);
			
			// добавляем колонку "СуммаДокумента"
			Если тз.Колонки.Найти("СуммаДокумента") = Неопределено Тогда
				ОписаниеТипаСумма = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
				тз.Колонки.Добавить("СуммаДокумента", ОписаниеТипаСумма);
				БылиИзменения = Истина;
			КонецЕсли; 
		
			Если БылиИзменения Тогда
				ТекОбъект.ВОСохранитьТЗ(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	//УНФ
	Если ТребуетсяОбновитьДоВерсии("2.0.0.8", ИзменитьНастройки) Тогда
		// Изменены названия колонки "Результат" и "Результат_Представление" в ТЗ виртуального документа "_Посещение".
		ВидДокумента = "_Посещение";		
		тз = ТекОбъект.ВОЗагрузитьТЗ(ВидДокумента);
		Если тз <> Неопределено Тогда
			БылиИзменения = Ложь;			
			ЗаменитьНазваниеКолонки(тз, "Результат", "РезультатПосещения", БылиИзменения);
			ЗаменитьНазваниеКолонки(тз, "Результат_Представление", "РезультатПосещения_Представление", БылиИзменения);
			Если БылиИзменения Тогда
				ТекОбъект.ВОСохранитьТЗ(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	//УНФ
	Если ТребуетсяОбновитьДоВерсии("2.0.0.11", ИзменитьНастройки) Тогда
		// Изменено название колонки "Характеристика" на "Ссылка" в ТЗ "СпрХарактеристикиНоменклатурыСлужебный"
		Реквизит = "СпрХарактеристикиНоменклатурыСлужебный";
		тз = ТекОбъект.ПрочитатьЗначениеНастройки(Реквизит);
		Если тз <> Неопределено И ЗаменитьНазваниеКолонки(тз, "Характеристика", "Ссылка") Тогда
			ТекОбъект.СохранитьЗначениеНастройки(Реквизит, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
		КонецЕсли; 
	КонецЕсли; 
	
	//УНФ
	Если ТребуетсяОбновитьДоВерсии("2.0.0.20", ИзменитьНастройки) Тогда
		// Изменено для виртуального документа "_Мерчендайзинг" добавлен реквизит шапки ДокументОснование.
		ВидДокумента = "_Мерчендайзинг";		
		тз = ТекОбъект.ВОЗагрузитьТЗ(ВидДокумента);
		Если тз <> Неопределено Тогда
			Если тз.Колонки.Найти("ДокументОснование") = Неопределено Тогда
				ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
				тз.Колонки.Добавить("ДокументОснование", ОписаниеТипаВсеДокументы );
				ТекОбъект.ВОСохранитьТЗ(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	//vd_180928 Это первый запуск новой обработки УНФ (старая уже запускалась в УС) 
	Если ТребуетсяОбновитьДоВерсии("2.0.0.29", ИзменитьНастройки) Тогда
		ЗаменитьПолеКомпановкиданныхПартнерНаКонтрагента(ТекОбъект); //В старых версиях УНФ заменяет название поле компоновки данных Партнеры на Контрагенты		
		
		стррЗначения.Вставить("СпособРасчетаПросроченныхДолгов", 	"НеУчитывать");
		стррЗначения.Вставить("РежимЗагрузкиЗаказов", 				"ЗагружатьКакЗаказ");
		стррЗначения.Вставить("ПодтвержденияТолькоДляПроведенных", 	Истина);
		стррЗначения.Вставить("ОтветнаяВыгрузка", 					Истина);
		стррЗначения.Вставить("ВыгружатьМаршруты", 					Истина);		
		стррЗначения.Вставить("ИнтервалВыгрузкиМаршрутов", 			7);
		стррЗначения.Вставить("ИспользоватьДоговоры", 				Истина);
		стррЗначения.Вставить("ОтветнаяВыгрузка", 					Истина);           //Изменяем знчение этой нстройки на Истина тк В старых версиях оно по умолчанию в Ложь 
	КонецЕсли; 
	
	//(( sk_191129 Добавлен в рамках (MOD-926)
	Если ТребуетсяОбновитьДоВерсии("2.0.1.9", ИзменитьНастройки) Тогда
		текКлиентМетрика = ТекОбъект.ПрочитатьЗначениеНастройки("КлиентМетрика");
		Если текКлиентМетрика = Неопределено  Тогда
			стррЗначения.Вставить("КлиентМетрика", Новый УникальныйИдентификатор());
		КонецЕсли;	
	КонецЕсли;
	//)) sk_191129
	
	//////СОХРАНЕНИЕ//////	
	Если ИзменитьНастройки Или ТекОбъект.ВерсияНастроек <> СтррКонтекст.Версия Тогда
		стррЗначения.Вставить("ВерсияНастроек", СтррКонтекст.Версия); // обязательно записываем новую версию в настройки
		ТекОбъект.СохранитьЗначенияНастроекИзСтруктуры(стррЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьПолеКомпановкиданныхПартнерНаКонтрагента(ТекОбъект = Неопределено) Экспорт
	
	Если ТекОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	пкдПолеКонтрагенты  = Новый ПолеКомпоновкиДанных("Контрагенты");	
	пкдПолеПартнеры		= Новый ПолеКомпоновкиДанных("Партнеры");
	флНастройкиИзменены  = Ложь;
	НастройкиАгентов = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если НЕ НастройкиАгентов = Неопределено Тогда
		Для Каждого Элемент Из НастройкиАгентов Цикл
			стзНастроекКомпоновкиДанных = Элемент.ВыгружаемыеОбъекты.Элементы;	
			Для Каждого ЭлементСКД Из стзНастроекКомпоновкиДанных Цикл
				Если ЭлементСКД.ЛевоеЗначение = пкдПолеПартнеры Тогда
					флНастройкиИзменены = Истина;
					ЭлементСКД.ЛевоеЗначение = пкдПолеКонтрагенты;
					Если ЭлементСКД.Использование = Истина Тогда
						//Устанвливаем Использование в Ложь, если правое значение не заполнено.
						Если ТипЗнч(ЭлементСКД.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементСКД.ПравоеЗначение.Количество() = 0 Тогда
							ЭлементСКД.Использование = Ложь;
						ИначеЕсли НЕ ТипЗнч(ЭлементСКД.ПравоеЗначение) = Тип("СписокЗначений") Тогда
							ЭлементСКД.Использование = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
		КонецЦикла;
	КонецЕсли;
	
	Если флНастройкиИзменены Тогда
		ТекОбъект.НастройкиАгентов = НастройкиАгентов;
		ТекОбъект.СохранитьЗначениеНастройки("НастройкиАгентов", НастройкиАгентов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заменяет название колонки в таблице значений
&НаСервере
Функция ЗаменитьНазваниеКолонки(тз, Название, НовоеНазвание, БылиИзменения = Неопределено)
	
	Колонка = тз.Колонки.Найти(Название);
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = НовоеНазвание;
		БылиИзменения = Истина;
	КонецЕсли; 
	
	Возврат БылиИзменения;

КонецФункции
 
&НаСервере
Процедура ИнициализироватьМодульДляПервогоЗапуска(ТекОбъект)
	
	ТекОбъект.СоздатьДополнительныеРеквизитыСправочников();
	ТекОбъект.СоздатьДополнительныеРеквизитыДокументов();
	
	//ТекОбъект.ПолучитьГруппуПользователейТорговыеАгенты(); //унф //Мы не используем группы пользователей, тк в качкстве агентов сотрудники
	
КонецПроцедуры

// Процедура удаляет из значений атрибутов обработки СписокОчищаемыхДокументов и СписокОчищаемыхСправочников
// несуществующие виды документов и справочников, которые могли остаться от прежних версий обработки.
&НаСервере
Процедура ОбновитьВидыДокументовИСправочниковВХранилище(ТекОбъект, СтррЗначения)
	
	СтррСписки = ТекОбъект.ПрочитатьЗначенияНастроек("СписокОчищаемыхДокументов,СписокОчищаемыхСправочников");
	
	Для Каждого ЭлементСтруктуры Из СтррСписки Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда // значение может отсутствовать в хранилище
			Продолжить;
		КонецЕсли;
		
		СписокВсех = ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ(?(ЭлементСтруктуры.Ключ = "СписокОчищаемыхДокументов", "Документ", "Справочник"));
		мУдаляемыеЭлементы = Новый Массив;
		СписокПроверки = ЭлементСтруктуры.Значение;
		Для Каждого Элемент Из СписокПроверки Цикл
			Если СписокВсех.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				мУдаляемыеЭлементы.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из мУдаляемыеЭлементы Цикл
			СписокПроверки.Удалить(Элемент);
		КонецЦикла;
		
		Если мУдаляемыеЭлементы.Количество() <> 0 Тогда
			СтррЗначения.Вставить(ЭлементСтруктуры.Ключ, СписокПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СтрокуВЧисло(Строка)
	
	СтрРезультат = "";
	
	БылаТочка = Ложь;
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Или Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
		ИначеЕсли Не БылаТочка И Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
			БылаТочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылаТочка Тогда
		СтрРезультат = "0" + СтрРезультат + "0"; // чтобы корректно обработалось число вида ".x" или "x."
	КонецЕсли; 
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат));
	
КонецФункции

// СлужебныеПроцедурыИФункции
#КонецОбласти