
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульЛК; // модуль работы с "Личным кабинетом"
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль.

// ГлобальныеПеременные
#КонецОбласти

#Область Описание

/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// *** Общая информация
// Форма предназначена для управления списком мобильных устройств (МУ), а также загрузки МУ из "Личного кабинета" (ЛК).
// 
// *** Сохранение значений в хранилище.
// При сохранении ТЗ Объект.МобильныеУстройства в хранилище, сохраняются все колонки ТЗ кроме колонок
// "Сотрудник" и "ЛКИзмененныеРеквизиты" - это сервисные колонки, используемые только во время отображения формы.
// Т.е. связи Сотрудник -> МУ хранятся только в ТЗ Объект.НастройкиАгентов (колонка "СсылкаМУ").
// После сохранения значений оповещаются все окна событием "АПМобильныеУстройстваИзменениеСпискаМУ".
// См. функцию СохранитьНастройкиИОповестить().
// 
// *** Чтение значений из хранилища.
// При чтении ТЗ Объект.МобильныеУстройства из хранилища вместе с ней считывается ТЗ Объект.НастройкиАгентов,
// после чего сразу обновляется колонка Объект.МобильныеУстройства.Сотрудник - на основании значений
// реквизитов Объект.НастройкиАгентов.Сотрудник и Объект.НастройкиАгентов.СсылкаМУ.
// См. процедуру ВосстановитьНастройкиСервер().
// 
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//       Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("ИзмененыСотрудники,НастройкиАгентовРедактируются,МассивМУДляУдаленияПодтверждений");
	
	СтррКонтекст.ИзмененыСотрудники 				= Ложь; // признак, что в ТЗ Объект.НастройкиАгентов нужно обновить ссылки на МУ
	СтррКонтекст.НастройкиАгентовРедактируются 		= Ложь;
	СтррКонтекст.МассивМУДляУдаленияПодтверждений 	= Новый Массив;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.Вставить("РеквизитыМУ", ПолучитьНазванияРеквизитовМУ(ТекОбъект));
	
	ВосстановитьНастройкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	Элементы.ГруппаСостояние.ЦветФона 		= СтррКонтекст.Цвета.ФонСостояние;
	ОбновитьВсеСтатусы();
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" Тогда
		
		Если Источник = "ВнешнееСозданиеАгентов" Тогда // событие инициировано загрузкой МУ из ЛК и последующей установкой
			// Сотрудников МУ (вызовом процедуры ВнешнийВызовСоздатьАгентов() из модуля "НастройкиАгентов").
			// В этом случае обработка записи измененных агентов обрабатывается в процедуре ЛКДобавитьНовыхАгентовЗавершить().
		Иначе
			ВосстановитьНастройкиСервер("НастройкиАгентов");
			ОбновитьВсеСтатусы();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПМобильноеУстройствоПопыткаЗаписать" Тогда
		
		ОбработатьОповещениеОбЭлементеМУ(Параметр);
		
	ИначеЕсли ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АПЛКОповещение" Тогда
		
		Если Параметр.ВидДанных = "МобильныеУстройства" Тогда
			Если Параметр.ЕстьОшибки Тогда
				ВывестиСообщения(Параметр, Ложь);
			Иначе
				ЛКЗагрузитьМобильныеУстройстваПродолжить(Параметр, Источник = "БыстраяНастройка");
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		Если Параметр = "*" Или Найти(","+Параметр+",", ",МобильныеУстройства,") <> 0 Тогда
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьТорговыхАгентовПродолжить(РезультатОтвета = Неопределено, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов", ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиИОповестить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаСохранитьВсе(Неопределено);
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Загрузка / обновление МУ из "Личного кабинета"
&НаКлиенте
Процедура КомандаЛКЗагрузитьМУ(Команда)
	
	// проверяем - редактируются ли сейчас настройки агентов?
	СтррКонтекст.НастройкиАгентовРедактируются = Ложь;
	Оповестить("АППроверкаРедактированияНастроекАгентов", СтррКонтекст);
	
	Текст = НСтр("ru='Загрузить мобильные устройства из ""Личного кабинета""?';uk='Завантажити мобільні пристрої з ""Особистого кабінету""?'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзЛичногоКабинетаПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЛичногоКабинетаПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если СтррКонтекст.НастройкиАгентовРедактируются Тогда
			Текст = НСтр("ru='Настройки агентов сейчас редактируются, сохраните настройки агентов и повторите попытку.';uk='Налаштування агентів зараз редагуються, збережіть налаштування агентів і спробуйте ще раз.'");
			ПоказатьПредупреждение(, Текст);
		Иначе
			ЛКЗагрузитьМобильныеУстройства();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКНастройкиЗагрузкиМУ(Команда)

	стррПараметры = ЛКПрочитатьНастройкиЗагрузкиМУ();
	
	Оповещение = Новый ОписаниеОповещения("ЛКНастройкиЗагрузкиМУЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("МобильныеУстройстваНастройкаЗагрузкиИзЛК", Новый Структура("Значения", СтррПараметры),, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛКНастройкиЗагрузкиМУЗавершение(стррРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(стррРезультат) = Тип("Структура") Тогда
		ЛКСохранитьНастройкиЗагрузкиМУ(стррРезультат);
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаЛКПроставитьАгентов(Команда)
	
	мСтроки = Новый Массив;
	ОбъектТЧ = Объект.МобильныеУстройства;
	
	Для Каждого ИдСтроки Из Элементы.МобильныеУстройства.ВыделенныеСтроки Цикл
		СтрокаТ = ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки);
		Если ЗначениеЗаполнено(СтрокаТ.ЛК_Employee) Тогда
			мСтроки.Добавить(ИдСтроки);
		КонецЕсли; 
	КонецЦикла;
	Если мСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет выделенных мобильных устройств, которые загружены из ""Личного кабинета"".';uk='Ні виділених мобільних пристроїв, які завантажені з ""Особистого кабінету"".'"));
	Иначе
		стррДопПараметры = Новый Структура;
		стррДопПараметры.Вставить("ИдентификаторыСтрок", мСтроки);
		мСообщения = Новый Массив;
		ЛКСопоставитьАгентов(мСообщения, Ложь, стррДопПараметры);
		// действия ниже надо делать???
		Если СтррКонтекст.ИзмененыСотрудники Тогда
			УстановитьМодифицированостьФормы(Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьКолонкуАгент(Команда)
	
	ОбъектТЧ = Объект.МобильныеУстройства;	
	БылиИзменения = Ложь;
	
	Для Каждого ИдСтроки Из Элементы.МобильныеУстройства.ВыделенныеСтроки Цикл
		СтрокаТ = ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки);
		Если ЗначениеЗаполнено(СтрокаТ.Сотрудник) Тогда
			СтрокаТ.Сотрудник = Неопределено;
			ОбновитьИконкуСтатуса(СтрокаТ);
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиИзменения Тогда
		СтррКонтекст.ИзмененыСотрудники = Истина;
		УстановитьМодифицированостьФормы(Истина);	
	КонецЕсли; 
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_НавигацияПоФормам

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьЛичныйКабинет(Команда)
	
	ЛКЗагрузитьМодуль().Открыть();

КонецПроцедуры

// ОбработчикиКомандФормы_НавигацияПоФормам
#КонецОбласти

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТабМобильныеУстройства

&НаКлиенте
Процедура МобильныеУстройстваПриИзменении(Элемент)
	УстановитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина; // блокируем редактирование строки по клавише F2
КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуЭлементаМУ(СтрокаТ);		

КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	
	ВыделеныЗанятыеМУ = Ложь;
	
	ОбъектТЧ = Объект.МобильныеУстройства;	
	Для Каждого ИдСтроки Из Элементы.МобильныеУстройства.ВыделенныеСтроки Цикл
		СтрокаТ = ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки);
		Если ЗначениеЗаполнено(СтрокаТ.Сотрудник) И СтрокаТ.СтатусНастроек <> 4 Тогда // если СтатусНастроек = 4, значит это только что загруженное из ЛК МУ
			ВыделеныЗанятыеМУ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделеныЗанятыеМУ Тогда
		
		Текст = "";
		Если Элементы.МобильныеУстройства.ВыделенныеСтроки.Количество() > 1 Тогда
			Текст = НСтр("ru='Среди выделенных мобильных устройств есть закрепленные за торговыми агентами!';uk='Серед виділених мобільних пристроїв є закріплені за торговими агентами!'") + " ";
		КонецЕсли;
		
		Текст = Текст + НСтр("ru='Нельзя удалить мобильное устройство, если оно закреплено за торговым агентом. Сначала открепите мобильное устройство в окне ""Торговые агенты"" или очистите колонку ""Агент"" через меню кнопки ""Еще"".';uk='Не можна видалити мобільний пристрій, якщо воно закріплене за торговим агентом. Спочатку відкріпите мобільний пристрій у вікні ""Торгові агенти"" або очистіть колонку ""Агент"" через меню кнопки ""Ще"".'");
		
		ПоказатьПредупреждение(Неопределено, Текст);
		
	Иначе // выделенные МУ можно удалить, но нужно предупредить сотрудника, если по ним есть подтверждения, ожидающие выгрузки в МУ
		
		// проверяем - есть ли среди выделенных МУ те, по которым хранятся в БД подтверждения
		мСтроки = Элементы.МобильныеУстройства.ВыделенныеСтроки;
		СтррСтатистика = ПроверитьНаличиеПодтвержденийДокументов(мСтроки);
			
		Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
			Текст = СтррСтатистика.Описание + 
				СтрШаблон_(НСтр("ru='Удалить выбранные мобильные устройства (выбрано: %1) ?';uk='Видалити вибрані мобільні пристрої (вибрано: %1)?'"), Элемент.ВыделенныеСтроки.Количество());
		Иначе // выделена одна строка
			Текст = СтррСтатистика.Описание + НСтр("ru='Удалить мобильное устройство?';uk='Видалити мобільний пристрій?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("МобильныеУстройстваПередУдалениемЗавершение", ЭтотОбъект, СтррСтатистика.мСсылкиМУ);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Массив = Новый Массив(); // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Элементы.МобильныеУстройства.ВыделенныеСтроки);

		ОбъектТЧ = Объект.МобильныеУстройства;	
		Для Каждого ИдСтроки Из Массив Цикл
			ОбъектТЧ.Удалить(ОбъектТЧ.Индекс(ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки)));
		КонецЦикла;
		
		Если ОбъектТЧ.Количество() = 0 Тогда
			ОбновитьТекстСтатуса();
		КонецЕсли;
		
		УстановитьМодифицированостьФормы(Истина);
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Массив") И ДополнительныеПараметры.Количество() > 0 Тогда
			// Нужно удалить подтверждения у удаленных МУ, их внутренние идентификаторы переданы в массиве в параметре ДополнительныеПараметры.
			// Удаление будет произведено при выполнении команды КомандаСохранитьВсе(), т.к. окончательное удаление МУ из БД 
			// происходит при выполнении этой команды (при выходе из формы сотрудник еще может отказаться от удаления МУ).
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтррКонтекст.МассивМУДляУдаленияПодтверждений, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекстСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныеУстройстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФормуЭлементаМУ();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыТабМобильныеУстройства
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция ВывестиСообщения(стррРезультат, ОчиститьСообщения = Ложь)
	
	Если ОчиститьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Для Каждого Значение Из СтррРезультат.Сообщения Цикл
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

// Функция сохраняет список МУ в хранилище и возвращает параметр для оповещения других окон об изменениях в МУ.
&НаСервере
Функция СохранитьНастройкиСервер()
	
	ПараметрОповещения = "ИзмененСоставМУ";
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.МобильныеУстройства.Колонки.Удалить("Сотрудник"); 			// удаляем сервисные колонки, не сохраняемые в Хранилище
	ТекОбъект.МобильныеУстройства.Колонки.Удалить("ЛКИзмененныеРеквизиты"); //
	ТекОбъект.СохранитьЗначенияНастроекОбработки("МобильныеУстройства");
	
	Если СтррКонтекст.МассивМУДляУдаленияПодтверждений.Количество() > 0 Тогда
		
		// Нужно удалить подтверждения для удаленных МУ.
		ТекОбъект.УдалитьПодтвержденияДокументов(СтррКонтекст.МассивМУДляУдаленияПодтверждений);
		ТекОбъект.УдалитьПодтвержденияСправочников(СтррКонтекст.МассивМУДляУдаленияПодтверждений); // sd_10082017
		СтррКонтекст.МассивМУДляУдаленияПодтверждений.Очистить();
		
	КонецЕсли;
	
	Если СтррКонтекст.ИзмененыСотрудники Тогда // Нужно в настройках агентов сохранить закрепленные за ними МУ
		
		ТЗ = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
		мИзмененныеСтроки = Новый Массив;
		СтррПоиск = Новый Структура("Сотрудник");
		Для Каждого СтрокаТ Из Объект.МобильныеУстройства Цикл
			СтррПоиск.Сотрудник = СтрокаТ.Сотрудник;
			мСтроки = ТЗ.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() <> 0 Тогда
				мСтроки[0].СсылкаМУ = СтрокаТ.ID;
				мИзмененныеСтроки.Добавить(ТЗ.Индекс(мСтроки[0]));
			КонецЕсли;
		КонецЦикла;
		
		// для не измененных строк агентов очищаем ссылки на МУ
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если мИзмененныеСтроки.Найти(ТЗ.Индекс(СтрокаТЗ)) = Неопределено Тогда
				СтрокаТЗ.СсылкаМУ = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		
		ТекОбъект.СохранитьЗначениеНастройки("НастройкиАгентов", ТЗ);
		СтррКонтекст.ИзмененыСотрудники = Ложь;
		
		ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();
		
		ПараметрОповещения = "ИзмененыПривязкиМУкАгентам";
		
	КонецЕсли;
	
	СтррФайлСОД = ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();
	
	Возврат Новый Структура("ПараметрОповещения,ФайлСОД", ПараметрОповещения, СтррФайлСОД);

КонецФункции

// Если в процедуру передан список реквизитов для восстановления, то восстанавливаются только эти реквизиты,
// иначе восстанавливаются все реквизиты, необходимые для работы формы.
&НаСервере
Процедура ВосстановитьНастройкиСервер(РеквизитыВосстановления = "")
	
	Если РеквизитыВосстановления = "" Тогда
		РеквизитыВосстановления = "МобильныеУстройства,НастройкиАгентов";
	КонецЕсли;

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(РеквизитыВосстановления);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Если Найти(РеквизитыВосстановления, "НастройкиАгентов") <> 0 Тогда // нужно обновить колонку "Сотрудник" по данным в ТЗ НастройкиАгентов.
		
		стррОтбор = Новый Структура("СсылкаМУ");
		ТЗНастройкиАгентов = Объект.НастройкиАгентов;
		ТЗМУ = Объект.МобильныеУстройства;
		
		Для Каждого СтрокаТ Из ТЗМУ Цикл
			Если ЗначениеЗаполнено(СтрокаТ.ID) Тогда
				стррОтбор.СсылкаМУ = СтрокаТ.ID;
				мАгенты = ТЗНастройкиАгентов.НайтиСтроки(СтррОтбор);
				СтрокаТ.Сотрудник = ?(мАгенты.Количество() = 0, Неопределено, мАгенты[0].Сотрудник)
			Иначе
				СтрокаТ.Сотрудник = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиИОповестить()

	СтррРезультат = СохранитьНастройкиСервер();
	СтррФайлСОД = СтррРезультат.ФайлСОД;
	
	Если СтррФайлСОД.Свойство("Текст") И СтррФайлСОД.Свойство("Кодировка") И СтррФайлСОД.Свойство("ПолноеИмяФайла") Тогда
		СтррФайлСОД.Текст.Записать(СтррФайлСОД.ПолноеИмяФайла, СтррФайлСОД.Кодировка);
	КонецЕсли;
	
	Оповестить("АПМобильныеУстройстваИзменениеСпискаМУ", СтррРезультат.ПараметрОповещения);

КонецПроцедуры

// Функция считывает из хранилища значение настройки загрузки МУ из ЛК и при необходимости инициализирует значение настройки
&НаСервере
Функция ЛКПрочитатьНастройкиЗагрузкиМУ()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	стррПараметры = ТекОбъект.ПрочитатьЗначениеНастройки("ЛКНастройкиЗагрузкиМУ");
	Если ТипЗнч(стррПараметры) <> Тип("Структура") Тогда
		стррПараметры = Новый Структура;
		стррПараметры.Вставить("РежимПоискаПользователей", 		"ИскатьПоВхождению");
		стррПараметры.Вставить("СоздаватьНовыхПользователей", 	Истина);
		стррПараметры.Вставить("ТолькоДляНовыхИОбновленныхМУ", 	Истина);
		ЛКСохранитьНастройкиЗагрузкиМУ(стррПараметры);
	КонецЕсли; 
	
	Возврат стррПараметры;

КонецФункции

&НаСервере
Функция ЛКСохранитьНастройкиЗагрузкиМУ(стррПараметры)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначениеНастройки("ЛКНастройкиЗагрузкиМУ", стррПараметры);
	
	Возврат стррПараметры;

КонецФункции

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Статусы

&НаКлиенте
Процедура ОбновитьКолонкуСтатусНастройки()

	Для Каждого СтрокаТ Из Объект.МобильныеУстройства Цикл
		ОбновитьИконкуСтатуса(СтрокаТ);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьИконкуСтатуса(СтрокаТ)

	Если СтрокаТ = Неопределено Тогда
	ИначеЕсли ПустаяСтрока(СтрокаТ.Наименование) Или Не ЗначениеЗаполнено(СтрокаТ.ИдентификаторМУ) Тогда
		СтрокаТ.СтатусНастроек = 2;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТ.Сотрудник) Тогда
		СтрокаТ.СтатусНастроек = 3;
	Иначе
		СтрокаТ.СтатусНастроек = 1;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет текст статуса в нижней части экрана и итог количества строк в таблице
&НаКлиенте
Процедура ОбновитьТекстСтатуса(СтрокаТ = Неопределено)
	
	Статус = "";
	
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.МобильныеУстройства.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТ <> Неопределено Тогда
		
		Если СтрокаТ.СтатусНастроек = 4 Тогда
		
			Статус = Статус + НСтр("ru='Загружено из ""Личного кабинета"".';uk='Завантажено з ""Особистого кабінету"".'") + " ";
			
		ИначеЕсли СтрокаТ.СтатусНастроек = 5 Тогда
			
			Статус = Статус + НСтр("ru='Обновлено из ""Личного кабинета"".';uk='Оновлене з ""Особистого кабінету"".'") + " ";
			
		КонецЕсли; 
		
		Если ПустаяСтрока(СтрокаТ.Наименование) Тогда
			Статус = Статус + НСтр("ru='Не заполнено наименование.';uk='Не заповнене найменування.'") + " ";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТ.ИдентификаторМУ) Тогда		
			Статус = Статус + НСтр("ru='Не заполнен идентификатор.';uk='Не заповнений ідентифікатор.'") + " ";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТ.Сотрудник) Тогда
			Статус = Статус + НСтр("ru='Не выбран агент.';uk='Не вибран агент.'") + " ";
		КонецЕсли;
		
		Если Статус = "" Тогда
			Статус = НСтр("ru='Настройки заданы.';uk='Налаштування задані.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияСтатус.Заголовок = Статус;
	
	Если ВсегоСтрок <> Объект.МобильныеУстройства.Количество() Тогда // для вывода количества строк в подвале
		ВсегоСтрок = Объект.МобильныеУстройства.Количество();
		Элементы.МобильныеУстройстваНаименование.ТекстПодвала = ?(ВсегоСтрок = 0, "", НСтр("ru='Всего: ';uk='Всього:'") + Строка(ВсегоСтрок));
	КонецЕсли;
	
	// боремся с отображением "всех иконок" в Платформе - когда в ТабНастройкиАгентов нет строк - убираем видимость иконки статуса
	Если Элементы.МобильныеУстройстваСтатусНастроекИконка.Видимость <> (ВсегоСтрок > 0) Тогда
		Элементы.МобильныеУстройстваСтатусНастроекИконка.Видимость = (ВсегоСтрок > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьИконкуИТекстСтатуса(СтрокаТ = Неопределено)
	
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.МобильныеУстройства.ТекущиеДанные;
	КонецЕсли;
	
	ОбновитьИконкуСтатуса(СтрокаТ);
	ОбновитьТекстСтатуса(СтрокаТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеСтатусы()
	
	ОбновитьКолонкуСтатусНастройки();
	ОбновитьИконкуИТекстСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Статусы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДляФормыЭлементаМУ

// Процедура открывает форму МУ для редактирования или добавления нового МУ.
&НаКлиенте
Процедура ОткрытьФормуЭлементаМУ(СтрокаТ = Неопределено)
	
	СтррРеквизитыМУ = Новый Структура(СтррКонтекст.РеквизитыМУ); // структура - все реквизиты МУ
	
	Если СтрокаТ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтррРеквизитыМУ, СтрокаТ);
	Иначе
		СтррРеквизитыМУ.Наименование = СтрШаблон_(НСтр("ru='МУ N %1';uk='МП N %1'"), Объект.МобильныеУстройства.Количество() + 1);
	КонецЕсли;
	
	МодульК().ОткрытьФормуОбработки("МобильноеУстройство", Новый Структура("СтррРеквизиты", СтррРеквизитыМУ), ЭтаФорма);
	
КонецПроцедуры

// Функция проверяет на уникальность значение в таблице ТабМобильныеУстройства.
//
// Параметры:
//  Значение 	  - Любой - искомое значение;
//  ИмяРеквизита  - Строка - Имя реквизита в таблице, где искать значение;
//  ДопПараметры  - Структура - свойства:
//  	* ИсключитьID - внутренний идентификатор редактиреомого МУ (который нужно исключить из поиска);
//  	* СтрокаТаблицы - ДанныеФормыЭлементКоллекции - возвращается второй результат функции - строка с найденным значением.
//
// Возвращаемое значение:
//   Истина - Булево - значение уникально, иначе - Ложь.
//
&НаКлиенте
Функция ЭтоУникальноеЗначениеМУ(Значение, ИмяРеквизита, ДопПараметры)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		мСтроки = Объект.МобильныеУстройства.НайтиСтроки(Новый Структура(ИмяРеквизита, Значение));
		
		Для Каждого СтрокаТ Из мСтроки Цикл
			
			Если СтрокаТ.ID <> ДопПараметры.ИсключитьID Тогда
				ДопПараметры.СтрокаТаблицы = СтрокаТ; // найденную строку возвращаем в параметре
				Результат = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвразщает строку таблицы ТабМобильныеУстройства по внутреннему идентификатору ID.
// Если строка по ID не находится, то добавляется и возвращается новая строка.
// 
// Параметры:
//  ID - УникальныйИдентификатор - внутренний идентификатор элемента МУ;
//
// Возвращаемое значение:
//   Строка таблицы ТабМобильныеУстройства.
//
&НаКлиенте
Функция ПолучитьСтрокуТаблицыМУ(ID)
	
	мСтроки = Объект.МобильныеУстройства.НайтиСтроки(Новый Структура("ID", ID));
	Возврат ?(мСтроки.Количество() = 0, Объект.МобильныеУстройства.Добавить(), мСтроки[0]);
	
КонецФункции

// Процедура проверят правильность свойств МУ, переданного в параметре.
// Если свойства МУ заполнены правильно, оно обновляется или добавляется в таблице ТабМобильныеУстройства.
// 
// Параметры:
//  СтррРеквизитыМУ - Структура - свойства:
//  	* ID - УникальныйИдентификатор - внутренний уникальный идентификатор элемента МУ;
//  	* Наименование - Строка - наименование МУ;
//  	* Описание - Строка - описание МУ.
//  	* ИдентификаторМУ - УникальныйИдентификатор - идентификатор МУ, используемый в СОД.
//  	* Сотрудник - СправочникСсылка.Сотрудники - сотрудник, закрепленный за МУ.
&НаКлиенте
Процедура ОбработатьОповещениеОбЭлементеМУ(СтррРеквизитыМУ)

	// Проверяем на уникальность идентификатор для нового/отредактированного МУ
	СтррРезультат = Новый Структура("ПолеОшибки,Сообщение", Неопределено, "");
	СтррПараметры = Новый Структура("ИсключитьID,СтрокаТаблицы", СтррРеквизитыМУ.ID);
	
	Если Не ЭтоУникальноеЗначениеМУ(СтррРеквизитыМУ.Наименование, "Наименование", СтррПараметры) Тогда
		
		СтррРезультат.ПолеОшибки = "Наименование"; 
		Текст = НСтр("ru='Наименование уже указано в строке N ""%1"" в списке мобильных устройств.';uk='Найменування вже зазначено в рядку N ""%1"" в списку мобільних пристроїв.'");
		СтррРезультат.Сообщение = СтрШаблон_(Текст, СтррПараметры.СтрокаТаблицы.ПолучитьИдентификатор() + 1);
		
	ИначеЕсли Не ЭтоУникальноеЗначениеМУ(СтррРеквизитыМУ.ИдентификаторМУ, "ИдентификаторМУ", СтррПараметры) Тогда
		
		СтррРезультат.ПолеОшибки = "ИдентификаторМУ";
		Текст = НСтр("ru='Идентификатор уже указан для мобильного устройства ""%1"" в списке мобильных устройств.';uk='Ідентифікатор вже вказано для мобільного пристрою ""%1"" в списку мобільних пристроїв.'");
		СтррРезультат.Сообщение = СтрШаблон_(Текст, СокрЛП(СтррПараметры.СтрокаТаблицы.Наименование));
		
	ИначеЕсли Не ЭтоУникальноеЗначениеМУ(СтррРеквизитыМУ.Сотрудник, "Сотрудник", СтррПараметры) Тогда
		
		СтррРезультат.ПолеОшибки = "Сотрудник";
		Текст = НСтр("ru='Сотрудник уже указан для мобильного устройства ""%1"" в списке мобильных устройств.';uk='Співробітник вже вказано для мобільного пристрою ""%1"" в списку мобільних пристроїв.'");
		СтррРезультат.Сообщение = СтрШаблон_(Текст, СокрЛП(СтррПараметры.СтрокаТаблицы.Наименование));
		
	КонецЕсли;
	
	Оповестить("АПМобильныеУстройстваОтвет", СтррРезультат);
	
	Если Не ЗначениеЗаполнено(СтррРезультат.ПолеОшибки) Тогда // ошибок нет, элемент МУ можно записать в таблицу
		
		СтрокаТ = ПолучитьСтрокуТаблицыМУ(СтррРеквизитыМУ.ID);
		ПрежнийСотрудник = СтрокаТ.Сотрудник;
		ЗаполнитьЗначенияСвойств(СтрокаТ, СтррРеквизитыМУ); 
		Если ПрежнийСотрудник <> СтрокаТ.Сотрудник Тогда
			СтррКонтекст.ИзмененыСотрудники = Истина; // признак, что у мобильных устройств изменялись ссылки на сотрудников
		КонецЕсли;
		ОбновитьИконкуИТекстСтатуса(СтрокаТ);
		Элементы.МобильныеУстройства.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;

КонецПроцедуры

// Функция возвращает названия реквизитов МУ в виде строки (список названий колонок ТЗ "МобильныеУстройства")
&НаСервере
Функция ПолучитьНазванияРеквизитовМУ(ТекОбъект)
	
	Результат = "";
	Для Каждого Колонка Из ТекОбъект.МобильныеУстройства.Колонки Цикл
		Результат = Результат + "," + Колонка.Имя;
	КонецЦикла;
	
	Результат = Сред(Результат, 2);
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ДляФормыЭлементаМУ
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодтержденияДокументов

// Функция проверяет есть ли в БД данные о подтверждениях документов для МУ (т.е. участвовали ли МУ в обмене данными).
// 
// Параметры:
//  мСтроки     - Массив - массив строк таблицы значений МобильныеУстройства для проверки МУ каждой строки.
//
// Возвращаемое значение:
//  Структура со свойствами:
// 		Описание  - Строка - строка (многострочная) с описанием статистки обмена с МУ (если был обмен схотя бы с одним из переданных МУ), 
//							или пустая строка (если не было обменов ни с одним из переданных МУ).
//		мСсылкиМУ - массив внутренних идентификаторов МУ, с которыми был обмен данными (т.е. для которых есть подтверждения обмена данными).
//  
&НаСервере
Функция ПроверитьНаличиеПодтвержденийДокументов(мСтроки)
	
	Описание = "";
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	
	ОбъектТЧ = Объект.МобильныеУстройства;	
	Шаблон = Символы.Таб + НСтр("ru='- МУ: ""%1"", данные %2, документов: %3';uk='- МП: ""%1"", дані %2, документів: %3'");
	ПереводСтроки = "";
	
	мСсылкиМУ = Новый Массив; // массив внутренних идентификаторов МУ, у которых есть подтверждения
	
	Для Каждого ИдСтроки Из мСтроки Цикл
		
		СтрокаТ = ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки);
		
		ТЗ = ТекОбъект.ПодтвержденияСДОткрыть("Документы", СтрокаТ.ID, Истина); //vd_181022 ТЗ = ТекОбъект.СДОткрытьПодтвержденияДокументов(СтрокаТ.ID, Истина);
		
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") И ТЗ.Количество() > 0 Тогда
			мСсылкиМУ.Добавить(СтрокаТ.ID);
			ТЗ.Сортировать("Дата");
			ДатаНачала = ТЗ[0].Дата;
			ДатаКонца  = ТЗ[ТЗ.Количество()-1].Дата;
			СтрПериод  = ?(ДатаНачала = ДатаКонца, 
					СтрШаблон_(НСтр("ru='от %1';uk='від %1'"), ДатаНачала), 
					СтрШаблон_(НСтр("ru='с %1 по %2';uk='з %1 по %2'"), ДатаНачала, ДатаКонца));
			Описание = Описание + ПереводСтроки + СтрШаблон_(Шаблон, СтрокаТ.Наименование, СтрПериод, ТЗ.Количество());
			Если ПереводСтроки = "" Тогда
				ПереводСтроки = ";" + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если мСсылкиМУ.Количество() > 0 Тогда // есть МУ, участвующие в обмене
		Если мСсылкиМУ.Количество() = 1 Тогда
			Вступление = НСтр("ru='Удаляемое мобильное устройство (МУ) участвовало в обмене данными! Статистика обмена:';uk='Видаляється мобільний пристрій (МП) брало участь в обміні даними! Статистика обміну:'");
			Концовка   = НСтр("ru='После удаления обмен с ним прекратится!';uk='Після видалення обмін з ним припиниться!'");
		Иначе
			Вступление = НСтр("ru='Удаляемые мобильные устройства (МУ) участвовали в обмене данными! Статистика обмена:';uk='Видаляються мобільні пристрої (МП) брали участь в обміні даними! Статистика обміну:'");
			Концовка   = НСтр("ru='После удаления перечисленных МУ обмен с ними прекратится!';uk='Після видалення перерахованих МП обмін з ними припиниться!'");
		КонецЕсли;
		Описание = Вступление + Символы.ПС	+ Описание + "." + Символы.ПС + Концовка + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	Возврат Новый Структура("Описание,мСсылкиМУ", Описание, мСсылкиМУ);
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПодтержденияДокументов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЛК

&НаКлиентеНаСервереБезКонтекста 
Процедура ПреобразоватьВУникальныйИдентификатор(Значение)
	

	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат;
	Иначе
		стрРезультат = "00000000-0000-0000-0000-000000000000";		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Ид = НРег(СокрЛП(Значение));
			Если СтрДлина(Ид) = 36 Тогда
				GUID0 = Ид;
				Для Поз = 1 По 15 Цикл
					GUID0 = СтрЗаменить(GUID0, Сред("123456789abcdef", Поз, 1), "0");
				КонецЦикла;
				Если GUID0 = стрРезультат Тогда
					стрРезультат = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Новый УникальныйИдентификатор(стрРезультат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПреобразоватьВДату(Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = ДатаВремяJSONВФормат1С(Значение);
	КонецЕсли; 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаВремяJSONВФормат1С(стрДатаВремя)

	// пример в JSON: "2014-07-11T06:42:58.16"
	Если СтрДлина(стрДатаВремя) < 19 Тогда
	    Возврат '00010101';
	КонецЕсли; 
	
	Год   	= Число(Лев(стрДатаВремя, 4));
	Месяц 	= Число(Сред(стрДатаВремя, 6, 2));
	День  	= Число(Сред(стрДатаВремя, 9,2));
	Часы    = Число(Сред(стрДатаВремя, 12, 2));
	Минуты  = Число(Сред(стрДатаВремя, 15, 2));
	Секунды = Число(Сред(стрДатаВремя, 18, 2));

	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции

&НаКлиенте 
Процедура ЛКЗагрузитьМобильныеУстройства(БыстраяНастройка = Ложь)

	ЛКЗагрузитьМодуль().ВнешнийВызовЗагрузитьДанныеИзЛК("МобильныеУстройства", БыстраяНастройка); // Процедура возвращает результат через оповещение "АПЛКОповещение".
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛКСообщить(мСообщения, Текст)
	
	Если мСообщения = Неопределено Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	Иначе
		мСообщения.Добавить(Текст);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура загружает МУ, полученные из ЛК, в таблицу на форме МобильныеУстройства.
// 	Параметры:
//		Параметр - Структура - структура ответа из ЛК, в свойстве Результат - массив загруженных из ЛК МУ.
//		БыстраяНастрока - Булево - режим "Быстрой настройки" - в этом случае массив может быть пустым и нужно не интерактивно предупредить пользователя.
//		
&НаКлиенте 
Процедура ЛКЗагрузитьМобильныеУстройстваПродолжить(Параметр, БыстраяНастройка)
	
	// Массив Параметр.Результат состоит из структур со свойствами:
	// 1. DeviceModel 		- название модели
	// 2. HardwareId		- идентификатор прошивки
	// 3. Identifier		- идентификатор МУ в ЛК - по нему сопоставляем МУ между ЛК и УС
	// 4. LastActivityDate	- время последнего обращения МУ к ЛК
	// 5. Manufacturer		- производитель
	// 6. MDMId				- идентификатор службы MDM
	// 7. Name				- название МУ
	// 8. SerialNumber		- серийный номер
	// 9. Employee			- сотрудник, закрепленый за МУ
	
	стррРеквизиты = Новый Структура; // структура соответствий реквизтов МУ в УС и в ЛК
	стррРеквизиты.Вставить("ЛК_Identifier", 		"Identifier");
	стррРеквизиты.Вставить("ЛК_HardwareId", 		"HardwareId");
	стррРеквизиты.Вставить("ЛК_SerialNumber", 		"SerialNumber");
	стррРеквизиты.Вставить("ЛК_Manufacturer", 		"Manufacturer");
	стррРеквизиты.Вставить("ЛК_Name", 				"Name");
	стррРеквизиты.Вставить("ЛК_Employee", 			"Employee");
	стррРеквизиты.Вставить("ЛК_MDMId", 				"MDMId");
	стррРеквизиты.Вставить("ЛК_DeviceModel", 		"DeviceModel");
	стррРеквизиты.Вставить("ЛК_LastActivityDate", 	"LastActivityDate");
	
	Если БыстраяНастройка Тогда
		мСообщения = Новый Массив; // массив текстовых сообщений, используется для вывода сообщений при "Быстрой настройке"
	Иначе
		мСообщения = Неопределено;
		ОчиститьСообщения();
	КонецЕсли; 

	стрЧислительноеМУ = "мобильное устройство,мобильных устройства,мобильных устройств";
	
	мМУ = Параметр.Результат;
	
	Если БыстраяНастройка и мМУ.Количество() = 0 Тогда
		стррПараметры = Новый Структура("ЕстьОшибки,Описание", Истина, ЛКЗагрузитьМодуль().ОписаниеОтсуствияМУвЛК());
		Оповестить("АПМобильныеУстройства_БыстраяНастройка", стррПараметры); // !!! в параметре возвращаем описание ошибки, чтобы закрепить его в ТЗ статуса
		Возврат;
	КонецЕсли; 
	
	стррПоиск = Новый Структура("ЛК_Identifier");
	
	НовыхМУ 	= 0;
	ОбновленоМУ = 0;
	
	тзМУ = Объект.МобильныеУстройства;
	Для каждого стррМУ Из мМУ Цикл
		
		ПреобразоватьВУникальныйИдентификатор(стррМУ.Identifier);
		ПреобразоватьВУникальныйИдентификатор(стррМУ.HardwareId);
		ПреобразоватьВУникальныйИдентификатор(стррМУ.MDMId);
		ПреобразоватьВДату(стррМУ.LastActivityDate);
		
		стррПоиск.ЛК_Identifier = стррМУ.Identifier;
		мСтроки = тзМУ.НайтиСтроки(стррПоиск);
		
		Если мСтроки.Количество() = 0 Тогда // новое МУ
			
			НовыхМУ = НовыхМУ + 1;
			СтрокаТ = тзМУ.Добавить();
			СтрокаТ.ID = Новый УникальныйИдентификатор; // внутренний уникальный идентификатор элемента справочника
			
			ЛКЗаполнитьРеквизитыМУ(СтрокаТ, стррМУ, стррРеквизиты);
			СтрокаТ.СтатусНастроек  = 4; // статус "только что загружен из ЛК"
			
			// Реквизиты УС
			СтрокаТ.ИдентификаторМУ = СтрокаТ.ЛК_HardwareId;
			СтрокаТ.Наименование	= СтрокаТ.ЛК_Name;
			
		ИначеЕсли мСтроки.Количество() = 1 Тогда
			
			СтрокаТ = мСтроки[0];
			СтрокаТ.ЛКИзмененныеРеквизиты = ЛКПроверитьИзмененияРеквизитовМУ(СтрокаТ, стррМУ, стррРеквизиты);
			Если СтрокаТ.ЛКИзмененныеРеквизиты <> "" Тогда
				ОбновленоМУ = ОбновленоМУ + 1;
				ЛКЗаполнитьРеквизитыМУ(СтрокаТ, стррМУ, стррРеквизиты);
				СтрокаТ.СтатусНастроек  = 5; // статус "обновлен из ЛК"
				Текст = СтрШаблон_(НСтр("ru='У МУ ""%1"" (идентификатор: %2) изменились значения: %3.';uk='У МУ ""%1"" (ідентифікатор: %2) змінилися значення: %3.'"), СтрокаТ.Наименование, стррМУ.Identifier, СтрокаТ.ЛКИзмененныеРеквизиты);
				ЛКСообщить(мСообщения, Текст);
			КонецЕсли; 
			
		Иначе // найдено несколько МУ с одинаковым идентификатором ЛК
			
			ОдинаковыхМУ = ЧислоЦифрамиПредметИсчисленияПрописью(мСтроки.Количество(), стрЧислительноеМУ);
			Текст = СтрШаблон_(НСтр("ru='Внимание! В учетной системе найдено %1 с одинаковым идентификатором ""%2"" (название: %3).';uk='Увага! В обліковій системі знайдено %1 з однаковим ідентифікатором ""%2"" (назва: %3).'"), ОдинаковыхМУ, стррМУ.Identifier, стррМУ.Name);
			ЛКСообщить(мСообщения, Текст);
			Для каждого СтрокаТ Из мСтроки Цикл
				СтрокаТ.СтатусНастроек  = 2;
			КонецЦикла; 

		КонецЕсли; 
	КонецЦикла;
	
	ВсегоЗагруженоМУ = ЧислоЦифрамиПредметИсчисленияПрописью(мМУ.Количество(), стрЧислительноеМУ);
	
	Текст = СтрШаблон_(НСтр("ru='Всего из ""Личного кабинета"" загружено %1. Из них новых: %2, обновлено: %3.';uk='Всього з ""Особистого кабінету"" завантажено %1. З них нових: %2, оновлено: %3.'"), ВсегоЗагруженоМУ, НовыхМУ, ОбновленоМУ);
	ЛКСообщить(мСообщения, Текст);
	
	Если Не БыстраяНастройка Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьТекстСтатуса();
	КонецЕсли; 
	
	ЛКСопоставитьАгентов(мСообщения, БыстраяНастройка);

КонецПроцедуры

&НаКлиенте
Процедура ЛКСопоставитьАгентов(мСообщения, БыстраяНастройка, стррДопПараметры = Неопределено)
	
	// проставляем пользователей для МУ		
	стррРезультат = ЛКЗаполнитьАгентов(мСообщения, стррДопПараметры); // функция не допускает назначение одних и тех же пользователей за разными МУ
	// стррРезультат - структура со свойствами:
	//  * КодРезультата 		  - Строка - код результата.
	//  * СотрудникиНеВАгентах 	  - Массив - массив структур ("СсылкаМУ,Сотрудник") - сотрудники, которых нет среди агентов, но проставленные для МУ.
	//	* ОтсутствующиеСотрудники - Массив - массив структур ("СсылкаМУ,ИмяСотрудника") - имена сотрудников, которых нужно добавить в справочник "Сотрудники".
	
	Если стррРезультат.КодРезультата = "СотрудникНеАгент" Тогда //vd_181022 Если стррРезультат.КодРезультата = "ПользовательНеАгент" Тогда
		// Найдены для сопоставления сотрудников, которых нет в агентах, нужно спросить разрешение 
		// на добавление новых сотрудников в агенты (но при "Быстрой настройке" не спрашиваем).
		// В свойстве "Результат" возвращен массив структур со свойствами "СсылкаМУ,Сотрудник".
		
		//vd_181022
		//стррПараметрыДобавленияАгентов = Новый Структура("СвязиМУиПользователей,БыстраяНастройка,Сообщения", 
		//	стррРезультат, БыстраяНастройка, мСообщения);
		стррПараметрыДобавленияАгентов = Новый Структура("СвязиМУиСотрудников, БыстраяНастройка, Сообщения", 
			стррРезультат, БыстраяНастройка, мСообщения);

		
		Если БыстраяНастройка Тогда 
			// не спрашиваем разрешение на добавление новых агентов
			
			Если стррРезультат.ОтсутствующиеСотрудники.Количество() <= 10 Тогда //vd_181022 Если стррРезультат.ОтсутствующиеПользователи.Количество() <= 10
				// Для быстрой настройки допускаем создание не более 10 новых пользователей в УС.
				ЛКДобавитьНовыхАгентовЗавершить(стррПараметрыДобавленияАгентов); // Требуется создать не более 10 новых пользователей - продолжаем операцию
			Иначе 
				стррРезультат.КодРезультата = "МногоНовыхСотрудниковДляБыстройНастройки"; // vd_181022 стррРезультат.КодРезультата = "МногоНовыхПользователейДляБыстройНастройки";
				стррРезультат.Вставить("Описание", НСтр("ru='Мобильные устройства не загружены.';uk='Мобільні пристрої незавантажені.'"));
				Текст = НСтр("ru='Требуется создать слишком много новых сотрудников (%1), загрузите мобильные устройства из ""Личного кабинета"" вручную. Для этого на форме справочника ""Мобильные устройства"" нажмите кнопку ""%2"".';uk='Потрібно створити занадто багато нових співробітників (%1), завантажте мобільні пристрої з ""Особистого кабінету"" вручну. Для цього на формі довідника ""Мобільні пристрої"" натисніть кнопку ""%2"".'");
				Текст = СтрШаблон_(Текст, стррРезультат.ОтсутствующиеСотрудники.Количество(), НСтр("ru='Загрузить из ""Личного кабинета""';uk='Завантажити з ""Особистого кабінету""'")); //vd_181022 Текст = СтрШаблон_(Текст, стррРезультат.ОтсутствующиеПользователи.Количество(), НСтр("ru='Загрузить из ""Личного кабинета""';uk='Завантажити з ""Особистого кабінету""'"));
				мСообщения.Очистить();				
				ЛКСообщить(мСообщения, Текст);
				//vd_181022
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Мобильные устройства не загружены - слишком много новых пользователей. Выполните операцию вручную.';uk='Мобільні пристрої незавантажені - занадто багато нових користувачів. Виконайте операцію вручну.'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Мобильные устройства не загружены - слишком много новых сотрудников. Выполните операцию вручную.';uk='Мобільні пристрої незавантажені - занадто багато нових співробітників. Виконайте операцію вручну.'"));
			КонецЕсли; 
			
		Иначе // спрашиваем разрешение на добавление новых агентов
			
			Оповещение = Новый ОписаниеОповещения("ЛКДобавитьНовыхАгентовПродолжить", ЭтотОбъект, стррПараметрыДобавленияАгентов);
			ПоказатьВопрос(Оповещение, ЛКПодготовитьТекстВопросаДляДобавленияСотрудников(стррРезультат), РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если БыстраяНастройка Тогда // нужно сохранить изменения в хранилище и оповестить окно "БыстраяНастройка"
		
		//vd_181022
		//МожноЗаписатьМУ = (
		//		стррРезультат.КодРезультата = "ВыключенПоискПользователей"		
		//	Или стррРезультат.КодРезультата = "НетСопоставленныхПользователей" 
		//	Или стррРезультат.КодРезультата = "ПользовательНеАгент"
		//	Или стррРезультат.КодРезультата = Неопределено);
		МожноЗаписатьМУ = (
				стррРезультат.КодРезультата = "ВыключенПоискСотрудников"		
			Или стррРезультат.КодРезультата = "НетСопоставленныхСотрудников" 
			Или стррРезультат.КодРезультата = "СотрудникНеАгент"
			Или стррРезультат.КодРезультата = Неопределено);

			
		Если МожноЗаписатьМУ Тогда // данные о новых МУ можно записать в хранилище
			СохранитьНастройкиИОповестить();		
		КонецЕсли;
		
		// оповещаем о быстрой настройке МУ
		стррПараметрыОповещения = Новый Структура("ЕстьОшибки,Сообщения", Не МожноЗаписатьМУ, мСообщения);
		Если стррРезультат.Свойство("Описание") Тогда
			стррПараметрыОповещения.Вставить("Описание", стррРезультат.Описание);
		КонецЕсли; 
		Оповестить("АПМобильныеУстройства_БыстраяНастройка", стррПараметрыОповещения); // в параметре возвращаются данные чтобы закрепить его в ТЗ статуса окна "Быстрой настройки"
		
	КонецЕсли;

КонецПроцедуры

//vd_181022 Переименована ЛКПодготовитьТекстВопросаДляДобавленияПользователей(стррПараметры) 
&НаКлиенте
Функция ЛКПодготовитьТекстВопросаДляДобавленияСотрудников(стррПараметры)

	Текст = ""; 
	
	Если стррПараметры.СотрудникиНеВАгентах.Количество() <> 0 Тогда //vd_181022 Если стррПараметры.ПользователиНеВАгентах.Количество() <> 0 Тогда
		
		Если стррПараметры.СотрудникиНеВАгентах.Количество() = 1 Тогда //vd_181022 стррПараметры.ПользователиНеВАгентах.Количество() = 1
			Текст = Текст + СтрШаблон_(НСтр("ru='Найден сотрудник, отсутствующий в справочнике ""Торговых агентов"": %1.';uk='Знайдений співробітник, відсутній в довіднику ""Торгових агентів"": %1.'"), 
				стррПараметры.СотрудникиНеВАгентах[0].Сотрудник) + Символы.ПС; //vd_181022 Текст = Текст + СтрШаблон_(НСтр("ru='Найден пользователь, отсутствующий в справочнике ""Торговых агентов"": %1.';uk='Знайдений користувач, відсутній в довіднику ""Торгових агентів"": %1.'"), стррПараметры.ПользователиНеВАгентах[0].Пользователь) + Символы.ПС;;
			Иначе
				
			стрСотрудники = ""; //vd_181022 переименована из стрПользователи 	  
			Номер 	      = 0;
			Для каждого стррЭлемент Из стррПараметры.СотрудникиНеВАгентах Цикл //vd_181022 Для каждого стррЭлемент Из стррПараметры.ПользователиНеВАгентах Цикл
				Номер = Номер + 1;
				стрСотрудники = стрСотрудники + СтрШаблон_("%1. %2", Номер, стррЭлемент.Сотрудник) + Символы.ПС; //vd_181022 стрПользователи = стрПользователи + СтрШаблон_("%1. %2", Номер, стррЭлемент.Пользователь) + Символы.ПС;
			КонецЦикла; 
			Текст = Текст + НСтр("ru='Найдены сотрудники, отсутствующие в справочнике ""Торговых агентов"":';uk='Знайдено співробітники, відсутні в довіднику ""Торгових агентів"":'") + Символы.ПС + стрСотрудники; //vd_181022 Текст = Текст + НСтр("ru='Найдены пользователи, отсутствующие в справочнике ""Торговых агентов"":';uk='Знайдено користувачі, відсутні в довіднику ""Торгових агентів"":'") + Символы.ПС + стрПользователи;
		КонецЕсли; 
	КонецЕсли; 
	
	Если стррПараметры.ОтсутствующиеСотрудники.Количество() <> 0 Тогда //vd_181022 Если стррПараметры.ОтсутствующиеПользователи.Количество() <> 0 Тогда
		Если стррПараметры.ОтсутствующиеСотрудники.Количество() = 1 Тогда //vd_181022 Если стррПараметры.ОтсутствующиеПользователи.Количество() = 1
		    Текст = Текст + СтрШаблон_(НСтр("ru='Будет создан новый сотрудник в 1С:Предприятии: %1.';uk='Буде створений новий співробітник в 1С:Підприємстві: %1.'"), 
				стррПараметры.ОтсутствующиеСотрудники[0].ИмяСотрудника) + Символы.ПС; //vd_181022  Текст = Текст + СтрШаблон_(НСтр("ru='Будет создан новый пользователь в 1С:Предприятии: %1.';uk='Буде створено новий користувач в 1С:Підприємстві: %1.'"), стррПараметры.ОтсутствующиеПользователи[0].ИмяПользователя) + Символы.ПС;
		Иначе
			стрСотрудники = ""; 
			Номер = 0;
			Для каждого стррЭлемент Из стррПараметры.ОтсутствующиеСотрудники Цикл  //vd_181022 Для каждого стррЭлемент Из стррПараметры.ОтсутствующиеПользователи Цикл
				Номер = Номер + 1;
				стрСотрудники = стрСотрудники + СтрШаблон_("%1. %2", Номер, стррЭлемент.ИмяСотрудника) + Символы.ПС; //vd_181022 стрПользователи = стрПользователи + СтрШаблон_("%1. %2", Номер, стррЭлемент.ИмяПользователя) + Символы.ПС;
			КонецЦикла; 
			Текст = Текст + НСтр("ru='Будут созданы новые сотрудники в 1С:Предприятии:';uk='Будуть створені нові співробітники в 1С:Підприємстві:'") + Символы.ПС + стрСотрудники; //vd_181022 Текст = Текст + НСтр("ru='Будут созданы новые пользователи в 1С:Предприятии:';uk='Будуть створені нові користувачі в 1С:Підприємстві:'") + Символы.ПС + стрПользователи;
		КонецЕсли;
	КонецЕсли; 
	
	Если стррПараметры.ОтсутствующиеСотрудники.Количество() <> 0 Тогда  //vd_181022 Если стррПараметры.ОтсутствующиеПользователи.Количество() <> 0 Тогда
		Текст = Текст + НСтр("ru='Создать новых сотрудников и перенести в справочник ""Торговых агентов""?';uk='Створити нових співробітників і перенести в довідник ""Торгових агентів""?'"); //vd_181022 Текст = Текст + НСтр("ru='Создать новых пользователей и перенести в справочник ""Торговых агентов""?';uk='Створити нових користувачів і перенести в довідник ""Торгових агентів""?'");
	Иначе
		Текст = Текст + НСтр("ru='Добавить сотрудников в справочник ""Торговых агентов""?';uk='Додати співробітників в довідник ""Торгових агентів""?'"); //vd_181022 Текст = Текст + НСтр("ru='Добавить пользователей в справочник ""Торговых агентов""?';uk='Додати користувачів до довідника ""Торгових агентів""?'");

	КонецЕсли;
	
	Возврат Текст;

КонецФункции

&НаКлиенте
Процедура ЛКДобавитьНовыхАгентовПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЛКДобавитьНовыхАгентовЗавершить(ДополнительныеПараметры);
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура проставляет сотрудников для МУ.
// 
// Параметры:
//		стррПараметры - Структура - структура со свойствами:
//			* СвязиМУиСотрудников - структура со свойствами:
//  			 * СотрудникиНеВАгентах 	 - массив структур ("СсылкаМУ,Сотрудник") - сотрудники, которых нет среди агентов, но проставленные для МУ;
//				 * ОтсутствующиеСотрудники   - массив структур ("СсылкаМУ,ИмяСотрудника") - имена сотрудников, которых нужно добавить в справочник "Сотрудники".
//			* БыстраяНастройка - Булево - если значение Истина, то выполняется неинтерактивно;
//			* Сообщения - массив текстовых сообщений для неинтерактивного вывода.
&НаКлиенте
Процедура ЛКДобавитьНовыхАгентовЗавершить(стррПараметры)
	
	стррПараметрыФормы = Новый Структура;
	стррПараметрыФормы.Вставить("ВХОбщиеПараметры", СтррКонтекст.ВХОбщиеПараметры);
	Модуль = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиАгентов", стррПараметрыФормы, ЭтаФорма);
	Модуль.ВнешнийВызовСоздатьАгентов(стррПараметры); // создаются новые агенты со связями с МУ
	// Агенты созданы в результате загрузки новых МУ из ЛК.
	// в свойстве СвязиМУиСотрудников указан массив для простановки агентов (сотрудников) у загруженных МУ.
	ЛКПроставитьНовыхАгентов(стррПараметры.СвязиМУиСотрудников); //vd_181022 ЛКПроставитьНовыхАгентов(стррПараметры.СвязиМУиПользователей);
	
КонецПроцедуры

// Функция сверяет основные значения реквизитов МУ, загруженных из ЛК, с реквизитами из УС.
// Возвращает строку в виде перечисления названий измененных реквизитов, как они названы в УС.
&НаКлиенте
Функция ЛКПроверитьИзмененияРеквизитовМУ(СтрокаТ, стррМУ, стррРеквизиты)
	
	ТипСтрока = Тип("Строка");
	стрРеквизиты = ""; // список измененных реквизитов в УС
	
	Для каждого Элемент Из стррРеквизиты Цикл
		ЗначениеУС = СтрокаТ[Элемент.Ключ];
		
		Если ТипЗнч(ЗначениеУС) = ТипСтрока Тогда
			Если СокрП(ЗначениеУС) = СокрП(стррМУ[Элемент.Значение]) Тогда
				Продолжить;
			КонецЕсли; 
		ИначеЕсли ЗначениеУС = стррМУ[Элемент.Значение] Тогда
			Продолжить;
		КонецЕсли;
		
		// значение изменено
		Если стрРеквизиты = "" Тогда
			стрРеквизиты = Элемент.Ключ;
		Иначе
			стрРеквизиты = стрРеквизиты + "," + Элемент.Ключ;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат стрРеквизиты;
	
КонецФункции

&НаКлиенте
Процедура ЛКЗаполнитьРеквизитыМУ(СтрокаТ, стррМУ, стррРеквизиты)
	
	Для каждого Элемент Из стррРеквизиты Цикл
		СтрокаТ[Элемент.Ключ] = стррМУ[Элемент.Значение];
	КонецЦикла; 
	Если СтрокаТ.ДатаРегистрации = Дата(1, 1, 1) Тогда
		СтрокаТ.ДатаРегистрации = ТекущаяДата();
	КонецЕсли;
	СтрокаТ.ЗагруженИзЛК = Истина;	
	
КонецПроцедуры	
	
&НаКлиенте
Функция ЛКЗагрузитьМодуль()
	
	Если МодульЛК = Неопределено Тогда
		МодульЛК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "ЛичныйКабинет", СтррКонтекст, ЭтаФорма);
	КонецЕсли; 
	
	Возврат МодульЛК;

КонецФункции

// Автоматическая установка агентов в МУ по реквизиту ЛК_Employee.
// Функция контролирует, чтобы одни и те же сотрудники не были назначены за разными МУ.
// Заполняется колонка Объект.МобильныеУстройства.Сотрудник - только на форме - без сохранения в хранилище.
// 
// Параметры:
// 		мСообщения - Массив, Неопределено - массив текстовых сообщений для вывода в окне Сообщить при "Быстрой насторйке".
// 					Другие параметры заполнения агентов берутся из хранилища - при помощи функции ЛКПрочитатьНастройкиЗагрузкиМУ().
// 		стррДопПараметры - Структура, Неопределено - дополнительные параметры поиска, используются для сужения области поиска - при интерактивном сопоставлении
// 					сотрудника для МУ из формы просмотра конкретного МУ.
// 				Свойства структуры:
// 			* ИдентификаторыСтрок - Массив - идентификаторы строк ТЗ МобильныеУстройства (значения поля МобильныеУстройства.ID) для сопоставления для них агентов.
//				
// Возвращаемое значение:
//  Структура -
//  	* КодРезультата - Строка - код результата. Возможные значения:
//  			"ВыключенПоискСотрудников"  	- в настройках выключен поиск сотрудников (настройки открываются по кнокпе "Настройки загрузки");
//  			"СотрудникНеАгент"  			- найден сотрудник(ли) для МУ, которого нет среди агентов;
//  			"НетСопоставленныхСотрудников" 	- не найдено сотрудников для соспоставления.
//		* СотрудникиНеВАгентах	    - Массив - массив структур ("СсылкаМУ,Сотрудник") - сотрудники, которых нет среди агентов, но проставленные для МУ.
//		* ОтсутствующиеСотрудники	- Массив - массив структур ("СсылкаМУ,ИмяСотрудника") - имена сотрудников, которых нужно добавить в справочник "Сотрудники".
//		* ПроставленныеАгенты    	- Массив - массив структур ("СсылкаМУ,Сотрудник") - сотрудники, которые есть среди агентов и проставлены для МУ.
//	
&НаСервере
Функция ЛКЗаполнитьАгентов(мСообщения, стррДопПараметры = Неопределено)
	
	СтррРезультат = Новый Структура("КодРезультата, СотрудникиНеВАгентах, ОтсутствующиеСотрудники, ПроставленныеАгенты"); //vd_181022СтррРезультат = Новый Структура("КодРезультата,ПользователиНеВАгентах,ОтсутствующиеПользователи,ПроставленныеАгенты");
	
	стррПараметры = ЛКПрочитатьНастройкиЗагрузкиМУ(); // настройки поиска сотрудников - редактируются по кнопке "Настройки загрузки".
	// Процедура возвращает структуру со свойствами:
	// "РежимПоискаПользователей" 		- Строка -  варианты значения: "НеИскать", "ИскатьПоВхождению", "ИскатьПоТочномуЗначению"
	// "СоздаватьНовыхПользователей" 	- Булево
	// "ТолькоДляНовыхИОбновленныхМУ" 	- Булево
	Если стррПараметры.РежимПоискаПользователей = "НеИскать" Тогда
		Текст = НСтр("ru='В настройках выключен поиск сотрудников для загруженных МУ.';uk='В налаштуваннях вимкнений пошук співробітників для завантажених МП.'"); //vd_181022 Текст = НСтр("ru='В настройках выключен поиск пользователей для загруженных МУ.';uk='В налаштуваннях вимкнений пошук користувачів для завантажених МУ.'");
		ЛКСообщить(мСообщения, Текст);
		СтррРезультат.КодРезультата = "ВыключенПоискСотрудников";  //vd_181022 СтррРезультат.КодРезультата = "ВыключенПоискПользователей";
		Возврат СтррРезультат;
	КонецЕсли; 
	
	Если стррДопПараметры <> Неопределено Тогда // функция вызвана для интерактивного назначения сотрудника
		стррПараметры.ТолькоДляНовыхИОбновленныхМУ = Ложь; // отключаем режим поиска только для новых и обновленных МУ (т.к. может быть выбрано новое или обновленное МУ)
		КоллекцияСтрок = Новый Массив;		
		ТЗ = Объект.МобильныеУстройства;
		Для Каждого ИдСтроки Из стррДопПараметры.ИдентификаторыСтрок Цикл
			СтрокаТ = ТЗ.НайтиПоИдентификатору(ИдСтроки);
			КоллекцияСтрок.Добавить(СтрокаТ);
		КонецЦикла;
		ТолькоДляМУСПустымиСотрудниками = Ложь; //vd_181022 Переименована ТолькоДляМУСПустымиПользователями
	Иначе
		КоллекцияСтрок = Объект.МобильныеУстройства;
		ТолькоДляМУСПустымиСотрудниками = Истина; //vd_181022 Переименована ТолькоДляМУСПустымиПользователями
	КонецЕсли; 
	
	//{{vd_181019 Выбирал пользователей, нужно выбирать сотрудников 
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Пользователи.Ссылка КАК Ссылка,
	//               |	Пользователи.Наименование КАК Наименование
	//               |ИЗ
	//               |	Справочник.Пользователи КАК Пользователи
	//               |ГДЕ
	//               |	Пользователи.ПометкаУдаления <> ИСТИНА
	//               |	И Пользователи.Недействителен <> ИСТИНА";
	//	
	//тзПользователи = Запрос.Выполнить().Выгрузить(); // ТЗ всех пользователей учетной системы
	//
	//Для Каждого стзПользователи Из тзПользователи Цикл // переводим наименование пользователей в верхний регистр и заменяем схожие символы
	//	Наименование = ВРег(СокрЛП(СтрЗаменить(стзПользователи.Наименование, "  ", " ")));
	//	стзПользователи.Наименование = СтрЗаменить(Наименование, "Ё", "Е");
	//КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка,
	               |	Сотрудники.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ПометкаУдаления <> ИСТИНА
	               |	И Сотрудники.Недействителен <> ИСТИНА";

	//vd_181019 Переименована переменна тзПользователи на тзСотрудники
	тзСотрудники = Запрос.Выполнить().Выгрузить(); // ТЗ всех пользователей учетной системы

	Для Каждого стзСотрудники Из тзСотрудники Цикл // переводим наименование пользователей в верхний регистр и заменяем схожие символы
		Наименование = ВРег(СокрЛП(СтрЗаменить(стзСотрудники.Наименование, "  ", " ")));
		стзСотрудники.Наименование = СтрЗаменить(Наименование, "Ё", "Е");
	КонецЦикла; 
	//}}vd_181019
	
	
	мВыбранныеАгенты = Новый Массив; // массив уже выбранных у МУ агентов, чтобы не допустить назначения одного и того же агента за разными МУ
	Для Каждого СтрокаТ Из Объект.МобильныеУстройства Цикл
		//{{vd_181019
		//Если ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
		//	мВыбранныеАгенты.Добавить(СтрокаТ.Пользователь);
		//КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТ.Сотрудник) Тогда
			мВыбранныеАгенты.Добавить(СтрокаТ.Сотрудник);
		КонецЕсли;
		//}}vd_181019
	КонецЦикла;
	
	ТЗРезультаты = Новый ТаблицаЗначений; 			// Промежуточная таблица связей: "Строка ТЗ МобильныеУстройства" <-> Сотрудник
	ТЗРезультаты.Колонки.Добавить("строкаТЗМУ");
	
	//vd_181019
	//ТЗРезультаты.Колонки.Добавить("Пользователь"); 	// Ссылка на элемент справочника "Пользователи",  если значение "Неопределено", то требуется создание нового пользователя с ФИО из колонки "ЛК_Employee" строки ТЗ МобильныеУстройства.
	ТЗРезультаты.Колонки.Добавить("Сотрудник");
	
	ТолькоДляНовыхИОбновленныхМУ = стррПараметры.ТолькоДляНовыхИОбновленныхМУ;
	РежимПоискаПользователей 	 = стррПараметры.РежимПоискаПользователей;
	СоздаватьНовыхПользователей  = стррПараметры.СоздаватьНовыхПользователей;
	
	//vd_181019 Переименован из мИменаСоздаваемыхПользователей в мИменаСоздаваемыхСотрудников
	мИменаСоздаваемыхСотрудников = Новый Массив; // массив строковых представлений создаваемых новых сотрудников - чтобы не допустить создания сотрудников с одинаковыми наименованиями
	
	Для Каждого СтрокаТ Из КоллекцияСтрок Цикл
		
		//vd_181019
		//Если ТолькоДляМУСПустымиПользователями И ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
		Если ТолькоДляМУСПустымиСотрудниками И ЗначениеЗаполнено(СтрокаТ.Сотрудник) Тогда
			Продолжить;  // ищем только среди МУ с пустым значением "Сотрудник"
		ИначеЕсли ПустаяСтрока(СтрокаТ.ЛК_Employee) Тогда
			Продолжить;
		ИначеЕсли ТолькоДляНовыхИОбновленныхМУ И СтрокаТ.СтатусНастроек <> 4 И СтрокаТ.СтатусНастроек <> 5 Тогда
			Продолжить; // Коды статусов настроек: 4 - новое МУ, загруженное из ЛК; 5 - обновленное МУ, загруженное из ЛК
		КонецЕсли;
		
		ИскатьНаименованиеСотрудника = ВРег(СокрЛП(СтрЗаменить(СтрокаТ.ЛК_Employee, "  ", " "))); //vd_181022 Переименована Было: ИскатьНаименованиеПользователя
		ИскатьНаименованиеСотрудника = СтрЗаменить(ИскатьНаименованиеСотрудника, "Ё", "Е");
		
		СтрокаРезультат = тзСотрудники.Найти(ИскатьНаименованиеСотрудника, "Наименование");
		Если СтрокаРезультат = Неопределено Тогда
			Если РежимПоискаПользователей = "ИскатьПоВхождению" И СтрДлина(ИскатьНаименованиеСотрудника) > 2 Тогда // не ищем вхождение, если ЛК_Employee короче 3 символов.
				мСлова = СтрРазделить_(ИскатьНаименованиеСотрудника, " ");
				ВсегоСлов = мСлова.Количество();
				
				//vd_181019 Переименование
				//Для Каждого стзПользователи Из тзСотрудники Цикл
				Для Каждого стзСотрудники Из тзСотрудники Цикл // цикл поиска по вхождению слов
					Наименование = стзСотрудники.Наименование;
					НайденоСлов = 0;
					Для Каждого Слово Из мСлова Цикл
						Если Найти(Наименование, " " + Слово + " ") <> 0 Тогда
							НайденоСлов = НайденоСлов + 1;
							Наименование = СтрЗаменить(Наименование, Слово, "");
						ИначеЕсли Лев(Наименование, СтрДлина(Слово) + 1) = Слово + " " Тогда
							НайденоСлов = НайденоСлов + 1;
							Наименование = СтрЗаменить(Наименование, Слово, "");
						ИначеЕсли Прав(Наименование, СтрДлина(Слово) + 1) = " " + Слово Тогда
							НайденоСлов = НайденоСлов + 1;
							Наименование = СтрЗаменить(Наименование, Слово, "");
						Иначе
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					Если НайденоСлов = ВсегоСлов Тогда
						СтрокаРезультат = стзСотрудники;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРезультат <> Неопределено Тогда // найден подходящий сотрудник в справочнике "Сотрудники"
			Если мВыбранныеАгенты.Найти(СтрокаРезультат.Ссылка) = Неопределено Тогда // Сотрудник свободен - т.е. для него нет назначенного МУ
				стзРезультаты = ТЗРезультаты.Добавить();
				стзРезультаты.строкаТЗМУ = СтрокаТ;
				стзРезультаты.Сотрудник  = СтрокаРезультат.Ссылка; //vd_181019 //стзРезультаты.Пользователь = СтрокаРезультат.Ссылка;
				мВыбранныеАгенты.Добавить(СтрокаРезультат.Ссылка); // чтобы избежать назначения одних и тех же новых сотрудников за разными МУ
			КонецЕсли;
		ИначеЕсли СоздаватьНовыхПользователей И мИменаСоздаваемыхСотрудников.Найти(ИскатьНаименованиеСотрудника) = Неопределено Тогда 
			// сотрудника не нашли, но разрешено создавать новых сотрудников
			стзРезультаты = ТЗРезультаты.Добавить();
			стзРезультаты.строкаТЗМУ = СтрокаТ;
			стзРезультаты.Сотрудник = Неопределено; //vd_181019 стзРезультаты.Пользователь = Неопределено; // признак, что требуется создать нового сотрудника, наименование сотрудника - в поле строкаТЗМУ.ЛК_Employee
			мИменаСоздаваемыхСотрудников.Добавить(ИскатьНаименованиеСотрудника); // добавляем преобразованное значение наименования чтобы избежать дублирования имен сотрудников
		КонецЕсли; 
		
	КонецЦикла;
	
	// Заполнили промежуточную таблицу ТЗРезультаты - в ней связи "Строка ТЗ МобильныеУстройства" <-> Сотрудник
	
	мСотрудникиНеВАгентах 		= Новый Массив; // массив структур для возврата списка сотрудников, которых нужно добавить в агентов	//vd_181022 переименована было: мПользователиНеВАгентах
	мОтсутствующиеСотрудники 	= Новый Массив; // массив структур для возврата списка сотрудников, которых нужно создать в справочнике сотрудники, а затем добавить в агентов  //vd_181022 переименована было: мОтсутствующиеПользователи
	мПроставленныеАгенты		= Новый Массив; // массив структур для возврата списка агентов (сотрудников), которых проставили в справочнике МУ
	
	Если ТЗРезультаты.Количество() <> 0 Тогда // нашлись сотрудники, нужно проверить, являются ли они агентами
		
		тзАгенты = Объект.НастройкиАгентов;
		стррПоиск 				= Новый Структура("Сотрудник"); //vd_181019 //стррПоиск = Новый Структура("Пользователь");
		СчетчикНовыхАгентов 	= 0;
		ИзмененыСотрудники 		= Ложь; // признак - изменились ли сотрудники у МУ? ;vd_181022 ИзмененыПользователи 	= Ложь; // признак - изменились ли пользователи у МУ?
		
		Для Каждого стзРезультаты Из ТЗРезультаты Цикл
			
			строкаТЗМУ = стзРезультаты.строкаТЗМУ;
			
			//vd_181019 Если ЗначениеЗаполнено(стзРезультаты.Пользователь) Тогда
			Если ЗначениеЗаполнено(стзРезультаты.Сотрудник) Тогда
				
				стррПоиск.Сотрудник = стзРезультаты.Сотрудник; 																						//vd_181019 стррПоиск.Пользователь = стзРезультаты.Пользователь;
				мСтроки = тзАгенты.НайтиСтроки(стррПоиск);
				Если мСтроки.Количество() <> 0 Тогда 																								// пользователь найден в виртуальном справочнике "Объект.НастройкиАгентов", т.е. является агентом
					строкаТЗМУ.Сотрудник = стзРезультаты.Сотрудник; 																				//vd_181019 //строкаТЗМУ.Пользователь = стзРезультаты.Пользователь; // проставляем пользователя МУ (агента)
					строкаТЗМУ.ЛКИзмененныеРеквизиты = строкаТЗМУ.ЛКИзмененныеРеквизиты + ",Сотрудник"; 											//!!!vd_181019 //строкаТЗМУ.ЛКИзмененныеРеквизиты = строкаТЗМУ.ЛКИзмененныеРеквизиты + ",Пользователь"; // признак, что у МУ изменен пользователь
					Если строкаТЗМУ.СтатусНастроек <> 4 Тогда
						строкаТЗМУ.СтатусНастроек = 5; 																								// статус - МУ обновлено
					КонецЕсли;
					мПроставленныеАгенты.Добавить(Новый Структура("СсылкаМУ,Сотрудник", строкаТЗМУ.ID, стзРезультаты.Сотрудник)); 					//!!!vd_181019 мПроставленныеАгенты.Добавить(Новый Структура("СсылкаМУ,Пользователь", строкаТЗМУ.ID, стзРезультаты.Пользователь));
					Текст = НСтр("ru='Для МУ ""%1"" (идентификатор: %2) автоматически сопоставлен агент ""%3"".';uk='Для МП ""%1"" (ідентифікатор:%2) автоматично зіставлений агент ""%3"".'");
					Текст = СтрШаблон_(Текст, строкаТЗМУ.Наименование, строкаТЗМУ.ИдентификаторМУ, строкаТЗМУ.Сотрудник); 							//vd_181019 Текст = СтрШаблон_(Текст, строкаТЗМУ.Наименование, строкаТЗМУ.ИдентификаторМУ, строкаТЗМУ.Пользователь);
					ЛКСообщить(мСообщения, Текст);
					ИзмененыСотрудники = Истина;
				Иначе // сотрудника нужно перенести в агенты (значение сотрудника - стзРезультаты.Сотрудник
					СчетчикНовыхАгентов = СчетчикНовыхАгентов + 1;
					мСотрудникиНеВАгентах.Добавить(Новый Структура("СсылкаМУ,Сотрудник", строкаТЗМУ.ID, стзРезультаты.Сотрудник)); 				//vd_181019 мПользователиНеВАгентах.Добавить(Новый Структура("СсылкаМУ,Пользователь", строкаТЗМУ.ID, стзРезультаты.Пользователь));
					Текст = НСтр("ru='%1. Для МУ ""%2"" (идентификатор: %3) найден сотрудник ""%4"", который отсутствовал среди агентов.';uk='%1. Для МП ""%2"" (ідентифікатор: %3) знайдений співробітник ""%4"", який був відсутній серед агентів.'"); 		//vd_181019 Текст = НСтр("ru='%1. Для МУ ""%2"" (идентификатор: %3) найден пользователь ""%4"", который отсутствовал среди агентов.';uk='%1. Для МП ""%2"" (ідентифікатор:%3) знайдений користувач ""%4"", який був відсутній серед агентів.'");
					Текст = СтрШаблон_(Текст, СчетчикНовыхАгентов, строкаТЗМУ.Наименование, строкаТЗМУ.ИдентификаторМУ, стзРезультаты.Сотрудник);//vd_181019 Текст = СтрШаблон_(Текст, СчетчикНовыхАгентов, строкаТЗМУ.Наименование, строкаТЗМУ.ИдентификаторМУ, стзРезультаты.Пользователь);
					ЛКСообщить(мСообщения, Текст);
					стррРезультат.КодРезультата = "СотрудникНеАгент"; //vd_181022 стррРезультат.КодРезультата = "ПользовательНеАгент";
				КонецЕсли; 
				
			Иначе // Значение стзРезультаты.Сотрудник пустое, т.к. выполнено условие СоздаватьНовыхПользователей = Истина.
				  // Сотрудника нет в справочнике сотрудников, его нужно добавить. Наименование сотрудника - в строкаТЗМУ.ЛК_Employee.
				СчетчикНовыхАгентов = СчетчикНовыхАгентов + 1;
				мОтсутствующиеСотрудники.Добавить(Новый Структура("СсылкаМУ,ИмяСотрудника", строкаТЗМУ.ID, строкаТЗМУ.ЛК_Employee));			//!!!vd_181019 мОтсутствующиеПользователи.Добавить(Новый Структура("СсылкаМУ,ИмяПользователя", строкаТЗМУ.ID, строкаТЗМУ.ЛК_Employee));
				Текст = НСтр("ru='%1. Для МУ ""%2"" (идентификатор: %3) будет создан новый сотрудник ""%4"".';uk='%1. Для МП ""%2"" (ідентифікатор: %3) буде створений новий співробітник ""%4"".'");							//vd_181019 Текст = НСтр("ru='%1. Для МУ ""%2"" (идентификатор: %3) будет создан новый пользователь ""%4"".';uk='%1. Для МП ""%2"" (ідентифікатор:%3) буде створений новий користувач ""%4"".'");				
				Текст = СтрШаблон_(Текст, СчетчикНовыхАгентов, строкаТЗМУ.Наименование, строкаТЗМУ.ИдентификаторМУ, строкаТЗМУ.ЛК_Employee);
				ЛКСообщить(мСообщения, Текст);
				стррРезультат.КодРезультата = "СотрудникНеАгент"; //vd_181022 стррРезультат.КодРезультата = "ПользовательНеАгент";
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ИзмененыСотрудники Тогда
			СтррКонтекст.ИзмененыСотрудники = Истина;	//vd_181022 СтррКонтекст.ИзмененыПользователи = Истина;// признак будет использован при записи ТЗ МобильныеУстройства в хранилище
		КонецЕсли; 
		
	Иначе // не удалось сопоставить ни одного сотрудника
		
		СтррРезультат.КодРезультата = "НетСопоставленныхСотрудников";
		
	КонецЕсли; 
	
	//vd_181022
	//СтррРезультат.ПользователиНеВАгентах	= мСотрудникиНеВАгентах;	
	//СтррРезультат.ОтсутствующиеПользователи	= мОтсутствующиеСотрудники;
	//СтррРезультат.ПроставленныеАгенты 		= мПроставленныеАгенты;
	СтррРезультат.СотрудникиНеВАгентах		= мСотрудникиНеВАгентах;	
	СтррРезультат.ОтсутствующиеСотрудники	= мОтсутствующиеСотрудники;
	СтррРезультат.ПроставленныеАгенты 		= мПроставленныеАгенты;
	
	Возврат СтррРезультат;	

КонецФункции

//vd_181022 Переименован параметр из стррСвязиМУиПользователей в стррСвязиМУиСотрудников
// Процедура проставляет для МУ новых агентов, созданных в результате внешнего вызова процедуры ВнешнийВызовСоздатьАгентов()
// из модуля формы НастройкиАгентов.
// 
// Параметры:
// 		СвязиМУиСотрудников - Структура - структура со свойствами:
//			* СотрудникиНеВАгентах 	  - Массив - массив структур ("СсылкаМУ,Сотрудник")     - пользователи, которых нет среди агентов, но проставленные для МУ.
//			* ОтсутствующиеСотрудники - Массив - массив структур ("СсылкаМУ,ИмяСотрудника") - имена сотрудников, которых нужно добавить в справочник "Сотрудники".
//
&НаКлиенте
Процедура ЛКПроставитьНовыхАгентов(стррСвязиМУиСотрудников)
	
	// Массивы ПользователиНеВАгентах и ОтсутствующиеПользователи были ранее заполнены в функции ЛКЗаполнитьАгентов().
	// 
	// Массив ПользователиНеВАгентах заполнялся по такой команде:
	// мПользователиНеВАгентах.Добавить(Новый Структура("СсылкаМУ,Пользователь", строкаТЗМУ.ID, стзРезультаты.Пользователь));	
	// 
	// Массив ОтсутствующиеПользователи заполнялся по такой команде:
	// мОтсутствующиеПользователи.Добавить(Новый Структура("СсылкаМУ,ИмяПользователя", строкаТЗМУ.ID, строкаТЗМУ.ЛК_Employee));
	// После этого вызовом процедуры НастройкиАгентов.ВнешнийВызовСоздатьАгентов добавлено и проинициализировано свойство Пользователь.
	// 
	ВосстановитьНастройкиСервер("НастройкиАгентов"); // нужно заново прочитать список агентов из хранилища
	
	//vd_181022
	//ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.ОтсутствующиеПользователи);
	//ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.ПользователиНеВАгентах);
	//ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.ПроставленныеАгенты);
	ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.ОтсутствующиеСотрудники);
	ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.СотрудникиНеВАгентах);
	ЛКПроставитьАгентовДляМУ(стррСвязиМУиСотрудников.ПроставленныеАгенты);
	
	СтррКонтекст.ИзмененыСотрудники = Истина; //vd_181022 СтррКонтекст.ИзмененыПользователи
	
КонецПроцедуры

//vd_181022 Переименован параметр из стррСвязиМУиПользователей в стррСвязиМУиСотрудников
// Вспомогательная процедура для процедуры ЛКПроставитьНовыхАгентов().
&НаКлиенте
Процедура ЛКПроставитьАгентовДляМУ(мСвязиМУиСотрудников)

	тзМУ = Объект.МобильныеУстройства;
	стррПоиск = Новый Структура("ID");
	
	Для каждого стррЭлемент Из мСвязиМУиСотрудников Цикл
		стррПоиск.ID = стррЭлемент.СсылкаМУ;
		мСтроки = тзМУ.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() <> 0 Тогда
			строкаТЗМУ = мСтроки[0];
			
			//{{vd_181022 
			//строкаТЗМУ.Пользователь = стррЭлемент.Пользователь;
			//Если Найти(строкаТЗМУ.ЛКИзмененныеРеквизиты + ",", ",Пользователь,") = 0  Тогда
			//	строкаТЗМУ.ЛКИзмененныеРеквизиты = строкаТЗМУ.ЛКИзмененныеРеквизиты + ",Пользователь"; // признак, что у МУ изменен пользователь
			//КонецЕсли;
			строкаТЗМУ.Сотрудник = стррЭлемент.Сотрудник;
			Если Найти(строкаТЗМУ.ЛКИзмененныеРеквизиты + ",", ",Сотрудник,") = 0  Тогда
				строкаТЗМУ.ЛКИзмененныеРеквизиты = строкаТЗМУ.ЛКИзмененныеРеквизиты + ",Сотрудник"; // признак, что у МУ изменен сотрудник
			КонецЕсли;
			//}}vd_181022
			
			Если строкаТЗМУ.СтатусНастроек <> 4 Тогда
				строкаТЗМУ.СтатусНастроек = 5; // статус - МУ обновлено
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из модуля БыстраяНастройка.
&НаКлиенте
Процедура ВнешнийВызовЛКЗагрузитьМУ() Экспорт
	
	ЛКЗагрузитьМобильныеУстройства(Истина); // результат вернется через оповещение "АПЛКОповещение" с источником "БыстраяНастройка"
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ЛК
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти