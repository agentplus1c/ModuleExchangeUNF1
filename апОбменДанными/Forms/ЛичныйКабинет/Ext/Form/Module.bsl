
#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Отладка");
	
	СтррКонтекст.Отладка = Неопределено; //"МУ"; // параметр отладки, возможные значения: 
	    // - Неопределено - отладка выключена,
		// - "КО" - эмуляция получения каналов обмена, 
		// - "МУ" - эмуляция получения списка МУ.
	
	стррАдресаЛК = Новый Структура;
	стррАдресаЛК.Вставить("url0", "agentplus.online"); // адрес ЛК - "agentplus.online", "apweb:80".
	стррАдресаЛК.Вставить("url1", "agentplus.online"); // адрес сервиса чеков "apweb:80" "cp.agentplus.online"   
	СтррОперацииЛК = ПолучитьОперацииЛК(стррАдресаЛК); // структуру со всеми операциями API для работы с ЛК
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	ЛКЗапомнитьЛогинИПароль = Истина;
	
	ВосстановитьНастройкиСервер();
	
	Если ПустаяСтрока(Объект.ЛКЛогин) Тогда // логин еще не указывался, по умолчанию рекомендуем запоминать логин
		Объект.ЛКЗапомнитьЛогинИПароль = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	УстановитьМодифицированостьФормы(Ложь);
	
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Ложь;
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	
	ПодключитьОбработчикОжидания("ЛКПроверитьЗавершениеОперации", 1, Истина); // проверяем - есть ли незавершенные операции с ЛК от предыдущего сеанса?
	
	Если СтррКонтекст.Отладка <> Неопределено Тогда
		Сообщить(НСтр("ru='Внимание!!! Включен режим отладки: ';uk='Увага!!! Включений режим налагодження:'") + СтррКонтекст.Отладка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		Если Параметр = "*" Или Найти(","+Параметр+",", ",ЛичныйКабинет,") <> 0 Тогда
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	СохранитьНастройкиКлиент();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_КомандыЛК

&НаКлиенте
Процедура КомандаЛКВойтиЧерезБраузер(Команда)
	
	ЗапуститьПриложение("http://agentplus.online/");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПроверитьПодключение(Команда)
	
	Если ЛКПроверитьЛогинИПароль() Тогда	
		стррJSON = ЛКОперацияВыполнить("УСРегистрацияТест",, Ложь);
		Если стррJSON <> Неопределено Тогда
			Текст = СтрШаблон_(НСтр("ru='Код ответа %1.';uk='Код відповіді %1.'"), стррJSON.КодСостояния) + " ";
			Если стррJSON.КодСостояния = 400 Тогда
				Если стррJSON.Свойство("ErrorCode") Тогда
					Если стррJSON.ErrorCode = 1 Тогда // ошибка "User with this login and password is not found!"
						Текст = Текст + НСтр("ru='Неверный логин или пароль.';uk='Невірний логін або пароль.'");
					Иначе // любой адекватный ответ со свойством ErrorCode считаем прошедшим проверку на логин и пароль
						Текст = НСтр("ru='Подключение установлено успешно.';uk='Підключення встановлено успішно.'");
					КонецЕсли; 
				Иначе
					Текст =	ЛКОписаниеОшибки(НСтр("ru='Ошибка подключения.';uk='Помилка підключення.'"), стррJSON.КодСостояния, стррJSON);
				КонецЕсли; 
			ИначеЕсли стррJSON.КодСостояния = 0 Тогда
				Текст = Текст + НСтр("ru='Ошибка подключения к Интернет или некорректный адрес.';uk='Помилка підключення до Інтернет або некоректний адресу.'");
			Иначе
				Текст = ЛКОписаниеОшибки(НСтр("ru='Ошибка подключения.';uk='Помилка підключення.'"), стррJSON.КодСостояния, стррJSON);
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКЗарегистрироватьУС(Команда)
	
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ПустаяСтрока(Объект.ЛКНазваниеУС) Тогда
		Текст = НСтр("ru='Укажите название учетной системы для регистрации в ""Личном кабинете"". Например, ""Основная"".';uk='Вкажіть назву облікової системи для реєстрації в ""Особистому кабінеті"". Наприклад, ""Основна"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ЛКНазваниеУС");
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСРегистрация");
		ПоказатьВопрос(Оповещение, НСтр("ru='Настройки были изменены. Сохранить изменения?';uk='Налаштування були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСРегистрация");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКОбновитьСведенияУС(Команда)
	
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСОбновитьСведения");
		ПоказатьВопрос(Оповещение, НСтр("ru='Настройки были изменены. Сохранить изменения?';uk='Налаштування були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСОбновитьСведения");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКОтменитьРегистрациюУС(Команда)

	Текст = НСтр("ru='Отменить регистрацию учетной системы в ""Личном кабинете""?"
"После отмены станут недоступны некоторые сервисы ""Личного кабинета"" (автоматическое получение обновлений,"
"обмен данными с использованием функционала ""Личного кабинета""). Продолжить?';uk='Скасувати реєстрацію облікової системи в ""Особистому кабінеті""?"
"Після скасування стануть недоступні деякі сервіси ""Особистого кабінету"" (автоматичне отримання оновлень,"
"обмін даними з використанням функціоналу ""Особистого кабінету""). Продовжити?'");
	Текст = СтрЗаменить(Текст, Символы.ПС, " "); 
	Оповещение = Новый ОписаниеОповещения("КомандаЛКОтменитьРегистрациюУСПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКОтменитьРегистрациюУСПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСУдалить");
		ПоказатьВопрос(Оповещение, НСтр("ru='Настройки были изменены. Сохранить изменения?';uk='Налаштування були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСУдалить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьРегистрациюУС(Команда)
	Текст = НСтр("ru='Очистить сведения о регистрации учетной системы? Операция выполнится без обращения к ""Личному кабинету"". "
"Не рекомендуется ее применять, если в ЛК сохранились сведения о регистрации текущей учетной системы."
"Продолжить?';uk='Очистити відомості про реєстрацію облікової системи? Операція виконається без звернення до ""Особистого кабінету""."
"Не рекомендується її застосовувати, якщо в ОК збереглися відомості про реєстрацію поточної облікової системи."
"Продовжити?'");
	Текст = СтрЗаменить(Текст, Символы.ПС, " "); 
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьРегистрациюУСПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьРегистрациюУСПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ЛКИдентификаторУС = "";
		Объект.ЛКТокенУС 		 = "";
		УстановитьМодифицированостьФормы(Истина);
		ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКНетДоступа(Команда)
	
	МодульК().КомандаВыполнить("ПоказатьЛичныйКабинетЗаявка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛКНетДоступаПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Сообщить("Сейчас будет");
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКЧтоТакоеЛК(Команда)
	
	Текст = НСтр("ru='Показать описание ""Личного кабинета""? Будет открыта страница в веб-браузере.';uk='Показати опис ""Особистого кабінету""? Буде відкрита сторінка в веб-браузері.'");
	Оповещение = Новый ОписаниеОповещения("ЧтоТакоеЛКПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоТакоеЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение("http://www.agentplus.ru/cp/");	
	КонецЕсли;
	
КонецПроцедуры

//  ОбработчикиКомандФормы_КомандыЛК
#КонецОбласти

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
	ПоляУдаленияПробелов = "ЛКЛогин,ЛКНазваниеУС,ЛКТокенУС";
	
	Имя = Элемент.Имя;	
	Если 0 <> Найти(","+ПоляУдаленияПробелов+",", ","+Имя+",") Тогда
		Объект[Имя] = СокрЛП(Объект[Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛКРегистрацияУСПриИзменении(Элемент)
	
	Если ФлагЛКРегистрацияУС И ПустаяСтрока(Объект.ЛКНазваниеУС) Тогда
		Объект.ЛКНазваниеУС = "Основная";
	КонецЕсли;
	
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Если Не Объект.ЛКЗапомнитьЛогинИПароль Тогда // от предыдущей версии мог остаться логин и пароль в БД
		Объект.ЛКЛогин  = "";
		Объект.ЛКПароль = "";
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ТекОбъект)

	СтрРеквизиты = "ЛКПодтверждение,"; // добавили реквизит обработки, отсутствующий на форме
	
	Для Каждого ЭлементМетаданных Из ТекОбъект.Метаданные().Реквизиты Цикл
		Если ЭтаФорма.Элементы.Найти(ЭлементМетаданных.Имя) <> Неопределено Тогда
			СтрРеквизиты = СтрРеквизиты + ЭлементМетаданных.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);

КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиКлиент()
	
	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиСервер();
	Оповестить("АПЛКИзменение", Неопределено);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если Не Объект.ЛКЗапомнитьЛогинИПароль Тогда // сохраняем в хранилище пустые логин и пароль
		ТекОбъект.ЛКЛогин  = "";
		ТекОбъект.ЛКПароль = "";
	КонецЕсли; 
	ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЗначениеНастройки(ИмяНастройки)
	
	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьЗначениеНастройки(ИмяНастройки);
	
КонецФункции 

&НаСервере
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение)
	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки(ИмяНастройки, Значение);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиКлиент();
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЛогинИлиПарольЛКПродолжить(РезультатОтвета, мПараметры) Экспорт
	
	Оповестить("АППрерватьБыструюНастройку", Неопределено);	
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СообщитьОбУказанииРеквизитов(мПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбУказанииРеквизитов(мПараметры) Экспорт
	
	Если Не ЭтаФорма.Открыта() Тогда
		ЭтаФорма.Открыть();
	Иначе
		ЭтаФорма.Активизировать();
	КонецЕсли; 

	ОчиститьСообщения();
	Для Каждого стррПараметр Из мПараметры  Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррПараметр.Описание,, "Объект." + СтррПараметр.Реквизит);	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПередДействием(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиКлиент();
		ЛКНачалоПодключения(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ЛКПроверитьЛогинИПароль()
	
	Если ПустаяСтрока(Объект.ЛКЛогин) Или ПустаяСтрока(Объект.ЛКПароль) Тогда

		Если ПустаяСтрока(Объект.ЛКЛогин) И ПустаяСтрока(Объект.ЛКПароль) Тогда
			Текст = НСтр("ru='Не заполнены логин и пароль для доступа в ""Личный кабинет"". Хотите указать логин?';uk='Не заповнені логін і пароль для доступу в ""Особистий кабінет"". Хочете вказати логін?'");
		ИначеЕсли ПустаяСтрока(Объект.ЛКЛогин) Тогда
			Текст = НСтр("ru='Не заполнен логин для доступа в ""Личный кабинет"". Хотите указать логин?';uk='Не заповнений логін для доступу в ""Особистий кабінет"". Хочете вказати логін?'");
		Иначе
			Текст = НСтр("ru='Не заполнен пароль для доступа в ""Личный кабинет"". Хотите указать пароль?';uk='Не заповнений пароль для доступу в ""Особистий кабінет"". Хочете вказати пароль?'");
		КонецЕсли;
		
		мПараметры = Новый Массив;		
		Если ПустаяСтрока(Объект.ЛКЛогин) Тогда
			мПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Заполните логин для доступа в ""Личный кабинет"".';uk='Заповніть логін для доступу в ""Особистий кабінет"".'"), "ЛКЛогин"));
		КонецЕсли; 
		Если ПустаяСтрока(Объект.ЛКПароль) Тогда
			мПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Заполните пароль для доступа в ""Личный кабинет"".';uk='Заповніть пароль для доступу в ""Особистий кабінет"".'"), "ЛКПароль"));
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения("УказатьЛогинИлиПарольЛКПродолжить", ЭтотОбъект, мПараметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если ЭтаФорма.Открыта() И ЭтаФорма.ВводДоступен() Тогда
			КомандаЛКВойтиЧерезБраузер(Неопределено);
		Иначе
			Открыть();
		КонецЕсли; 
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда // передана строка-подсказка, ее нужно вывести в сообщении
			Сообщить(ДополнительныеПараметры);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноФормыЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Открыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОписаниеКонфигурации1С

&НаСервере
Функция ПолучитьПоколениеВерсииКонфигурации1С() 
	
	мНомераВерсии = СтрРазделить_(Метаданные.Версия, ".");
	ВсегоПодВерсий = Мин(мНомераВерсии.Количество(), 2);
	
	Для Поз = 0 По ВсегоПодВерсий - 1 Цикл
		Номер = СокрЛП(мНомераВерсии[Поз]);
		мНомераВерсии[Поз] = ?(Номер = "", "0", Номер);
	КонецЦикла;
	
	Если ВсегоПодВерсий > 1 Тогда
		Результат = СокрЛП(мНомераВерсии[0]) + "." + СокрЛП(мНомераВерсии[1]);
	ИначеЕсли ВсегоПодВерсий = 1 Тогда
		Результат = СокрЛП(мНомераВерсии[0]) + ".0";
	Иначе
		Результат = "0.0";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура дополняет структуру описанием конфигурации 1С.
//	
//	Параметры:	
//		Структура - Структура - структура для вставки описания конфигурации 1С.
//	
&НаСервере
Функция ПолучитьОписаниеКонфигурации1С(Структура = Неопределено)

	Если Структура = Неопределено Тогда
		Структура = Новый Структура;
	КонецЕсли; 
	
	Структура.Вставить("ProductName", 		Метаданные.Имя);
	Структура.Вставить("ProductAlias", 		Метаданные.Синоним);
	Структура.Вставить("ProductGeneration",	ПолучитьПоколениеВерсииКонфигурации1С());
	Структура.Вставить("ProductVersion",  	Метаданные.Версия); 
	Структура.Вставить("Compatibility", 	Строка(Метаданные.РежимСовместимости));
	Структура.Вставить("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
	Структура.Вставить("IsProductModified",	Ложь);
	
	Возврат Структура;

КонецФункции

&НаСервере
Функция ПолучитьНазваниеУС()
	
	Если Не ПустаяСтрока(Метаданные.Синоним) Тогда
		Результат = Метаданные.Синоним;
	Иначе
		Результат = Метаданные.Имя;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОписаниеКонфигурации1СОтличаетсяОтЛК(СтррОписаниеИзЛК)

	СтррОписание1С = ПолучитьОписаниеКонфигурации1С();
	
	ЕстьОтличия = Ложь;
	Для каждого Элемент Из СтррОписание1С Цикл
		ЗначениеВЛК = СтррОписаниеИзЛК[Элемент.Ключ];
		Если Элемент.Значение <> ЗначениеВЛК Тогда
			Если Не ЕстьОтличия Тогда
				ЕстьОтличия = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Отличаются свойства конфигурации:';uk='Відрізняються властивості конфігурації:'"));
			КонецЕсли;
			Текст = СтрШаблон_(НСтр("ru='Свойство ""%1"". Текущее значение: ""%2"". Значение в ЛК: ""%3"".';uk='Властивість ""%1"". Поточне значення: ""%2"". Значення в ОК: ""%3"".'"),
						Элемент.Ключ, Элемент.Значение, ЗначениеВЛК);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ЕстьОтличия;
	          
КонецФункции

// СлужебныеПроцедурыИФункции_ОписаниеКонфигурации1С
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РегистрацияУС

&НаКлиенте
Процедура ЛКРегистрацияУчетнойСистемыОбновитьФорму()
	
	Если Не ПустаяСтрока(Объект.ЛКИдентификаторУС) Тогда
		ФлагЛКРегистрацияУС = Истина;
		ЗаголовокГруппы = НСтр("ru='Сведения о регистрации учетной системы';uk='Відомості про реєстрацію облікової системи'");
	Иначе
		ЗаголовокГруппы = НСтр("ru='Сведения для регистрации учетной системы';uk='Відомості для реєстрації облікової системи'")
	КонецЕсли;
	
	Элементы.ГруппаЛКДействияРегистрация.Видимость = ФлагЛКРегистрацияУС;
	Элементы.ДекорацияЛКРегистрацияУчетнойСистемы.Видимость = Не ФлагЛКРегистрацияУС;
	
	ВидимостьКнопкиРегистрацииУС = ПустаяСтрока(Объект.ЛКИдентификаторУС);
	
	Элементы.ЛКРегистрацияУС.Видимость 			= ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКЗарегистрировать.Видимость 		= ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКОтменитьРегистрациюУС.Видимость 	= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКОбновитьСведенияУС.Видимость 	= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКНазваниеУС.ТолькоПросмотр  		= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.СброситьРегистрациюУС.Видимость	= Не ВидимостьКнопкиРегистрацииУС;
	
	Элементы.ЛКИдентификаторУС.Видимость 		= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКТокенУС.Видимость 				= Не ВидимостьКнопкиРегистрацииУС;
	
	Элементы.ГруппаЛКРегистрация.Заголовок = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте 
Функция ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка)
	
	Если ПустаяСтрока(Объект.ЛКИдентификаторУС) Тогда
		Если БыстраяНастройка Тогда // автономно регистриуем УС в ЛК
			Возврат ЛКБыстраяРегистрацияУчетнойСистемы();
		Иначе
			Текст = НСтр("ru='Не зарегистрирована учетная система в ""Личном кабинете"". Перейти в ""Личный кабинет"" для регистрации учетной системы?';uk='Не зареєстрована облікова система в ""Особистому кабінеті"". Перейти в ""Особистий кабінет"" для реєстрації облікової системи?'");
			Оповещение = Новый ОписаниеОповещения("ОткрытьОкноФормыЛКПродолжить", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте 
Функция ЛКБыстраяРегистрацияУчетнойСистемы()
	
	Концовка = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");
	Объект.ЛКНазваниеУС = ПолучитьНазваниеУС() + " (" + Концовка + ")";
	Объект.ЛКЗапомнитьЛогинИПароль = Истина;
	ОперацияУСРегистрация();
	Возврат Не ПустаяСтрока(Объект.ЛКИдентификаторУС);
	
КонецФункции

// СлужебныеПроцедурыИФункции_РегистрацияУС
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_ОбщиеПроцедурыОпераций

&НаКлиенте 
Процедура ЛКНачалоПодключения(Операция)

	ОчиститьСообщения();
	стррОперация = СтррОперацииЛК[Операция];
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru='Соединение с %1 ...';uk=""З'єднання з %1 ..."""), стррОперация.url));
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Истина;
	ПодключитьОбработчикОжидания("Операция" + Операция, 1, Истина);

КонецПроцедуры

// Функция возвращает структуру со списком всех операций API ЛК.
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОперацииЛК(стррАдресаЛК)
	
	мОперации = Новый Массив;
	
	// В опциях указываются параметры передаваемого запроса в ЛК или признаки обработки его результатов:
	// - СвойстваКонфигурации - передавать сведения о конфигурации 1С.
	// - Авторизация		  - требуется авторизация в ЛК.
	// - БезПодтверждения	  - запрос не требует подтверждения.
	// - Get	  			  - get-запрос (если не указан, то put-запрос).
	
	//					Операция - 0		url - 1	path - 2							Опции - 3							Представление операции - 4
	мОперации.Добавить("УСРегистрация;		url0;	api/erpsystem/actions/register;		СвойстваКонфигурации;				Регистрация УС в ЛК");
	мОперации.Добавить("УСРегистрацияТест;	url0;	api/erpsystem/actions/register;		БезПодтверждения; 					Проверка логина и пароля");
	мОперации.Добавить("УСОбновитьСведения;	url0;	api/erpsystem/actions/update;		СвойстваКонфигурации,Авторизация; 	Обновить сведения об УС в ЛК");
	мОперации.Добавить("УСУдалить;			url0;	api/erpsystem/actions/delete;		Авторизация;						Удалить сведения об УС из ЛК");
	мОперации.Добавить("УСПолучитьСведения;	url0;	api/erpsystem;						Авторизация,БезПодтверждения;		Получить сведения об УС из ЛК");
	мОперации.Добавить("КОПолучитьСписок;	url1;	api/my/settings/exchange/channels;	Авторизация,БезПодтверждения,Get;	Получить список каналов обмена из ЛК");
	мОперации.Добавить("МУПолучитьСписок;	url1;	api/my/devices;						Авторизация,БезПодтверждения,Get;	Получить список мобильных устройств из ЛК");
	
	СтррОперации = Новый Структура;
	
	Для каждого стрСписок Из мОперации Цикл
		мЗначения = СтрРазделить_(СтрСписок, ";",, Истина);
		СтррОперации.Вставить(мЗначения[0], Новый Структура("url,path,Опции,Представление", стррАдресаЛК[мЗначения[1]], мЗначения[2], мЗначения[3], мЗначения[4]));
	КонецЦикла; 
	
	Возврат СтррОперации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЛКОписаниеКодаСостояния(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Результат = НСтр("ru='Ошибок нет.';uk='Помилок немає.'"); 
	ИначеЕсли КодСостояния = 400 Тогда
		Результат = НСтр("ru='Неверный запрос.';uk='Невірний запит.'"); 
	ИначеЕсли КодСостояния = 401 Тогда
		Результат = НСтр("ru='Неавторизованный запрос.';uk='Неавторизований запит.'"); 
	ИначеЕсли КодСостояния = 404 Тогда
		Результат = НСтр("ru='Неверный адрес ресурса или команда не поддерживается.';uk='Неправильну адресу ресурсу або команда не підтримується.'"); 
	ИначеЕсли КодСостояния = 500 Тогда
		Результат = НСтр("ru='Внутренняя ошибка сервера.';uk='Внутрішня помилка сервера.'"); 
	ИначеЕсли КодСостояния = 503 Тогда
		Результат = НСтр("ru='Сервис недоступен.';uk='Сервіс недоступний.'"); 
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ЛКОписаниеОшибки(ЗаголовокОшибки, КодСостояния, стррJSON)
	
	Текст = СтрШаблон_(НСтр("ru='Код ответа %1.';uk='Код відповіді %1.'"), КодСостояния) + " "; 
	
	ОписаниеОтвета = "";
	Если стррJSON.Свойство("ErrorCode") Тогда
		ОписаниеОтвета = ОписаниеОтвета + "(" + Строка(стррJSON.ErrorCode) + ") ";
	КонецЕсли; 
	Если стррJSON.Свойство("Message") Тогда
		ОписаниеОтвета = ОписаниеОтвета + стррJSON.Message + " ";
	КонецЕсли;
	
	Если ОписаниеОтвета = "" Тогда
		ОписаниеОтвета = ЛКОписаниеКодаСостояния(КодСостояния);
	КонецЕсли; 
	
	Если ОписаниеОтвета <> "" Тогда
	    Текст = Текст + НСтр("ru='Описание: ';uk='Опис:'") + ОписаниеОтвета; 
	КонецЕсли; 
	
	Возврат ЗаголовокОшибки + " " + Текст;
	
КонецФункции

// Функция возвращает структуру JSON, полученную из HTTP-запроса или Неопределено, если произошла ошибка.
// Описание ошибки возвращается в параметре ТекстОшибки.
&НаКлиенте
Функция ЛКОтправитьЗапрос(СтррСвойства, ТекстОшибки)

	IsPutQuery = Не СтррСвойства.Свойство("Get");
	Если IsPutQuery Тогда // 
		ТелоЗапроса = ПреобразоватьJSONВСтроку(СтррСвойства.Параметры);
	КонецЕсли; // для Get-запроса тело запроса не используем

	Соединение = Новый HTTPСоединение(СтррСвойства.url);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтррСвойства.АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
	Если СтррСвойства.Свойство("Заголовки") И ТипЗнч(СтррСвойства.Заголовки) = Тип("Структура") Тогда
		Для каждого Элемент Из СтррСвойства.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Если IsPutQuery Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли; 
	
	ЗаголовокОшибки = ТекстОшибки;
	
	Попытка
		Если IsPutQuery Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			
			Если СтррКонтекст.Отладка = Неопределено Тогда
				HTTPОтвет = Соединение.Получить(HTTPЗапрос);
			Иначе
				HTTPОтвет = Новый Структура("КодСостояния", 200);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтррКонтекст.Отладка = Неопределено Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Иначе
			ТелоОтвета = НСтр("ru = 'Отладка!'; uk = 'Налагодження!'");
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ЗаголовокОшибки + " " + НСтр("ru='Ошибка работы с Интернет.';uk='Помилка роботи з Інтернет.'");
	КонецПопытки;

	стррJSON = Неопределено;
	
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Попытка
			стррJSON = ПреобразоватьСтрокуВJSON(ТелоОтвета);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли; 
	
	Если стррJSON = Неопределено Тогда
		стррJSON = Новый Структура;
	КонецЕсли; 
	
	стррJSON.Вставить("КодСостояния", 0); // 0 - внутренняя ошибка
	
	Если HTTPОтвет <> Неопределено Тогда
		Если HTTPОтвет.КодСостояния = 200 Тогда // успешный ответ от сервера	
			ТекстОшибки = "";
		Иначе
			ТекстОшибки = ЛКОписаниеОшибки(ЗаголовокОшибки, HTTPОтвет.КодСостояния, стррJSON);
		КонецЕсли;
		стррJSON.КодСостояния = HTTPОтвет.КодСостояния;
	КонецЕсли; 
	
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Ложь; // функция после ответа от ЛК скрывает элемент ожидания на форме
	
	Возврат стррJSON;

КонецФункции

// СлужебныеПроцедурыИФункции_ВебСервисЛК_ОбщиеПроцедурыОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_СтартОпераций

&НаКлиенте
Процедура ОперацияУСРегистрация()
	
	стррJSON = ЛКОперацияВыполнить("УСРегистрация");
	Если стррJSON.КодСостояния = 200 Тогда
		Объект.ЛКИдентификаторУС = стррJSON.Key;
		Объект.ЛКТокенУС 		 = стррJSON.Token;
		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
		ЛКОперацияВыполнить("complete*");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияУСОбновитьСведения()

	стррJSON = ЛКОперацияВыполнить("УСПолучитьСведения"); // сначала получаем сведения из ЛК, чтобы их сверить с текущими сведениями УС
	Если стррJSON.КодСостояния = 200 Тогда
		Если Не ОписаниеКонфигурации1СОтличаетсяОтЛК(стррJSON) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Описание конфигурации не отличается от описания в ЛК.';uk='Опис конфігурації не відрізняється від опису в ЛК.'"));
			Возврат;
		КонецЕсли; 		
	Иначе
		Возврат; // произошла ошибка
	КонецЕсли;
	
	стррJSON = ЛКОперацияВыполнить("УСОбновитьСведения");
	Если стррJSON.КодСостояния = 200 Тогда
		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
		ЛКОперацияВыполнить("complete*");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОперацияУСУдалить()

	стррJSON = ЛКОперацияВыполнить("УСУдалить");	
	Если стррJSON.КодСостояния = 200 Тогда
		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
		ЛКОперацияВыполнить("complete*");
	ИначеЕсли стррJSON.КодСостояния = 400 И стррJSON.ErrorCode = 4 Тогда // УС с заданным идентификатором (Key) в ЛК не найдена, просто очищаем данные об УС
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Ошибка 400 проигнорирована как некритичная...';uk='Помилка 400 проігнорована як некритична...'"));
		ЛКОперацияЗавершить("УСУдалить", Истина);
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВебСервисЛК_СтартОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_РаботаОпераций

// Функция генерирует и выполняет HTTP-запрос к ЛК в соответствии с операцией (в т.ч. и запросы подтверждения операции).
// В случае ошибки работы операции выводит сообщение с описанием причины ошибки.
// 
// Параметры:
// 		Операция - Строка - название операции. Является именем свойства структуры СтррОперацииЛК. 
//					Если указано значение "complete*", то это означает команду подтверждания предыдущей операции.
//					Свойства подтверждаемой операции берутся из атрибута Объект.ЛКПодтверждение (тип - Структура).
//
// Возвращаемое значение - структура ответа JSON с обязательным свойством КодСостояния, в котором 
//							возвращается HTTP-код состояния (200 - успешное заврешение).
//
&НаКлиенте
Функция ЛКОперацияВыполнить(Знач Операция, ПоказатьСостояние = Ложь, ВыводитьСообщения = Истина)
	
	Если Операция = "complete*" Тогда // подтверждение предыдущей операции
		Операция = Объект.ЛКПодтверждение.Операция;
	Иначе
		Объект.ЛКПодтверждение = Неопределено; 
	КонецЕсли;
	
	Если Не (СтррОперацииЛК.Свойство(Операция)) Тогда
	    ВызватьИсключение(НСтр("ru = 'Процедура ЛКОперацияВыполнить(), неизвестный параметр Операция = '; uk = 'Процедура ЛКОперацияВыполнить(), невідомий параметр Операция ='") + Операция);
	КонецЕсли; 
	
	РежимПодтверждения = Объект.ЛКПодтверждение <> Неопределено; // признак запроса "подтверждение операции"
	
	Если Операция = "УСРегистрация" Или Операция = "УСРегистрацияТест" Тогда
		СтрПараметры = "Name,Login,Password" + ?(РежимПодтверждения, ",Key,Token", "");
	Иначе
		СтрПараметры = "Key";
	КонецЕсли;
	
	стррОперация = СтррОперацииЛК[Операция];
	Если ПоказатьСостояние Тогда
		Состояние(СтрШаблон_(НСтр("ru='%1 - Выполняется операция ""%2""...';uk='%1 - Виконується операція ""%2""...'"), стррОперация.url, стррОперация.Представление));
	КонецЕсли; 
	
	СтррСвойства = ЛКСвойстваЗапроса(СтрПараметры + ?(РежимПодтверждения, ",Signature", ""), стррОперация.Опции);
	
	ТекстОшибки = СтрШаблон_(?(РежимПодтверждения, НСтр("ru='Ошибка подтверждения операции ""%1""!';uk='Помилка підтвердження операції ""%1""!'"), 
		НСтр("ru='Ошибка выполнения операции ""%1""!';uk='Помилка виконання операції ""%1""!'")), стррОперация.Представление);
		
	СтррСвойства.Вставить("АдресРесурса", стррОперация.path + ?(РежимПодтверждения, "/complete", "")); // формат адреса ресурса подтверждения: Операция + "/complete"
	СтррСвойства.Вставить("url", стррОперация.url);
	стррJSON = ЛКОтправитьЗапрос(СтррСвойства, ТекстОшибки);
	
	Если стррJSON.КодСостояния <> 200 Тогда	// произошла ошибка 
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		КонецЕсли; 
	ИначеЕсли стррJSON.Свойство("Signature") И Не РежимПодтверждения Тогда // ошибки нет и нужно запомнить информацию для дальнейшего подтверждения (подпись и операцию).
		Объект.ЛКПодтверждение = Новый Структура("Signature,Операция", стррJSON.Signature, Операция);
	КонецЕсли;

	Если РежимПодтверждения Тогда // нужно завершить или отменить операцию (если была ошибка)
		ЛКОперацияЗавершить(Операция, стррJSON.КодСостояния = 200);
	КонецЕсли;
	
	Возврат стррJSON;
	
КонецФункции

// Возвращает заполненную структуру для отправки HTTP-запроса.
//
// Параметры:
// 		СтрПараметры - Строка - список параметров запроса.
// 		СтрОпции - Строка - список опций для свойств запроса (через запятую), значения:
//			СвойстваКонфигурации - добавить в структуру свойства конфигурации 1С.
//			Авторизация 		 - заполнить заголовок авторизации.
//			Get 		 		 - get-запрос (если не указан, то put-запрос).
//
&НаКлиенте
Функция ЛКСвойстваЗапроса(СтрПараметры, СтрОпции)
	
	СтррРезультат = Новый Структура("Заголовки,Параметры,НужноПодтверждение");
	
	СтррПараметры = Новый Структура(СтрПараметры);
	Если 0 <> Найти(СтрОпции, "СвойстваКонфигурации") Тогда
		ПолучитьОписаниеКонфигурации1С(СтррПараметры); // дополняем структуру свойствами конфигурации
	КонецЕсли; 
	
	СтррИсточник  = Новый Структура("Name,Login,Password,Key,Token", 
		Объект.ЛКНазваниеУС, Объект.ЛКЛогин, Объект.ЛКПароль, Объект.ЛКИдентификаторУС, Объект.ЛКТокенУС);
		
	ЗаполнитьЗначенияСвойств(СтррПараметры, СтррИсточник);
	
	Если СтррПараметры.Свойство("Signature") Тогда
			СтррПараметры.Signature = Объект.ЛКПодтверждение.Signature;
	КонецЕсли; 
	
	СтррРезультат.Параметры = СтррПараметры;
	
	Если 0 <> Найти(СтрОпции, "Авторизация") Тогда
		СтррРезультат.Заголовки = Новый Структура;
		СтррРезультат.Заголовки.Вставить("Authorization", "token " + Объект.ЛКИдентификаторУС + ":" + Объект.ЛКТокенУС); 
	КонецЕсли; 
	
	Если 0 <> Найти(СтрОпции, "Get") Тогда
		СтррРезультат.Вставить("Get");
	КонецЕсли; 
	
	Возврат СтррРезультат;
		
КонецФункции

// Завершающие действия операции в учетной системе.
// Процедура удаляет признак незавершенного подтверждения из хранилища и завершает / отменяет операцию.
// В случае отмены транзакции выводит сообщение об отмене операции.
&НаКлиенте
Процедура ЛКОперацияЗавершить(Операция = Неопределено, ЗавершитьТранзакцию)
	
	Если Операция = Неопределено Тогда
		Если ТипЗнч(Объект.ЛКПодтверждение) = Тип("Структура") Тогда
			Операция = Объект.ЛКПодтверждение.Операция;
		Иначе
			ВызватьИсключение(НСтр("ru = 'Отсутствуют данные для подтверждения операции в атрибуте Объект.ЛКПодтверждение!'; uk = 'Відсутні дані для підтвердження операції в атрибуті Объект.ЛКПодтверждение!'"));			
		КонецЕсли;
	КонецЕсли; 
	
	Если Не СтррОперацииЛК.Свойство(Операция) Тогда
	    ВызватьИсключение(НСтр("ru = 'Неизвестный вид операции для завершения! Процедура ЛКОперацияЗавершить(), параметр Операция = '; uk = 'Невідомий вид операції для завершення! Процедура ЛКОперацияЗавершить(), параметр Операция ='") + Операция);
	КонецЕсли; 
	
	стррОперация = СтррОперацииЛК[Операция];	
	
	Если Операция = "УСРегистрация" Тогда
		Если Не ЗавершитьТранзакцию Тогда
			Объект.ЛКИдентификаторУС = "";
			Объект.ЛКТокенУС		 = "";
		КонецЕсли;
	ИначеЕсли Операция = "УСУдалить" Тогда
		Если ЗавершитьТранзакцию Тогда
			Объект.ЛКИдентификаторУС = "";
			Объект.ЛКТокенУС 		 = "";
		КонецЕсли;
	КонецЕсли; 
	
	Объект.ЛКПодтверждение = Неопределено;
	СохранитьНастройкиКлиент(); 
	
	Если ЗавершитьТранзакцию Тогда
		Текст = СтрШаблон_(НСтр("ru='Успешно завершена операция ""%1"".';uk='Успішно завершена операція ""%1"".'"), стррОперация.Представление);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);		
	КонецЕсли;
	
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();	
	
КонецПроцедуры

// Процедура проверяет завершение операции, если она не была завершена при предыдущем сеансе работы обработки.
&НаКлиенте
Процедура ЛКПроверитьЗавершениеОперации()
	
	Если Объект.ЛКПодтверждение = Неопределено Тогда // подтверждать нечего - незавершенной операции нет.
		Возврат;
	КонецЕсли; 
	
	Операция = Объект.ЛКПодтверждение.Операция;
	
	Если Не СтррОперацииЛК.Свойство(Операция) Тогда
	    ВызватьИсключение(НСтр("ru = 'Неизвестный вид операции для подтверждения! Объект.ЛКПодтверждение.Операция = '; uk = 'Невідомий вид операції для підтвердження! Объект.ЛКПодтверждение.Операция = '") + Операция);
	КонецЕсли; 
	
	стррОперация = СтррОперацииЛК[Операция];	
	
	Текст = СтрШаблон_(НСтр("ru='Не подтверждена операция ""%1"".';uk='Не підтверджена операція ""%1"".'"), стррОперация.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ЛКПроверитьЗавершениеОперацииПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст + " " + НСтр("ru='Подтвердить операцию?';uk='Підтвердити операцію?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Обработка ответа на вопрос "Подтвердить операцию?".
&НаКлиенте
Процедура ЛКПроверитьЗавершениеОперацииПродолжить(РезультатОтвета, ДополнительныйПараметр) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЛКОперацияВыполнить("complete*"); // отправляем запрос на завершение и выполняем завершение
	Иначе
		ЛКОперацияЗавершить(, Ложь); // отменяем действие операции
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВебСервисЛК_РаботаОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_JSON

&НаСервере
Функция ОтладкаПрочитатьЗначениеКаналовОбмена()
	Возврат ЗначениеИзФайла("D:\Bak\Channels.dat");
КонецФункции

// Перенос (чтение) данных из строки JSON в структуру.
&НаКлиенте
Функция ПреобразоватьСтрокуВJSON(Строка) Экспорт
	
	Если Строка = "Отладка!" Тогда
		Если СтррКонтекст.Отладка = "КО" Тогда // эмулируем возврат списка каналов обмена
			мКаналы = ОтладкаПрочитатьЗначениеКаналовОбмена();
			Возврат Новый Структура("JSON", мКаналы);
		ИначеЕсли СтррКонтекст.Отладка = "МУ" Тогда // эмулируем возврат списка МУ - помещаем в строку массив JSON
			Текст = Новый ЧтениеТекста("d:\Bak\DevicesJSON.txt", КодировкаТекста.UTF8);
			Строка = "";
			СтрокаТекста = Текст.ПрочитатьСтроку();
			Пока СтрокаТекста <> Неопределено Цикл // строки читаются до символа перевода строки
				Строка = Строка + СтрокаТекста;
			    СтрокаТекста = Текст.ПрочитатьСтроку();
			КонецЦикла;
		Иначе
			ВызватьИсключение(НСтр("ru='Включен неизвестный параметр отдалки: ';uk='Включений невідомий параметр отдалкі:'") + СтррКонтекст.Отладка);
		КонецЕсли; 
	КонецЕсли; 
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип("Структура") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура("JSON", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Преобразование данных из структуры JSON в строку JSON.
&НаКлиенте
Функция ПреобразоватьJSONВСтроку(СтррЗначения) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого Элемент Из СтррЗначения Цикл
		ЗаписьJSON.ЗаписатьИмяСвойства(Элемент.Ключ);
		ЗаписьJSON.ЗаписатьЗначение(Элемент.Значение);
	КонецЦикла; 
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// СлужебныеПроцедурыИФункции_JSON
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КаналыОбмена

&НаКлиенте 
Процедура КОПредложитьЗадатьКаналыОбменаВЛК()
	
	НазваниеУС = ПрочитатьЗначениеНастройки("ЛКНазваниеУС");
	Текст = СтрШаблон_(НСтр("ru='В ""Личном кабинете"" не создан канал обмена для учетной системы ""%1"".';uk='В ""Особистому кабінеті"" не створений канал обміну для облікової системи ""%1"".'"), НазваниеУС)
		+ Символы.ПС + НСтр("ru='Задайте в ""Личном кабинете"" канал обмена для этой учетной системы, или общий канал для всех учетных систем.';uk='Задайте в ""Особистому кабінеті"" канал обміну для цієї облікової системи, або загальний канал для всіх облікових систем.'")
		+ Символы.ПС + НСтр("ru='Перейти в окно настроек ""Личного кабинета""?';uk='Перейти у вікно налаштувань ""Особистого кабінету""?'");
	Оповещение = Новый ОписаниеОповещения("ПерейтиВЛКПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Процедура получает список каналов обмена данными из ЛК.
// 
// Параметры:
// 		БыстраяНастройка - Булево - Если значение Ложь, то результат возвращается через оповещение всех окон 
//									(т.е. подразумевается интерактивное участие пользователя).
// 									Если значение Истина, то результат возвращается ... 
// 									при этом канал обмена выбирается автоматически.
&НаКлиенте
Процедура КОПолучитьКаналыОбменаИзЛК(БыстраяНастройка)
	
	стррJSON = ЛКОперацияВыполнить("КОПолучитьСписок", Истина);
	ВыбранныйКанал = Неопределено;
	
	Если стррJSON.КодСостояния = 200 Тогда
		// проверяем указаны ли каналы обмена
		мКаналыОбмена = стррJSON.JSON;
		Если мКаналыОбмена.Количество() = 0 Тогда // предупреждаем что нет каналов и предлагаем перейти в ЛК
			Если БыстраяНастройка Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В ""Личном кабинете"" не задан канал обмена, автоматическая настройка обмена данными пропущена...';uk='В ""Особистому кабінеті"" не заданий канал обміну, автоматичне налаштування обміну даними пропущена...'"));
			Иначе
				КОПредложитьЗадатьКаналыОбменаВЛК();
			КонецЕсли; 
		ИначеЕсли мКаналыОбмена.Количество() = 1 Тогда
			ВыбранныйКанал = мКаналыОбмена[0];
		Иначе // каналов больше одного, нужно найти "канал по умолчанию", если такого нет, предложить выбрать канал из списка
			Для каждого Канал Из мКаналыОбмена Цикл
				Если Канал.IsDefault Тогда
					ВыбранныйКанал = Канал;
				    Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ВыбранныйКанал = Неопределено Тогда // нет канала "по умолчанию", нужно предложить пользователю выбрать канал из списка
				Если БыстраяНастройка Тогда // выбираем канал автоматически
					ВыбранныйКанал = мКаналыОбмена[0]; // просто выбираем первый канал из списка
				Иначе // нужно предложить пользователю выбрать канал из списка
					ЛКИдентификаторКО = НРег(Строка(ПрочитатьЗначениеНастройки("ЛКИдентификаторКаналаОбмена")));
					ВыделитьЭлемент = Неопределено;
					Список = Новый СписокЗначений;
					Для каждого Канал Из мКаналыОбмена Цикл
						Элемент = Список.Добавить(Канал.Id, Канал.Name + " (" + СокрЛП(Канал.ExchangeWay) + ")");
						Если НРег(Канал.Id) = ЛКИдентификаторКО Тогда
							ВыделитьЭлемент = Элемент;
						КонецЕсли; 
					КонецЦикла;
					Оповещение = Новый ОписаниеОповещения("КОВыборКаналаИзСпискаПродолжить", ЭтаФорма, мКаналыОбмена);
					Список.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выберите канал обмена данными';uk='Виберіть канал обміну даними'"), ВыделитьЭлемент);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыбранныйКанал <> Неопределено Тогда 
		КООповеститьОВыбранномКанале(ВыбранныйКанал, БыстраяНастройка);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура КОВыборКаналаИзСпискаПродолжить(ВыбранныйЭлемент, мКаналыОбмена) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ИдКанала = ВыбранныйЭлемент.Значение;
		ВыбранныйКанал = Неопределено;
		Для Каждого Канал Из мКаналыОбмена Цикл
			Если ИдКанала = Канал.Id Тогда
				ВыбранныйКанал = Канал;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		КООповеститьОВыбранномКанале(ВыбранныйКанал);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КООповеститьОВыбранномКанале(Канал, БыстраяНастройка = Ложь)
	
	ИдКанала = Новый УникальныйИдентификатор( ?(ЗначениеЗаполнено(Канал.Id), Канал.Id, "00000000-0000-0000-0000-000000000000") );
	СохранитьЗначениеНастройки("ЛКИдентификаторКаналаОбмена", ИдКанала);
	
	СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
	СтррРезультат.ВидДанных 	= "КаналыОбмена";
	СтррРезультат.ЕстьОшибки 	= Ложь;
	СтррРезультат.Результат 	= Канал;
	
	Источник = ?(БыстраяНастройка, "БыстраяНастройка", Неопределено);
	Оповестить("АПЛКОповещение", СтррРезультат, Источник);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_КаналыОбмена
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_МобильныеУстройства

&НаКлиенте
Процедура МУПолучитьМобильныеУстройстваИзЛК(БыстраяНастройка)
	
	стррJSON = ЛКОперацияВыполнить("МУПолучитьСписок", Истина);
	Если стррJSON.КодСостояния = 200 Тогда
		
		//vd_181019
		Если НЕ стррJSON.Свойство("JSON") Тогда  
			Сообщить(НСтр("ru = 'Не зарегистрирована УС в ""Личном кабинете"". Зарегистрируйте ее в обработке обмена.'; uk = 'Не зареєстровано ОС в ""Особистому кабінеті"". Зареєструйте її в обробці обміну.'"));
		КонецЕсли;
		
		// проверяем есть ли мобильные устройства в ЛК
		мМУ = стррJSON.JSON;
		Если мМУ.Количество() = 0 И Не БыстраяНастройка Тогда // предупреждаем, что в ЛК нет МУ и предлагаем перейти в ЛК
			МУПредложитьЗадатьМобильныеУстройстваВЛК();
		Иначе 
			МУОповеститьОЗагруженныхМУ(мМУ, БыстраяНастройка);
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте 
Функция ОписаниеОтсуствияМУвЛК() Экспорт
	
	Текст = НСтр("ru='В ""Личном кабинете"" не заданы мобильные устройства. Вероятная причина - программа ""Агент Плюс:Мобильная торговля"" еще не устанавливалась на Ваше мобильное устройство.';uk='В ""Особистому кабінеті"" не задані мобільні пристрої. Ймовірна причина - програма ""Агент Плюс: Мобільна торгівля"" ще не встановлювалася на Ваш мобільний пристрій.'")
		+ Символы.ПС + НСтр("ru='Чтобы мобильное устройство появилось в ""Личном кабинете"" нужно:';uk='Щоб мобільний пристрій з''явилося в ""Особистому кабінеті"" потрібно:'")
		+ Символы.ПС + "   " + НСтр("ru='1. Зайти в ""Личный кабинет"" в раздел ""Управление лицензиями"".';uk='1. Зайти в ""Особистий кабінет"" в розділ ""Управління ліцензіями"".'")
		+ Символы.ПС + "   " + НСтр("ru='2. Убедиться, что в разделе есть свободные лицензии (для свободных лицензий указан код активации).';uk='2. Переконатися, що в розділі є вільні ліцензії (для вільних ліцензій вказано код активації).'")
		+ Символы.ПС + "   " + НСтр("ru='3. Установить на мобильное устройство программу ""Агент Плюс:Мобильная торговля.""';uk='3. Встановити на мобільний пристрій програму ""Агент Плюс: Мобільна торгівля.""'")
		+ Символы.ПС + "   " + НСтр("ru='4. При первом запуске программы на мобильном устройстве ввести код активации, который показан в ""Личном кабинете"".';uk='4. При першому запуску програми на мобільному пристрої ввести код активації, який показаний в ""Особистому кабінеті"".'");
		
	Возврат Текст;
	
КонецФункции

&НаКлиенте 
Процедура МУПредложитьЗадатьМобильныеУстройстваВЛК()
	
	Текст = ОписаниеОтсуствияМУвЛК();
	ТекстВопроса = ОписаниеОтсуствияМУвЛК() + Символы.ПС + Символы.ПС + НСтр("ru='Перейти в окно настроек ""Личного кабинета""?';uk='Перейти у вікно налаштувань ""Особистого кабінету""?'");
	Оповещение = Новый ОписаниеОповещения("ПерейтиВЛКПродолжить", ЭтотОбъект, Текст);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Процедура оповещает окна о полученным из ЛК массиве МУ.
//	Параметры:
//		мМУ - Массив - массив мобильных устройств, загруженных из ЛК
//		БыстраяНастройка - Булево - если Истина, то в параметре Источник метода Оповестить() будет передана 
//				строка "БыстраяНастройка" - признак для неинтерактивной обработки оповещения.
//		
&НаКлиенте 
Процедура МУОповеститьОЗагруженныхМУ(мМУ, БыстраяНастройка)
	
	СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
	СтррРезультат.ВидДанных	 = "МобильныеУстройства";
	СтррРезультат.ЕстьОшибки = Ложь;
	СтррРезультат.Результат  = мМУ; // Новый Массив; Отладка!!! проверка загрузки пустого списка МУ
	Источник = ?(БыстраяНастройка, "БыстраяНастройка", Неопределено); // в случае с "быстрой настройкой" может быть передан и пустой массив мМУ
	Оповестить("АПЛКОповещение", СтррРезультат, Источник);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_МобильныеУстройства
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВнешнийИнтерфейс

&НаКлиенте 
Процедура ВнешнийВызовЗадатьЛогинИПароль() Экспорт
	
	ЛКПроверитьЛогинИПароль();
	
КонецПроцедуры

// Процедура возвращает результат через оповещение "АПЛКОповещение".
// Вызывается из внешнего модуля.
// 
// Параметры:
// 		ВидДанных - Строка - возможные значения: 
// 						"КаналыОбмена" 			- получить массив каналов обмена данными
// 						"МобильныеУстройства" 	- получить массив мобильных устройств
// 						"ВсеНастройки"			- получить все настройки модуля обмена (пока отладочный параметр)
// 		БыстраяНастройка - Булево - если Истина, то операция выполняется по возможности без интерактивного участия пользователя.
// 
&НаКлиенте 
Процедура ВнешнийВызовЗагрузитьДанныеИзЛК(ВидДанных, БыстраяНастройка = Ложь) Экспорт

	Если Не ЛКПроверитьЛогинИПароль() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтррКонтекст.Отладка <> Неопределено Тогда
		Текст = СтрШаблон_(Нстр("ru = 'Внимание!!! Включен режим отладки загрузки данных из ЛК. Режим: %1'; uk = 'Увага!!! Включений режим налагодження завантаження даних з ЛК. Режим: %1'"),
								СтррКонтекст.Отладка);
		ПоказатьПредупреждение(, Текст);
	КонецЕсли; 
	
	Если ВидДанных = "КаналыОбмена" Тогда // нужно получить список каналов обмена из ЛК
		
		Если ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка) Тогда // учетная система зарегистрирована в ЛК
			КОПолучитьКаналыОбменаИзЛК(БыстраяНастройка);
		КонецЕсли; 
		
	ИначеЕсли ВидДанных = "МобильныеУстройства" Тогда // нужно получить список МУ из ЛК
		
		Если ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка) Тогда // учетная система зарегистрирована в ЛК		
			МУПолучитьМобильныеУстройстваИзЛК(БыстраяНастройка);
		КонецЕсли;
		
	ИначеЕсли ВидДанных = "ВсеНастройки" Тогда // !!! нужно скачать файл настроек обмена - тестовая операция!
		
		Путь = КаталогВременныхФайловДляТранспорта();
		ИмяФайлаНастроек = "apconfig";// имя файла без расширения
		ФайлНастроек = Путь + ИмяФайлаНастроек + ".zip";	
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru='Соединение с %1 ...';uk=""З'єднання з %1 ..."""), "www.agentplus.ru"));
		Соединение = Новый HTTPСоединение("www.agentplus.ru");
		
		ФайлЛК = "/tmp/configs/" + СокрЛП(Объект.ЛКЛогин) + ".zip";
		
		ОписаниеОшибки = "";
		Попытка HTTPОтвет = Соединение.Получить(ФайлЛК, ФайлНастроек);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			Если 0 <> Найти(ОписаниеОшибки, "404") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='В настройках указан либо неправильный логин доступа в ЛК, либо не заполнены настройки в ЛК.';uk='В налаштуваннях вказаний або неправильний логін доступу в ОК, або не заповнені настройки в ОК.'"));
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Ошибка получения настроек. ';uk='Помилка отримання налаштувань.'") + ОписаниеОшибки);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru='Ошибка работы с Интернет (%1)';uk='Помилка роботи з Інтернет (%1)'"), HTTPОтвет.КодСостояния));
			Возврат;
		КонецЕсли;
		
		Архив = Новый ЧтениеZipФайла(ФайлНастроек, Объект.ЛКПароль);
		
		ФайлНастроекXML = Путь + ИмяФайлаНастроек + ".xml";
		УдалитьФайлы(ФайлНастроекXML);
		
		Описание = "";
		Попытка Архив.ИзвлечьВсе(Путь);
		Исключение
			Описание = ОписаниеОшибки();
		КонецПопытки;
		
		Архив.Закрыть();
		
		УдалитьФайлы(Путь, "*.zip"); 
		
		Если Не ПустаяСтрока(Описание) Тогда
			Если 0 <> Найти(Описание, "пароль") Тогда
				мПараметры = Новый Массив;
				мПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Укажите пароль доступа к настройкам из Личного кабинета.';uk='Вкажіть пароль доступу до налаштувань з Особистого кабінету.'"), "ЛКПароль"));
				Оповещение = Новый ОписаниеОповещения("УказатьЛогинИлиПарольЛКПродолжить", ЭтаФорма, мПараметры);
				ПоказатьВопрос(Оповещение, НСтр("ru='Указан неверный пароль доступа в ЛК. Хотите указать пароль?';uk='Введено недійсний пароль доступу в ОК. Хочете вказати пароль?'"), РежимДиалогаВопрос.ДаНетОтмена);
				Текст = НСтр("ru='Указан неверный пароль.';uk='Введено недійсний пароль.'");
			Иначе
				Текст = Описание;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
		
		Если Не МодульК().ФайлСуществует(ФайлНастроекXML) Тогда
			Текст = СтрШаблон_(НСтр("ru='Не найден файл настроек в архиве. Файл: %1.';uk='Не вдалося знайти файл налаштувань в архіві. Файл: %1.'"), ФайлНастроекXML);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
		
		// имя скачанного файла настроек в переменной ФайлНастроекXML
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлНастроекXML));
			
		СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
		СтррРезультат.ВидДанных  = "ВсеНастройки"; // загрузка всех настроек модуля
		СтррРезультат.ЕстьОшибки = Ложь;
		СтррРезультат.Результат  = ФайлНастроекXML;
		Оповестить("АПЛКОповещение", СтррРезультат);
		
	Иначе
		 ВызватьИсключение(СтрШаблон_(НСтр("ru='Процедура ВнешнийВызовЗагрузитьДанныеИзЛК(). Неизвестное значение параметра! ВидДанных = %1';uk='Процедура ВнешнийВызовЗагрузитьДанныеИзЛК(). Невідоме значення параметра! ВидДанных = %1'"),
		 										ВидДанных));
	КонецЕсли; 
	
КонецПроцедуры // ВнешнийВызовЗагрузитьДанныеИзЛК()

&НаКлиенте 
Функция МодульК()

	Если гМодульК = Неопределено Тогда
		гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийКлиент");	
	КонецЕсли;
	
	Возврат гМодульК;

КонецФункции

&НаСервере
Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "")
	Возврат РеквизитФормыВЗначение("Объект").КаталогВременныхФайловДляТранспорта(Подкаталог);
КонецФункции

// СлужебныеПроцедурыИФункции_ВнешнийИнтерфейс
#КонецОбласти

// Убрать!!!
&НаКлиенте
Процедура КомандаЛКРазблокироватьТокен(Команда)
	Элементы.ЛКИдентификаторУС.Доступность = Истина;
	Элементы.ЛКИдентификаторУС.ТолькоПросмотр = Ложь;
	Элементы.ЛКТокенУС.Доступность = Истина;
	Элементы.ЛКТокенУС.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНетДоступаВЛКНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

// СлужебныеПроцедурыИФункции
#КонецОбласти