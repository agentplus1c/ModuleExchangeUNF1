
#Область Описание
	
/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// 
// *** Общая информация.
// Форма предназначена для настроек обмена данными с мобильным приложением (Агент Плюс: Мобильная торговля Базовая 2.0).
// 
// *** Возможность открытия формы с активной закладкой раздела через обработчик событий "ОбработкаОповещения".
// В переменной "ИмяСобытия" - указывается значение "АПНастройкиМодуля_ПоказатьНаФорме" тип Строка.
// В структуре "Параметры":
//		1) свойство "Закладка"  - необходимо указать имя группы элемента формы соответствующей закладки раздела.
//		2) свойство "Сообщение" - указывается значение для оповещения пользователя.
// 
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти


#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль
&НаКлиенте
Перем МодульЛК; // модуль работы с "Личным кабинетом"

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//vd_180508
	//СтррКонтекст = Новый Структура("СтатусыСправочников, КаталогИзменен, ИспользоватьЗаказы, СбросНастроек");
	СтррКонтекст = Новый Структура("СтатусыСправочников, КаталогИзменен, СбросНастроек");
	
	СтррКонтекст.Вставить("Конфигурация"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.СбросНастроек 	= Ложь;	
	СтррКонтекст.КаталогИзменен = Ложь; // признак, что при записи настроек нужно будет создать подкаталоги
	
	//vd_180508
	//УНФ
	//СтррКонтекст.ИспользоватьЗаказы = Константы.ИспользоватьЗаказыКлиентов.Получить(); // для проверки варианта загрузки заказов
	//СтррКонтекст.ИспользоватьЗаказы = Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле.Получить();
	//УНФ
	
	ТекОбъект.ЗаполнитьСпособыОбмена(Элементы.СпособОбмена.СписокВыбора);
	СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	
	СписокВыбора = Элементы.РежимВыгрузкиКодовНоменклатуры.СписокВыбора;
	СписокВыбора.Добавить("", 		 НСтр("ru='Не выгружать';uk='Не вивантажувати'"));
	СписокВыбора.Добавить("КОД", 	 НСтр("ru='Выгружать коды';uk='Вивантажувати коди'"));
	СписокВыбора.Добавить("АРТИКУЛ", НСтр("ru='Выгружать артикулы';uk='Вивантажувати артикули'"));
	
	СписокВыбора = Элементы.РегистрОстатковТоваров.СписокВыбора;
	СписокВыбора.Добавить("СвободныеОстатки", 	НСтр("ru='Свободные остатки';uk='Вільні залишки'"));
	СписокВыбора.Добавить("ТоварыНаСкладах", 	НСтр("ru='Товары на складах';uk='Товари на складах'"));
	
	ВосстановитьНастройкиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	

	Элементы.СгенерироватьНастройкиАгентПлюсСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	
	ОбновитьСтатусГотовности(Ложь);

	//ИзменитьДоступностьНастроекИспользоватьКонтрагентов();
	//ИзменитьДоступностьНастроекИспользоватьСоглашения();
	ИзменитьДоступностьВыгрузкиПерсональныхЦен();	
	ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование();
	//ИзменитьДоступностьНастроекИспользоватьХарактеристики();
	ИзменитьДоступностьНастроекИсторииПродаж();
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
	ИзменитьДоступностьНастроекВыгрузкиПеремещений(); // sd_25082017
	ИзменитьДоступностьНастроекМаршрута();
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	
	ЗаполнитьСпискиВыбора();
	ОбновитьВидНастроекОбмена();
	ОбновитьСпособРасчетаДолгов();
	ОбновитьПредупреждениеДляЭлементов();
	
	УстановитьМодифицированостьФормы(Ложь);
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда // первым делом просим указать каталог данных
		Элементы.РазделыНастроек.ТекущаяСтраница = Элементы.ГруппаКаталоги;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИнформацияОСбросеНастроек) Тогда
		Элементы.ИнформацияОСбросеНастроек.ЦветТекста = СтррКонтекст.Цвета.ТекстВнимание;	
		Элементы.ИнформацияОСбросеНастроек.Видимость = Истина;
		Элементы.ИнформацияОСбросеНастроек.Подсказка = ИнформацияОСбросеНастроек;
	Иначе
		Элементы.ИнформацияОСбросеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		ПодключитьОбработчикОжидания("СоздатьКаталогОбменаИнтерактивно", 1, Истина);
	КонецЕсли;
	
	
		
	Элементы.ГруппаКаталогДанныхРекомендация.ЦветФона = СтррКонтекст.Цвета.ФонВнимание;
	
	ОбновитьРекомендациюДляКаталогаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПМобильныеУстройстваИзменениеСпискаМУ" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПЛКОповещение" Тогда // оповещение от модуля ЛК
		
		Если Параметр.ВидДанных = "ВсеНастройки" Или Параметр.ВидДанных = "КаналыОбмена" Тогда
			Если Параметр.ЕстьОшибки Тогда
				ВывестиСообщения(Параметр, Ложь);
			ИначеЕсли Параметр.ВидДанных = "ВсеНастройки" Тогда
				ЛКЗагрузитьНастройкиПродолжить(Параметр);
			Иначе // Параметр.ВидДанных = "КаналыОбмена"
				ЛКЗагрузитьНастройкиОбменаПродолжить(Параметр.Результат, Источник = "БыстраяНастройка");
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		Если Параметр = "*" Или Найти(","+Параметр+",", ",НастройкиМодуля,") <> 0 Тогда
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПНастройкиМодуля_ПоказатьНаФорме" Тогда
		
		Если Не ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Открыть();
		КонецЕсли; 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Закладка") Тогда
				Элементы.РазделыНастроек.ТекущаяСтраница = Элементы[Параметр.Закладка];
			КонецЕсли; 
			
			Если Параметр.Свойство("Сообщение") Тогда
				Если Параметр.Сообщение = "ВыбратьВыгружатьМаршруты" Тогда
					Текст = НСтр("ru='Выберите флажок ""Интервал выгрузки маршрутов"" и укажите размер интервала.';uk='Виберіть прапорець ""Інтервал вивантаження маршрутів"" і вкажіть розмір інтервалу.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ВыгружатьМаршруты");
				ИначеЕсли Параметр.Сообщение = "МаксимальноеРасстояниеОтТТ" Тогда
					Текст = НСтр("ru='Подсказка: в параметре указывается максимально допустимое расстояние (в метрах) от торговой точки при создании документов в мобильном устройстве.';uk='Підказка: в параметрі вказується максимально допустима відстань (в метрах) від торгової точки при створенні документів в мобільному пристрої.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.МаксимальноеРасстояниеОтТТ");					
				ИначеЕсли Параметр.Сообщение = "УказатьКаталог" Тогда
					Текст = НСтр("ru='Укажите каталог данных.';uk='Вкажіть каталог даних.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
				ИначеЕсли Параметр.Сообщение = "УказатьВыгружатьХарактеристикиНоменклатуры" Тогда 
					Текст = НСтр("ru='Настройка ""Выгружать характеристики номенклатуры"" автоматически выключена, т.к. в конфигурации учетной системы не используются характеристики номенклатуры.';uk='Налаштування ""Вивантажувати характеристики номенклатури"" автоматично виключена, тому що в конфігурації облікової системи не використовуються характеристики номенклатури.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьКонтрагентов" Тогда
					Текст = НСтр("ru='Настройка ""Использовать контрагентов"" автоматически выключена, т.к. в конфигурации учетной системы отключена функциональная опция ""Независимо вести партнеров и контрагентов"".';uk='Налаштування ""Використовувати контрагентів"" автоматично виключена, тому що в конфігурації облікової системи відключена функціональна опція ""Незалежно вести партнерів і контрагентів"".'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьСоглашения" Тогда
					Текст = НСтр("ru='Настройка ""Использовать соглашения"" автоматически выключена, т.к. в конфигурации учетной системы не используются соглашения (договоры).';uk='Налаштування ""Використовувати угоди"" автоматично виключена, тому що в конфігурації облікової системи не використовуються угоди (договори).'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст); 
				Иначе
					ВызватьИсключение(НСтр("ru = 'Неизвестное значение свойства Параметр.Сообщение = '; uk = 'Невідоме значення властивості Параметр.Сообщение ='") + Параметр.Сообщение);
				КонецЕсли; 
			КонецЕсли; 

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Не СтррКонтекст.СбросНастроек И ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормы_СОД

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОД(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Текст = НСтр("ru='Перед генерацией настроек АП:СОД требуется сохранить настройки, измененные на этой форме. Сохранить настройки?';uk='Перед генерацією налаштувань АП: СОД потрібно зберегти налаштування, змінені на цій формі. Зберегти налаштування?'");
		Оповещение = Новый ОписаниеОповещения("КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СОДСоздатьФайлНастроек();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			СОДСоздатьФайлНастроек();
		КонецЕсли;
	Иначе
		ОчиститьСообщения();
		Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!';uk='Налаштування для служби обміну ""Агент Плюс: СОД"" не згенеровані!'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОД(Команда)
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	Если Не ПустаяСтрока(Каталог) Тогда
		Файл = Новый Файл(Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe");
		Если Файл.Существует() Тогда
			СОДОткрытьПанель();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ВыбратьЛокально", НСтр("ru='Выбрать файл локально';uk='Вибрати файл локально'"));
	Кнопки.Добавить("Скачать", НСтр("ru='Скачать с www.agentplus.ru';uk='Скачать с www.agentplus.ru'"));
	Кнопки.Добавить("Отмена",  НСтр("ru='Отмена';uk='Відміна'"));
	
	Оповещение = Новый ОписаниеОповещения("КомандаОткрытьПанельУправленияАПСОДПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Не указано расположение файла панели управления ""APlusSrvPanel.exe"". Выберите нужное действие.';uk='Не вказано розташування файлу панелі управління ""APlusSrvPanel.exe"". Виберіть потрібну дію.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОДПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт

	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат; 
	ИначеЕсли ИмяКнопки = "ВыбратьЛокально" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите файл управления службой ""APlusSrvPanel.exe"".';uk='Вкажіть файл управління службою ""APlusSrvPanel.exe"".'");
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Приложение (*.exe)|*.exe';uk='Додаток (*.exe)|*.exe'");
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "ВыбратьЛокально"));
	ИначеЕсли ИмяКнопки = "Скачать" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите каталог назначения для скачивания службы обмена Агент Плюс: СОД.';uk='Вкажіть каталог призначення для скачування служби обміну Агент Плюс: СОД.'");
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "Скачать"));
	Иначе
		ВызватьИсключение("КомандаОткрытьПанельУправленияАПСОДПродолжить() - неизвестное значение параметра: " + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

// ОбработчикиКомандФормы_СОД
#КонецОбласти 

&НаКлиенте
Процедура КомандаПроверкаПодключения(Команда)
	
	ПроверитьПодключениекFTP();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчанию(Команда)
	
	Если МодульК().ЭтоLinuxКлиент() Тогда
		КомандаКаталогДанныхПоУмолчаниюПродолжить(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		Сеть = Новый COMObject("wscript.network"); 
		ПользовательОС = Сеть.Username;	
		Оповещение = Новый ОписаниеОповещения("КомандаКаталогДанныхПоУмолчаниюПродолжить", ЭтаФорма, Неопределено);
		Текст = НСтр("ru='Внимание будет указан каталог, доступный только для текущего пользователя Windows (пользователь: %1). При работе ""1С:Предприятия"" в офисной сети каталог не будет доступен для других пользователей, это ограничит использование модуля обмена другими пользователями! Продолжить?';uk='Увага буде вказано каталог, доступний тільки для поточного користувача Windows (користувач: %1). При роботі ""1С: Підприємства"" в офісній мережі рейтингів не буде доступний для інших користувачів, це обмежить використання модуля обміну іншими користувачами! Продовжити?'");
		Текст = СтрШаблон_(Текст, ПользовательОС);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчаниюПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьКаталогДанныхПоУмолчанию(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогЛогов(Команда)
	
	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Логи", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогТреков(Команда)

	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Треки", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройкиКлиент()
	
	Если СтррКонтекст.КаталогИзменен Или ПустаяСтрока(Объект.КаталогДанных) Тогда // проверяем и создаем все подкаталоги
		СтррРезультат = МодульК().СоздатьПодкаталогиДанных(Объект.КаталогДанных);
		ОчиститьСообщения();
		Если СтррРезультат.ЕстьОшибки Тогда
			Для Каждого СтррСообщение Из СтррРезультат.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррСообщение.Описание,, СтррСообщение.Путь);
			КонецЦикла;
			Если Не ПустаяСтрока(Объект.КаталогДанных) Тогда
				Текст = НСтр("ru='Проверьте права доступа к каталогу ""%1"" или укажите другой каталог данных.';uk='Перевірте права доступу до каталогу ""%1"" або вкажіть інший каталог даних.'");
				Текст = СтрШаблон_(Текст, Объект.КаталогДанных);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
			КонецЕсли;
			Возврат Ложь;			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Ложь);
	
	СтррФайлСОД = СохранитьНастройкиСервер(); // если нужно обновить файл настроек СОД, файл обновляется
	
	Если СтррФайлСОД.Свойство("Текст") И СтррФайлСОД.Свойство("Кодировка") И СтррФайлСОД.Свойство("ПолноеИмяФайла") Тогда
		СтррФайлСОД.Текст.Записать(СтррФайлСОД.ПолноеИмяФайла, СтррФайлСОД.Кодировка);
	КонецЕсли;
	
	Оповестить("АПНастройкиПараметровОбменаИзмененияЗаписаны");
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)
	
	СохранитьНастройкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьКомпонентуAPPlusDLL(Команда)

	УстановитьВнешнююКомпонентуAPPlus();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНачальныеНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьНачальныеНастройки");
	Текст = НСтр("ru='Очистить настройки для инициализации? После обработку нужно перезапустить для новой инициализации настроек.';uk='Очистити налаштування для ініціалізації? Після обробку потрібно перезапустити для нової ініціалізації налаштувань.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьВсеНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьВсеНастройки");
	Текст = НСтр("ru='Внимание! Все настройки модуля будут очищены (в т.ч. очищены все служебные справочники: ""Настройки агентов"", ""Мобилные устройства"" и т.д).';uk='Увага! Всі налаштування модуля будуть очищені (в т.ч. очищені всі службові довідники: ""Налаштування агентів"", ""мобілного пристрої"" і т.д).'")
		+ Символы.ПС + НСтр("ru='Очистить все настройки? После обработку нужно будет перезапустить.';uk='Очистити всі налаштування? Після обробку потрібно буде перезапустити.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНастройкиПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		
		СтррРезультат = СброситьНастройкиСервер(ДополнительныеПараметры);
		Если СтррРезультат.ОшибокНет Тогда
			СтррКонтекст.СбросНастроек = Истина;
			Закрыть();
			Оповестить("АПНастройкиСброшены");
		Иначе
			Текст = НСтр("ru='Не удалось сбросить настройки! Описание ошибки:';uk='Не вдалося скинути налаштування! Опис помилки:'") + Символы.ПС + СтррРезультат.Описание;
			ПоказатьПредупреждение(Неопределено, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СброситьНастройкиСервер(Режим)

	СтррРезультат = Новый Структура("ОшибокНет,Описание", Истина);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если Режим = "СброситьНачальныеНастройки" Тогда
		ТекОбъект.СохранитьЗначениеНастройки("ВерсияНастроек", "");
	ИначеЕсли Режим = "СброситьВсеНастройки" Тогда
		ТекОбъект.СброситьВсеНастройкиМодуля(СтррРезультат);
	Иначе
		ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Функция СброситьНастройкиСервер(), неизвестный параметр Режим = %1'; uk = 'Функція СброситьНастройкиСервер(), невідомий параметр Режим =%1'"),Режим));
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

#Область ОбработчикиКомандФормы_ВзамодействиеСЛК

&НаКлиенте
Процедура КомандаВыгрузитьНастройкиВФайл(Команда)
	
	СтррРезультат = ЛКВыгрузитьНастройкиВФайлСервер(); // настройки в виде xml-файла сохраняются в хранилище
	ВывестиСообщения(стррРезультат, Истина);
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(СтррРезультат.АдресВХ);
	
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В хранилище отсутствует XML-файл настроек.';uk='У сховищі відсутня XML-файл настройок.'"));
		
	Иначе // выбираем папку для сохранения файла
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = "apconfig.xml";
		Диалог.Расширение = "xml";
		Диалог.Фильтр = СтрШаблон_(НСтр("ru='Все файлы (*.%1)|*.%1';uk='Всі файли (*.%1)|*.%1'"), Диалог.Расширение);
		
		Если Диалог.Выбрать() Тогда
			Данные.Записать(Диалог.ПолноеИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Настройки сохранены в файл: ';uk='Налаштування збережені в файл:'") + Диалог.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьНастройкиОбмена(Команда)
	
	ЛКЗагрузитьДанные("КаналыОбмена");

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьВсеНастройки(Команда)
	
	ЛКЗагрузитьДанные("ВсеНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьЛичныйКабинет(Команда)
	
	Модуль = ЛКЗагрузитьМодуль();
	Модуль.Открыть();

КонецПроцедуры

// ОбработчикиКомандФормы_ВзамодействиеСЛК
#КонецОбласти 

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	РазделСправки = "";
	Если Элементы.РазделыНастроек.ТекущаяСтраница <> Неопределено Тогда
		РазделСправки = Элементы.РазделыНастроек.ТекущаяСтраница.Имя;
	КонецЕсли; 
	
	Если РазделСправки = "" Или РазделСправки = "ГруппаОбменДанными" Тогда
		РазделСправки = ЭтаФорма.ИмяФормы;
	Иначе
		РазделСправки = ЭтаФорма.ИмяФормы + "_" + РазделСправки;
	КонецЕсли;
	
	МодульК().КомандаСправка(РазделСправки);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	Если Элемент.Имя = "НадписьГотовностьАгентов" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("ВыделитьПервогоАгентаСОшибкой", Истина));		
	ИначеЕсли Элемент.Имя = "НадписьГотовностьМУ" Тогда
		МодульК().КомандаВыполнить("ПоказатьМобильныеУстройства");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИсториюПродажПриИзменении(Элемент)
	
	ИзменитьДоступностьНастроекИсторииПродаж();
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьЦветомПросроченныеДолгиПриИзменении(Элемент)
	
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Цвет,ЦветПоУмолчанию", Объект.ЦветПросроченныхДолгов, "255,0,0"));
	Оповещение = Новый ОписаниеОповещения("ЦветПросроченныхВыборЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборЦвета", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ЦветПросроченныхДолгов = Результат.Цвет;
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	ОбновитьВидНастроекОбмена();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("КаталогДанных", СокрЛП(Элемент.ТекстРедактирования));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
	ПоляУдаленияПробелов = "FTPАдрес,FTPПользователь,FTPКаталогСервера,СОДАдрес";
	
	Имя = Элемент.Имя;	
	Если 0 <> Найти(","+ПоляУдаленияПробелов+",", ","+Имя+",") Тогда
		Объект[Имя] = СокрЛП(Объект[Имя]);
	КонецЕсли;
	
	Если Имя = "ТорговляСКолес" Тогда // sd_25082017
		ИзменитьДоступностьНастроекВыгрузкиПеремещений();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСоглашенияПриИзменении(Элемент)

	ИзменитьДоступностьВыгрузкиПерсональныхЦен();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыгрузкиКодовНоменклатурыПриИзменении(Элемент)
	
	ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование();
	УстановитьМодифицированостьФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзмененииСПредупреждением(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПросроченныхДолговПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьСпособРасчетаДолгов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьМаршрутыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекМаршрута();
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)

	Если Найти(НРег(НавигационнаяСсылка), ".htm") = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если НавигационнаяСсылка = "СпискиТорговыхТочек" Или НавигационнаяСсылка = "НастройкиАгентов" Тогда
			МодульК().ОткрытьФормуОбработки(НавигационнаяСсылка);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаказыПриИзменении(Элемент)
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПеремещенияПриИзменении(Элемент) // sd_25082017
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекВыгрузкиПеремещений();
КонецПроцедуры


&НаКлиенте
Процедура FTPПарольОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.FTPПароль.РежимПароля = Не Элементы.FTPПароль.РежимПароля;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДПортПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Объект.КаталогОбмена) Тогда
		ЗапуститьПриложение("explorer.exe """ + Объект.КаталогОбмена + """");
	Иначе
		Текст = НСтр("ru='Не указан ""Каталог обмена"". Каталог обмена назначается автоматически после указания ""Каталога данных"" на закдаке ""Каталоги"".';uk='Не вказаний ""Каталог обміну"". Каталог обміну призначається автоматично після вказівки ""Каталогу даних"" на закдаке ""Каталоги"".'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьПутиПодкаталоговДанных();
	
	Элементы.КаталогДанныхПоУмолчанию.Видимость = ПустаяСтрока(Объект.КаталогДанных);
	
	ОбновитьРекомендациюДляКаталогаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer.exe """ + Объект.КаталогДанных + """");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообменПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьВидАвтообмена();

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалАвтообменаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКаталогДаннныхРекомендацияПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Windows" Или НавигационнаяСсылка = "Linux" Тогда
		МодульК().КомандаСправка(ЭтаФорма.ИмяФормы + "_КаталогДанныхДляСервера_" + НавигационнаяСсылка);
	Иначе
		ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Неизвестная навигационная ссылка: %1'; uk = 'Невідома навігаційна посилання: %1'"), НавигационнаяСсылка));
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервереБезКонтекста
Функция КонстантыПолучитьЗначение(ИмяКонстанты)

	Возврат Константы[ИмяКонстанты].Получить();	
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ИнформацияОСбросеНастроек = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиСброшены");
	
	Если ПустаяСтрока(Объект.РегистрОстатковТоваров) Тогда
		Объект.РегистрОстатковТоваров = "СвободныеОстатки";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзВХ(АдресФайлаНастроекЛКВХранилище, ТолькоНастройкиОбмена)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТолькоНастройкиОбмена Тогда
		ИменаНастроек = "СпособОбмена,FTPАдрес,FTPПароль,FTPПользователь,FTPКаталогСервера,FTPПассивныйРежим,ИспользоватьАвтообмен";
	Иначе
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли;
	
	Результат = ТекОбъект.ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресФайлаНастроекЛКВХранилище);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СохранитьНастройкиСервер(ИменаНастроек = Неопределено)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли; 
	ТекОбъект.СохранитьЗначенияНастроекОбработки(ИменаНастроек);
	
	Возврат ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецФункции

&НаСервере
Функция НастройкиФормы(ТекОбъект)

	СтрРеквизиты = "";
	Реквизиты = ТекОбъект.Метаданные().Реквизиты;
	ЭлементыФормы = ЭтаФорма.Элементы;
	Для Каждого ЭлементМетаданных Из Реквизиты Цикл
		Если ЭлементыФормы.Найти(ЭлементМетаданных.Имя) <> Неопределено Тогда
			СтрРеквизиты = СтрРеквизиты + ЭлементМетаданных.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);
	
КонецФункции 

&НаСервере
Процедура СохранитьНастройкиКаталогов()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки("КаталогДанных,КаталогОбмена");
	ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецПроцедуры

&НаСервере
Процедура СправочникиПрочитатьИзНастроекГотовностьКОбмену()
	
	СтррКонтекст.СтатусыСправочников 
		= РеквизитФормыВЗначение("Объект").СправочникиГотовыКРаботе("НастройкиАгентов,МобильныеУстройства");
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиСообщения(стррРезультат, ОчиститьСообщения = Ложь)
	
	Если ОчиститьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Для Каждого Значение Из СтррРезультат.Сообщения Цикл
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусГотовности(ПрочитатьИзНастроек)
	
	Если ПрочитатьИзНастроек Тогда
		СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	КонецЕсли;
	
	ЕстьЗамечания = Ложь;	
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
	Если СтррСтатус.Готов Тогда
		Элементы.НадписьГотовностьАгентов.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьАгентов.Видимость = Истина;
		Элементы.НадписьГотовностьАгентов.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	Элементы.КаталогДанныхПредупреждение.Видимость = (СтррСтатус.Количество > 0);	
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
	Если СтррСтатус.Готов Тогда
		Элементы.НадписьГотовностьМУ.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьМУ.Видимость = Истина;
		Элементы.НадписьГотовностьМУ.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	кнГенерацияНастроекСОД = Элементы.СгенерироватьНастройкиАгентПлюсСОД;
	кнГенерацияНастроекСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	кнГенерацияНастроекСОД.Доступность = Не ЕстьЗамечания;

	Если ЕстьЗамечания Тогда
		кнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		кнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru='Для обновления настроек требуется устранить замечания в настройках.';uk='Для оновлення налаштувань потрібно усунути зауваження в налаштуваннях.'");
	Иначе
		кнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		кнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru='Обновление настроек для Службы Обмена Данными (СОД) с мобильными устройствами.';uk='Оновлення налаштувань для Служби Обміну Даними (СОД) з мобільними пристроями.'");
	КонецЕсли;
	
	кнГенерацияНастроекСОД.Доступность = СтррСтатус.Готов;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()

	ЗаполнитьСпособыЗагрузкиЗаказов(Элементы.РежимЗагрузкиЗаказов.СписокВыбора);
	ЗаполнитьСпособыРасчетаПросроченныхДолгов(Элементы.СпособРасчетаПросроченныхДолгов.СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидНастроекОбмена()

	Если Объект.СпособОбмена = "КаталогОбмена" Тогда
		Элементы.ГруппаПараметрыОбмена.Видимость 	= Ложь;
		Элементы.КаталогОбмена.Видимость 	= Истина;
	Иначе
		Элементы.ГруппаПараметрыОбмена.Видимость = Истина;
		СтраницыПараметровОбмена = Элементы.ГруппаПараметрыОбмена.ПодчиненныеЭлементы;
		Если Объект.СпособОбмена = "FTP" Тогда
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.ПараметрыFTP;
			Элементы.КаталогОбмена.Видимость 	= Ложь;
		Иначе
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.ПараметрыСОД;
			Элементы.КаталогОбмена.Видимость 	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидАвтообмена();
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпособРасчетаДолгов()
	
	Если Объект.СпособРасчетаПросроченныхДолгов = "НеУчитывать" Или Не ЗначениеЗаполнено(Объект.СпособРасчетаПросроченныхДолгов) 
	Тогда
		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Ложь;
		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Ложь;
		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Ложь;
		Элементы.ЦветПросроченныхДолгов.Доступность 			= Ложь;
	ИначеЕсли Объект.СпособРасчетаПросроченныхДолгов = "ПоДоговору" Тогда
		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Ложь;
		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Истина;
		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Истина;
		Элементы.ЦветПросроченныхДолгов.Доступность 			= Истина;
	ИначеЕсли Объект.СпособРасчетаПросроченныхДолгов = "ПоКоличествуДнейПросрочки" Тогда
		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Истина;
		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Истина;
		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Истина;
		Элементы.ЦветПросроченныхДолгов.Доступность 			= Истина;
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Неизвестное значение реквизита Объект.СпособРасчетаПросроченныхДолгов = ""%1"".'; uk = 'Невідоме значення реквізиту Объект.СпособРасчетаПросроченныхДолгов = ""%1"".'"), Объект.СпособРасчетаПросроченныхДолгов);
		ВызватьИсключение(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидАвтообмена()
	
	Элементы.ИнтервалАвтообмена.Доступность = (Объект.СпособОбмена <> "АПСОД" И Объект.ИспользоватьАвтообмен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлемента(ИмяЭлемента)
	
	имяГруппыВыделения = "ГруппаВыделить" + ИмяЭлемента;
	Элементы[имяГруппыВыделения].ЦветФона = ?(Объект[ИмяЭлемента], СтррКонтекст.Цвета.ФонВнимание, СтррКонтекст.Цвета.Авто);
	имяДекорации = "ДекорацияВыделить" + ИмяЭлемента;
	Элементы[имяДекорации].Видимость = Объект[ИмяЭлемента];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлементов()
	
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияКонтрагентов");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияТоваров");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИсториюПродаж");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьМаршруты");
	
КонецПроцедуры	

&НаКлиенте 
Процедура ИзменитьДоступностьНастроекИспользоватьСоглашения()
	
	Элементы.ИспользоватьДоговоры.Доступность = 
		КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> ПредопределенноеЗначение("Перечисление.ИспользованиеСоглашенийСКлиентами.НеИспользовать") 
		Или КонстантыПолучитьЗначение("ИспользоватьДоговорыСКлиентами");
		
КонецПроцедуры 

&НаКлиенте 
Процедура ИзменитьДоступностьНастроекИспользоватьХарактеристики()
	
	Элементы.ИспользоватьХарактеристики.Доступность = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры");
		
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьДоступностьНастроекИсторииПродаж()
	Элементы.НастройкиИстрииПродаж.Доступность = Объект.ВыгружатьИсториюПродаж;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьВыгрузкиПерсональныхЦен()
	Элементы.ВыгружатьПерсональныеЦены.Доступность = Объект.ИспользоватьДоговоры И Элементы.ИспользоватьДоговоры.Доступность;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование()
	Элементы.ВключатьКодыНоменклатурыВНаименование.Доступность = ЗначениеЗаполнено(Объект.РежимВыгрузкиКодовНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастроекВыгрузкиЗаказов()
	Элементы.ИнтервалВыгрузкиЗаказов.Доступность = Объект.ВыгружатьЗаказы;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастроекВыгрузкиПеремещений() // sd_25082017
	Элементы.ВыгружатьПеремещения.Доступность = Объект.ТорговляСКолес;
	Элементы.ИнтервалВыгрузкиПеремещений.Доступность = Объект.ВыгружатьПеремещения;
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьДоступностьНастроекМаршрута()
	Элементы.ИнтервалВыгрузкиМаршрутов.Доступность = Объект.ВыгружатьМаршруты;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов()

	Элементы.ЦветПросроченныхДолгов.Доступность = Объект.ВыделятьЦветомПросроченныеДолги;

КонецПроцедуры

//vd_180508 Изменена
&НаКлиенте
Процедура ЗаполнитьСпособыЗагрузкиЗаказов(Список)

	СтррВидыДокументов = ПолучитьПредставленияВидовДокументов();
	
	//Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""';uk='Завантажувати як документ ""%1""'"), СтррВидыДокументов.ЗаказКлиента);	
	Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""';uk='Завантажувати як документ ""%1""'"), СтррВидыДокументов.ЗаказПокупателя);
	Список.Добавить("ЗагружатьКакЗаказ", Текст);
	
	//Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""';uk='Завантажувати як документ ""%1""'"), СтррВидыДокументов.РеализацияТоваровУслуг);
	Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""';uk='Завантажувати як документ ""%1""'"), СтррВидыДокументов.РасходнаяНакладная);
	Список.Добавить("ЗагружатьКакРеализацию", Текст);

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияВидовДокументов()
	
	//Унф
	//СтррВидыДокументов = Новый Структура("ЗаказКлиента,РеализацияТоваровУслуг");
	СтррВидыДокументов = Новый Структура("ЗаказПокупателя, РасходнаяНакладная");
	//--
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ПолучитьПредставленияВидовОбъектов(СтррВидыДокументов);
	Возврат СтррВидыДокументов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпособыРасчетаПросроченныхДолгов(Список)

	Список.Добавить("НеУчитывать", 					НСтр("ru='Не учитывать просрочку';uk='Не зважати на прострочення'"));
	Список.Добавить("ПоДоговору", 					НСтр("ru='По договору';uk='За договором'"));
	Список.Добавить("ПоКоличествуДнейПросрочки", 	НСтр("ru='По заданному количеству дней просрочки';uk='За заданій кількості днів прострочення'"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Интерактивно)
	
	Если Объект.СпособОбмена = "КаталогОбмена" Тогда 
		МинЗначение = 5;
	ИначеЕсли Объект.СпособОбмена = "FTP" Тогда
		МинЗначение = 15;
	Иначе
		МинЗначение = -1; // минимальное значение не важно
	КонецЕсли;
	
	Если Объект.ИнтервалАвтообмена < МинЗначение Тогда
		Объект.ИнтервалАвтообмена = МинЗначение;
		УстановитьМодифицированостьФормы(Истина);
		Если Интерактивно Тогда
			ОчиститьСообщения();
			Текст = СтрШаблон_(НСтр("ru='Минимально допустмое значение для выбранного способа обмена данными: %1 сек.';uk='Мінімально допустмое значення для обраного способу обміну даними: %1 сек.'"), МинЗначение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ИнтервалАвтообмена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Каталоги

&НаКлиенте
Процедура ВыбратьКаталог(ИмяРеквизита, Каталог)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = ?(ПустаяСтрока(Каталог), Объект[ИмяРеквизита], Каталог);
	ДиалогВыбораФайла.Показать(
		Новый ОписаниеОповещения("УстановитьВыбранныйПуть", ЭтаФорма, Новый Структура("ИмяРеквизита", ИмяРеквизита)));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныйПуть(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0];
		УстановитьМодифицированостьФормы(Истина);
		Если ДополнительныеПараметры.ИмяРеквизита = "КаталогДанных" Тогда
			ОбновитьПутиПодкаталоговДанных();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//функция возвращает путь каталога файла
&НаКлиентеНаСервереБезКонтекста 
Функция ФСВернутьКаталогФайла(Знач ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат "";
	КонецЕсли;
	
	ИмяФайла = СокрЛП(ИмяФайла);
	Если Прав(ИмяФайла,2) = "\\" Тогда
	    Возврат ИмяФайла;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.ЭтоКаталог() Тогда
        Возврат ИмяФайла;
	КонецЕсли;
	
	//убираем имя файла на конце
	ПромИмяФайла = ИмяФайла; 
	ПромПоз = 0;
	Поз = Найти(ПромИмяФайла, "\");
	Пока Поз <> 0 Цикл
		ПромПоз = ПромПоз + Поз;
		ПромИмяФайла= Прав(ПромИмяФайла, СтрДлина(ПромИмяФайла) - Поз);
		Поз = Найти(ПромИмяФайла, "\");
	КонецЦикла;
	
	Возврат ?(ПромПоз = 0, "", Лев(ИмяФайла, ПромПоз));
	
КонецФункции  

// Процедура устанавливает подкаталоги каталога данных.
&НаКлиенте
Процедура ОбновитьПутиПодкаталоговДанных(Интерактивно = Истина)
	
	Если Интерактивно Тогда
		СтррКонтекст.КаталогИзменен = Истина;		
	КонецЕсли; 

	Объект.КаталогДанных = СокрЛП(Объект.КаталогДанных);
	Объект.КаталогОбмена = МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьГотовностьПодкаталогов()
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда
		ОчиститьСообщения();		
		Текст = НСтр("ru='Сначала укажите каталог данных и сохраните изменения.';uk='Спочатку вкажіть каталог даних і збережіть зміни.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
		Возврат Ложь;
	ИначеЕсли СтррКонтекст.КаталогИзменен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала сохраните изменения.';uk='Спочатку збережіть зміни.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивно() Экспорт
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		Текст = НСтр("ru='В настройках не указан каталог обмена. Создать каталог автоматически?';uk='В налаштуваннях не вказано каталог обміну. Створити каталог автоматично?'")
			+ Символы.ПС + НСтр("ru='(будет создан каталог: ""%1"")';uk='(Буде створений каталог: ""%1"")'");
		Текст = СтрШаблон_(Текст, МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных));
		Оповещение = Новый ОписаниеОповещения("СоздатьКаталогОбменаИнтерактивноПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивноПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьПутиПодкаталоговДанных();
	КонецЕсли;
	
КонецПроцедуры

// Процедура может вызываться из других модулей.
&НаКлиенте
Процедура УстановитьКаталогДанныхПоУмолчанию(Интерактивно) Экспорт
	
	Объект.КаталогДанных = КаталогДокументов() + "APMT";
	ОбновитьПутиПодкаталоговДанных(Интерактивно);
	Если Интерактивно Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьРекомендациюДляКаталогаДанных();
	Иначе // нужно записать изменения в хранилище настроек
		СохранитьНастройкиКаталогов();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверитьКаталогДанных()

	стррРезультат = Новый Структура("ТипСервера,Кластер,Описание");
	
	стррПараметры = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	стррПараметры.Свойство("Srvr", стррРезультат.Кластер);
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИспользуетсяLinuxСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);	
	
	Если Лев(СокрЛ(Объект.КаталогДанных), 2) = "\\" Или стррРезультат.Кластер <> Неопределено Тогда
		
		стррРезультат.ТипСервера = ?(ИспользуетсяLinuxСервер, "Linux", "Windows");
		
		Текст = "";
		Если стррРезультат.Кластер <> Неопределено Тогда
			Текст = Текст 
				+ СтрШаблон_(НСтр("ru='Для сервера ""%1"" требуется сетевой полный доступ к каталогу данных. ';uk='Для сервера ""%1"" потрібен мережевий повний доступ до каталогу даних.'"), стррРезультат.Кластер);
		Иначе
			Текст = Текст + НСтр("ru='Требуется сетевой полный доступ к каталогу данных. ';uk='Потрібно мережевий повний доступ до каталогу даних.'");
		КонецЕсли; 

		Текст = Текст + НСтр("ru='Ваша учетная система настроена на работу с %1-сервером. Пожалуйста, учтите рекомендации по ';uk='Ваша облікова система налаштована на роботу з %1-сервером. Будь ласка, майте на увазі рекомендації по'");
		Текст = СтрШаблон_(Текст, стррРезультат.ТипСервера);
		
		мСтроки = Новый Массив;		
		мСтроки.Добавить(Текст);
		мСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='этой ссылке';uk='цим посиланням'"),,,, стррРезультат.ТипСервера));
		мСтроки.Добавить(".");
		стррРезультат.Описание = Новый ФорматированнаяСтрока(мСтроки);
					 
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции 

&НаКлиенте
Процедура ОбновитьРекомендациюДляКаталогаДанных()
	
	стррРезультат = ПроверитьКаталогДанных();
	
	Если стррРезультат.Кластер = Неопределено И стррРезультат.ТипСервера = Неопределено Тогда
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Истина;
		Если стррРезультат.Кластер <> Неопределено Тогда
			Текст = СтрШаблон_(НСтр("ru='Текущая база данных ""1С:Предприятия"" подключена через кластер серверов ""%1"". Сервер ""%1"" должен иметь полный доступ к указанному каталогу данных.';uk='Поточна база даних ""1С:Підприємства"" підключена через кластер серверів ""%1"". Сервер ""%1"" повинен мати повний доступ до зазначеного каталогу даних.'"), 
				стррРезультат.Кластер);
		Иначе		
			Текст = СтрШаблон_(НСтр("ru='Требуется полный сетевой доступ к каталогу данных.';uk='Потрібно повний мережевий доступ до каталогу даних.'"), 
				стррРезультат.Кластер);
		КонецЕсли; 
		Элементы.ДекорацияКаталогДанныхРекомендация.Заголовок = Текст;
		Элементы.ГруппаКаталогДанныхРекомендацияРасширеннаяПодсказка.Заголовок = стррРезультат.Описание;
	КонецЕсли; 
	
КонецПроцедуры
 
// СлужебныеПроцедурыИФункции_Каталоги
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_APPlus

&НаСервере
Функция ПолучитьКомпонентуAPPlus()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	БинарныеДанные = ТекОбъект.ПолучитьМакетОбработки("APPlusDLL");
	АдресМакетаВХранилище = ПоместитьВоВременноеХранилище(БинарныеДанные);
	
	Возврат АдресМакетаВХранилище;
	
КонецФункции

// Устанавливает внешнюю компоненту APPlus.dll.
// Компонента хранится в общем макете: ОбщийМакет.апКомпонентаAPPlus.
// Последнюю версию компоненты можно скачать по ссылке: http://www.agentplus.ru/download/applus.zip
//
&НаСервере
Функция УстановитьВнешнююКомпонентуAPPlus()
	
	ФайлКомпонентыИзМакета 	 = ПолучитьИзВременногоХранилища(ПолучитьКомпонентуAPPlus());
	НазваниеКомпоненты	 	 = "APPlus.dll";
	ПрограммаРегистрации32 	 = "C:\Windows\System32\regsvr32.exe";		
	ПрограммаРегистрации64	 = "C:\Windows\SysWOW64\regsvr32.exe";
	
	СисИнфо = Новый СистемнаяИнформация;
	ИнфоТипПлатформы = СисИнфо.ТипПлатформы;
	
	КодВозврата = Неопределено;	
	Попытка
		Если ИнфоТипПлатформы = ТипПлатформы.Windows_x86 Тогда //ставим APPlusCOM32.dll			
			ПапкаДляСохраненияКомпонентыСИменемФайла = КаталогПрограммы() + НазваниеКомпоненты;	
			ФайлКомпонентыИзМакета.Записать(ПапкаДляСохраненияКомпонентыСИменемФайла);		
			ЗапуститьПриложение(ПрограммаРегистрации32 + " """ + ПапкаДляСохраненияКомпонентыСИменемФайла + """",, Истина, КодВозврата);					
		ИначеЕсли ИнфоТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда //ставим APPlusCOM64.dll			
			ПапкаДляСохраненияКомпонентыСИменемФайла = КаталогПрограммы() + НазваниеКомпоненты;	
			ФайлКомпонентыИзМакета.Записать(ПапкаДляСохраненияКомпонентыСИменемФайла);		
			ЗапуститьПриложение(ПрограммаРегистрации64 + " """ + ПапкаДляСохраненияКомпонентыСИменемФайла + """",, Истина, КодВозврата);			
		КонецЕсли; 		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось установить компоненту APPlus.dll. Причина: ';uk='Не вдалося встановити компоненту APPlus.dll. Причина:'") + ОписаниеОшибки());
	КонецПопытки;	
	
	Возврат КодВозврата;
	
КонецФункции	

// СлужебныеПроцедурыИФункции_APPlus
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_СОД

&НаСервере
Функция СОДСоздатьФайлНастроекСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").СОДСгенерироватьФайлНастройки();
	
КонецФункции

// Создание xml-файла настроек АП СОД.
&НаКлиенте
Процедура СОДСоздатьФайлНастроек()
	
	ОчиститьСообщения();	
	
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(Объект.КаталогОбмена) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан каталог в поле ""Каталог обмена""!';uk='Не вказаний каталог в поле ""Каталог обміну""!'"),, "Объект.КаталогОбмена");
		ЕстьОшибки = Истина;
	Иначе
		КаталогНаДиске = Новый Файл(Объект.КаталогОбмена);
		Если Не КаталогНаДиске.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не существует каталога, указанного в поле ""Каталог обмена""!';uk='Не існує каталогу, зазначеного в полі ""Каталог обміну""!'"),, "Объект.КаталогОбмена");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		СтррРезультат = СОДСоздатьФайлНастроекСервер();
		Если СтррРезультат.Замечания.Количество() > 0 Тогда
			Для Каждого Замечание Из СтррРезультат.Замечания Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Замечание.Описание,, "Объект." + Замечание.Реквизит);
			КонецЦикла;
			ЕстьОшибки = Истина;
		Иначе
			СтррРезультат.Текст.Записать(СтррРезультат.ПолноеИмяФайла, СтррРезультат.Кодировка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Создан файл настроек службы обмена данными:';uk='Створено файл налаштувань служби обміну даними:'") + " """ + СтррРезультат.ПолноеИмяФайла + """");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!';uk='Налаштування для служби обміну ""Агент Плюс: СОД"" не згенеровані!'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СОДВыборФайлаПанелиУправленияЛокальноПродолжить(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат; // отказ выбора файла
	ИначеЕсли ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Путь = ВыбранныеФайлы[0];
	Иначе		
		ВызватьИсключение(СтрШаблон_(НСтр("ru = 'СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ВыбранныеФайлы = %1'; uk = 'СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - невідоме значення: ВыбранныеФайлы =%1'"), ВыбранныеФайлы));
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыбратьЛокально" Тогда
	
		Каталог = ФСВернутьКаталогФайла(Путь);
		
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ФайлПанелиСОД = Новый Файл(ПутьПанельСОД);
		
		Если Не ФайлПанелиСОД.Существует() Тогда 
			Текст = СтрШаблон_(НСтр("ru='Не найден файл панели управления службы обмена данными ""%1"". Хотите указать другой путь?';uk='Не вдалося знайти файл панелі управління служби обміну даними ""%1"". Хочете вказати інший шлях?'"), ПутьПанельСОД);
			Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельУправленияПовторить", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			Объект.СОДПутьКПанелиУправления = Каталог;
			УстановитьМодифицированостьФормы(Истина);
			СОДОткрытьПанель();				
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Скачать" Тогда
		
		ФайлАрхива = Путь + ?(Прав(Путь,1)<>"\", "\", "") + "aps_app.zip";	
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru='Соединение с %1 ...';uk=""З'єднання з %1 ..."""), "www.agentplus.ru"));
		Соединение = Новый HTTPСоединение("www.agentplus.ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Скачивание...';uk='Завантаження...'"));
		HTTPОтвет = Соединение.Получить("/download/aps_app.zip", ФайлАрхива);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru='Ошибка работы с Интернет (%1)';uk='Помилка роботи з Інтернет (%1)'"), HTTPОтвет.КодСостояния));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Распаковка...';uk='Розпакування...'"));
		Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		Архив.ИзвлечьВсе(Путь);
		Архив.Закрыть();
		
		УдалитьФайлы(Путь, "*.zip");  
		
		Объект.СОДПутьКПанелиУправления = Путь;
		УстановитьМодифицированостьФормы(Истина);
		
		СОДОткрытьПанель();
		
	Иначе
		ВызватьИсключение(СтрШаблон_(НСтр("ru = 'СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ДополнительныеПараметры = %1'; uk = 'СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - невідоме значення: ДополнительныеПараметры = %1'"), ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

&НаКлиенте
Процедура СОДОткрытьПанель()
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Запустить", 	НСтр("ru='Запустить';uk='Запустити'"));
	Кнопки.Добавить("ОткрытьПапку", НСтр("ru='Открыть папку';uk='Відкрити папку'"));
	Кнопки.Добавить("Отмена", 		НСтр("ru='Отмена';uk='Відміна'"));
	
	Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Выберите нужное действие для запуска панели управления службы обмена данными (СОД):';uk='Виберіть потрібну дію для запуску панелі управління служби обміну даними (СОД):'") + Символы.ПС;
	
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(0)) + Символы.Таб + " - " 
		+ НСтр("ru='если 1С:Предприятие запущено с правами Администратора системы;';uk='якщо 1С:Підприємство запущено з правами Адміністратора системи;'") + Символы.ПС;
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(1)) + Символы.Таб + " - " 		
		+ НСтр("ru='для запуска СОД через контекстное меню с правами Администратора.';uk='для запуску СОД через контекстне меню з правами Адміністратора.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	
	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат;
	ИначеЕсли ИмяКнопки = "Запустить" Тогда
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ЗапуститьПриложение("explorer.exe """ + ПутьПанельСОД + """");
	ИначеЕсли ИмяКнопки = "ОткрытьПапку" Тогда
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");			
	Иначе
		ВызватьИсключение(Нстр("ru='СОДОткрытьПанельПродолжить() - неизвестное значение: ИмяКнопки = ';uk='СОДОткрытьПанельПродолжить() - невідоме значення: ИмяКнопки ='") + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельУправленияПовторить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        КомандаОткрытьПанельУправленияАПСОД(Неопределено);
    КонецЕсли;
	
КонецПроцедуры 

// СлужебныеПроцедурыИФункции_СОД
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_FTP

&НаКлиенте
Процедура ПроверитьПодключениекFTP()
	
	Если ПустаяСтрока(Объект.FTPАдрес)
		Или ПустаяСтрока(Объект.FTPПользователь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Указаны не все параметры соединения с FTP-сервером! Работа с FTP невозможна!';uk=""Вказані в повному обсязі параметри з'єднання з FTP-сервером! Робота з FTP неможлива!"""));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подключение к FTP-серверу...';uk='Підключення до FTP-сервера...'"));
	
	Попытка
		ПодключениеFTP = Новый FTPСоединение(Объект.FTPАдрес, , Объект.FTPПользователь, Объект.FTPПароль,, Объект.FTPПассивныйРежим, 60);		
		ТекстСообщения = НСтр("ru='Подключение к FTP-серверу выполнено успешно';uk='Підключення до FTP-сервера виконано успішно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка подключения. '; uk = 'Помилка підключення.'") + СтрЗаменить(ОписаниеОшибки(), "'", """") + """";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	КонецПопытки;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_FTP
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЛК

// Процедура вызывается из модуля БыстраяНастройка.
&НаКлиенте 
Процедура ВнешнийВызовЛКЗагрузитьКаналыОбмена() Экспорт
	
	ЛКЗагрузитьДанные("КаналыОбмена", Истина); // результат вернется через оповещение "АПЛКОповещение" с источником "БыстраяНастройка"
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьДанные(ВидДанных, БыстраяНастройка = Ложь)

	Модуль = ЛКЗагрузитьМодуль();
	Модуль.ВнешнийВызовЗагрузитьДанныеИзЛК(ВидДанных, БыстраяНастройка); // Процедура возвращает результат через оповещение "АПЛКОповещение".
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиОбменаПродолжить(КаналОбмена, БыстраяНастройка)
	//ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена);

	Если КаналОбмена.ExchangeWay = "FTP" Тогда
		Объект.СпособОбмена = "FTP";
	ИначеЕсли КаналОбмена.ExchangeWay = "SOD" Тогда
		Объект.СпособОбмена = "АПСОД";
	Иначе
		Текст = НСтр("ru='Из ЛК получен неизвестный способ обмена данными (""%1""). Вероятно, используется устарешвая версия обработки обмена данными. Обратитесь в техническую поддержку компании ""Агент Плюс"".';uk='З ОК отриманий невідомий спосіб обміну даними ( ""%1""). Ймовірно, використовується устарешвая версія обробки обміну даними. Зверніться в технічну підтримку компанії ""Агент Плюс"".'");
		Текст = СтрШаблон_(Текст, КаналОбмена.ExchangeWay);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Если БыстраяНастройка Тогда
			стррПараметры = Новый Структура("ЕстьОшибки,Описание", Истина, Текст);
			Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", стррПараметры); // в параметре возвращаем описание ошибки, чтобы закрепить его в ТЗ статуса быстрых настроек
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	Если Объект.СпособОбмена = "FTP" Тогда
		Объект.FTPАдрес 		= КаналОбмена.Host;
		Объект.FTPПользователь  = КаналОбмена.Login;
		Объект.FTPПароль    	= КаналОбмена.Password;
		Объект.FTPПассивныйРежим= КаналОбмена.IsPassiveConnection;
		Объект.FTPКаталогСервера= КаналОбмена.CompanyFTPFolder;
	ИначеЕсли Объект.СпособОбмена = "АПСОД" Тогда
		Объект.СОДАдрес 		= КаналОбмена.Host;
		Объект.СОДПорт 			= КаналОбмена.Port;
	КонецЕсли; 
	
	Если БыстраяНастройка Тогда
		СохранитьНастройкиСервер("СпособОбмена,FTPАдрес,FTPПользователь,FTPПароль,FTPПассивныйРежим,FTPКаталогСервера,СОДАдрес,СОДПорт");
		Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", Неопределено);
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьВидНастроекОбмена();
	
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Из ЛК успешно получены настройки обмена данными.';uk='З ОК успішно отримані налаштування обміну даними.'"));
	
КонецПроцедуры	

&НаСервере
Процедура ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена)
	ЗначениеВФайл("D:\Bak\Channels.dat", КаналыОбмена);
КонецПроцедуры	

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиПродолжить(СтррПараметры)
	
	ТолькоНастройкиОбмена = СтррПараметры.ДополнительныйПараметр;
	
	// Имя скачанного файла настроек в СтррПараметры.ИмяФайлаНастроек
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтррПараметры.ИмяФайлаНастроек));
	СтррРезультат = ЗагрузитьНастройкиИзВХ(Адрес, ТолькоНастройкиОбмена);
	ВывестиСообщения(стррРезультат, Ложь);	
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Текст = НСтр("ru='Обнаружены ошибки при чтении значений настроек. Новые настройки не загружены.';uk='Виявлено помилки при читанні значень параметрів. Нові налаштування не завантажені.'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	ИначеЕсли СтррРезультат.ВсегоИзменений = 0 Тогда
		Текст = НСтр("ru='Значения загруженных настроек не отличаются от текущих.';uk='Значення завантажених налаштувань не відрізняються від поточних.'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	// Сюда попадаем, когда загружены новые настройки 
	
	УстановитьМодифицированостьФормы(Истина);
	
	Если ТолькоНастройкиОбмена Тогда
		ОбновитьВидНастроекОбмена();
	Иначе
		ОбновитьВидНастроекОбмена();
		ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЛКВыгрузитьНастройкиВФайлСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект), Истина);

КонецФункции

&НаКлиенте
Функция ЛКЗагрузитьМодуль()
	
	Если МодульЛК = Неопределено Тогда
		МодульЛК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "ЛичныйКабинет", , ЭтаФорма);
	КонецЕсли; 
	
	Возврат МодульЛК;

КонецФункции

// СлужебныеПроцедурыИФункции_ЛК
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти