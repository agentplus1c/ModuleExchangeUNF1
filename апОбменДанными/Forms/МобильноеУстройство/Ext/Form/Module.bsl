#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//       Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррРеквизиты = ЭтаФорма.Параметры.СтррРеквизиты; // реквизиты МУ для передачи в родительскую форму и между клиентом и сервером
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтррРеквизиты);
	ИдентификаторМУПредставление = Строка(ИдентификаторМУ);
	
	ЛК_IdentifierПредставление 	= Строка(ЛК_Identifier);
	ЛК_MDMIdПредставление 		= Строка(ЛК_MDMId);
	ЛК_HardwareIdПредставление 	= Строка(ЛК_HardwareId);
	
	ЭтаФорма.Заголовок = НСтр("ru='Мобильное устройство';uk='Мобільний пристрій'");
	Если Не ЗначениеЗаполнено(СтррРеквизиты.ID) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (" +НСтр("ru='Создание';uk='Створення'") + ")";
	КонецЕсли;
	
	Оповестить("АППроверкаРедактированияНастроекАгентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Значение = Параметр;
	
	Если ИмяСобытия = "АПМобильныеУстройстваОтвет" Тогда // оповещение, отправленное из модуля формы МобильныеУстройства.
		
		Если Не ЗначениеЗаполнено(Значение.ПолеОшибки) Тогда // ошибок нет
			ЭтаФорма.Модифицированность = Ложь;
			Закрыть();
		Иначе
			Поле = ?(Значение.ПолеОшибки = "ИдентификаторМУ", "ИдентификаторМУПредставление", Значение.ПолеОшибки);
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Сообщение,, Поле);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АПНастройкиАгентовРедактируются" Тогда // ответ на запрос "АППроверкаРедактированияНастроекАгентов" 
		// Если Параметр = Истина, то настройки агентов сейчас редактируются, поэтому блокируем изменение Пользователя на форме.
		Элементы.Сотрудник.Доступность = Не Параметр;
		Если Не Элементы.Сотрудник.Доступность Тогда // настройки агентов сейчас редактируются
			Элементы.Сотрудник.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
			Элементы.Сотрудник.Подсказка = НСтр("ru='Настройки агентов сейчас редактируются, агента изменить нельзя.';uk='Налаштування агентів зараз редагуються, агента змінити не можна.'");
		Иначе // разрешаем изменять сотрудника
			Элементы.Сотрудник.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			Элементы.Сотрудник.Подсказка = НСтр("ru='Агент, закрепленный за мобильным устройством.';uk='Агент, закріплений за мобільним пристроєм.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекстОшибки = "";
	ОчиститьСообщения();
	
	Наименование = СокрЛП(Наименование); // для исключения совпадений наименований без крайних пробелов
	
	Если ПустаяСтрока(Наименование) Тогда
		ТекстОшибки = НСтр("ru='Заполните наименование.';uk='Заповніть найменування.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Наименование");
	КонецЕсли;
	
	Если Не ЭтоПравильныйИдентификатор(ИдентификаторМУПредставление, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ИдентификаторМУПредставление");
	КонецЕсли;

	Если ПустаяСтрока(ТекстОшибки) Тогда // ошибок нет, оповещяем родительское окно о готовности записать МУ
		
		ИдентификаторМУ = Новый УникальныйИдентификатор(ИдентификаторМУПредставление);
		Если Не ЗначениеЗаполнено(ID) Тогда // значит добавляем новый МУ
			ID = Новый УникальныйИдентификатор;
			ДатаРегистрации = ТекущаяДата();
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(СтррРеквизиты, ЭтаФорма);
	
		Оповестить("АПМобильноеУстройствоПопыткаЗаписать", СтррРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаОК(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция проверяет строку представления идентификатора GUID на соответствие формату GUID.
// 
// Параметры:
//  GUID - Строка - представление идентификатора GUID;
//  ОписаниеОшибки - Строка - параметр для возврата описания ошибки.
//
// Возвращаемое значение:
//   Истина - если идентификатор правильный, иначе Ложь.
//   В параметре ОписаниеОшибки возвращается описание ошибки.
//
&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоПравильныйИдентификатор(GUID, ОписаниеОшибки)
	
	GUID = ВРег(СокрЛП(GUID));
	Если СтрДлина(GUID) <> 36 Тогда
		ОписаниеОшибки = СтрШаблон_(НСтр("ru='Длина идентификатора должна быть 36 символов, длина текущего: %1 симв.';uk='Довжина ідентифікатора повинна бути 36 символів, довжина поточного: %1 симв.'"), СтрДлина(GUID));
		Возврат Ложь;
	ИначеЕсли 0 <> Найти(GUID, " ") Тогда
		ОписаниеОшибки = НСтр("ru='Значение идентификатора вводится без знаков ""Пробел"".';uk='Значення ідентифікатора вводиться без знаків ""Пропуск"".'");
		Возврат Ложь;
	КонецЕсли;
	
	// Заменяем кирилические на латинские символы (бывает и такое)
	Для Поз = 1 По 8 Цикл
		GUID = СтрЗаменить(GUID, Сред("АБВСДЕФЦ", Поз, 1), Сред("ABBCDEFC", Поз, 1));
	КонецЦикла;

	GUID0 = GUID;
	Для Поз = 1 По 15 Цикл
		GUID0 = СтрЗаменить(GUID0, Сред("123456789ABCDEF", Поз, 1), "0");
	КонецЦикла;
	
	Если GUID0 <> "00000000-0000-0000-0000-000000000000" Тогда
		НедопустимыеСимволы = СтрЗаменить(СтрЗаменить(GUID0, "0", ""), "-", "");
		ОписаниеОшибки = СтрШаблон_(НСтр("ru='Недопустимые символы: %1.';uk='Неприпустимі символи:%1.'"), НедопустимыеСимволы);
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Введите идентификатор в формате XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX, где вместо ""X"" указываются цифры 0-9 и символы A-F (или a-f).';uk='Введіть ідентифікатор в форматі XXXXXXXXXXXX-XXXXXXXX-XXXXXXXXXXXX, де замість ""X"" вказуються цифри 0-9 і символи A-F (або a-f).'");
		Возврат Ложь;
	ИначеЕсли GUID = GUID0 Тогда
		ОписаниеОшибки = НСтр("ru='Запрещено использование нулевого идентификатора.';uk='Заборонено використання нульового ідентифікатора.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПолучитьКоличествоАгентов() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала добавьте новых агентов в окне ""Настройки агентов"".';uk='Спочатку додайте нових агентів у вікні ""Налаштування агентів"".'"));	
	Иначе
		стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Сотрудник", Сотрудник));
		Оповещение = Новый ОписаниеОповещения("СотрудникВыборЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборАгента", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудник = Результат;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоАгентов()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗ = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	
	Возврат ?(ТипЗнч(ТЗ) = Тип("ТаблицаЗначений"), ТЗ.Количество(), 0);
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции
#КонецОбласти