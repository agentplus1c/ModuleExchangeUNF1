
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем гМодульК;    // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Повторно,КаталогИконок,ЗначениеБезТочности,КартаЦентр,Маркеры");
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	МаркерыЗаполнить(Параметры.Маркеры);
	
	СтррКонтекст.Повторно = Ложь;
	
	СтррКонтекст.КартаЦентр = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	СтррКонтекст.КаталогИконок = ТекОбъект.ПолучитьВебКаталогИконок();
	
	СтррМаркер = Новый Структура("Широта,Долгота", 0, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	ОбновитьЗаголовокФормы();
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	КартаОбновитьТекущийМакет();
	
	КартаОбновитьМаркеры(СтррКонтекст.Маркеры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытиЭлементовФормы

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераДокументСформирован(Элемент)

	#Если ВебКлиент Тогда
		СисИнфо = Новый СистемнаяИнформация;
		Если Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") = 0 Тогда
			Документ = Элементы.ПолеБраузера.document;
			HTMLWindow = ?(Документ.parentWindow <> Неопределено, Документ.parentWindow, Документ.defaultView);
			HTMLWindow.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", СтррКонтекст.КартаЦентр);
		КонецЕсли;
	#КонецЕсли 
	
	Таймер_Включить("ДобавитьМаркер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Источник = ДанныеСобытия.Button;
	
	Если Источник.id <> "ClickEvent" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Источник.apObjectType <> "map" Тогда
		Возврат;
	КонецЕсли;
	
	мКоординаты = СтрРазделить_(Источник.apValue);
	Если мКоординаты.Количество() <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Широта  = СтрокуВЧисло(мКоординаты[0]);
	Долгота = СтрокуВЧисло(мКоординаты[1]);
	
	// кликом по карте указаны новые координаты маркера
	стррМаркер.Широта  = Широта;
	стррМаркер.Долгота = Долгота;
	
КонецПроцедуры

// ОбработчикиСобытиЭлементовФормы
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте 
Процедура ОбновитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = НСтр("ru='Карта';uk='Карта'") 
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВнешнийВызовДобавитьИПоказатьМаркеры(стррПараметры) Экспорт
	
	КартаОбновитьМаркеры(стррПараметры.Маркеры);

КонецПроцедуры

&НаСервере
Процедура МаркерыЗаполнить(мМаркеры)
	
	тзМаркеры.Очистить();
	Для каждого Маркер Из мМаркеры Цикл
		СтрокаТ = тзМаркеры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТ, Маркер);
		СтрокаТ.Иконка = МаркерПолучитьИконку(СтрокаТ.ВидМаркера);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаркерПолучитьИконку(ВидМаркера)
	
	Если ВидМаркера = "Документ" Тогда
		Возврат "tpcheknp.png";
	ИначеЕсли ВидМаркера = "Партнер" Тогда
		Возврат "tpnochek.png";
	Иначе
		Возврат "tpcheck.png";
	КонецЕсли; 
	
КонецФункции

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты

#Область СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоординатNMEA(Широта, Долгота)

	Если Широта = 0 И Долгота = 0 Тогда
		Возврат "";
	Иначе
		Возврат Строка(Широта) + "; " + Строка(Долгота);			
	КонецЕсли; 

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

&НаКлиенте
Процедура КартаОбновитьТекущийМакет()
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объектами?).
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);
	
	#Если Не ВебКлиент Тогда
		Документ = Элементы.ПолеБраузера.Document;	
		
		КартаЗагрузитьМакет(Документ, ТекстМакета);
		
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		
		ПоказатьМаркер = СтррМаркер.Широта <> 0 И тзМаркеры.Количество() <> 0;
		
		стррЦентр = ?(ПоказатьМаркер, СтррМаркер, СтррКонтекст.КартаЦентр); // если маркер еще не использовался, показываем центр карты
		
		//передаем параметр, показывающий, что файл скрипта используется для Редактора маршрута		
		ОкноБраузера.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", стррЦентр);
	#Иначе
		ТекстСкрипта = ТекстМакета;
	#КонецЕсли
	
КонецПроцедуры

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			ТекстСкрипта = ТекстМакета;
		КонецПопытки;
	КонецПопытки; 
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   стррЦентр.Широта 	- широта для позиционирования центра карты
//   стррЦентр.Долгота  - долгота для позиционирования центра карты
//
//  Возвращаемое значение:
//   РежимРедактора - Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, стррЦентр = Неопределено) Экспорт
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") И стррЦентр.Свойство("Широта") Тогда
		стрШирота  = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Широта));
		стрДолгота = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Долгота));
	Иначе
		стрШирота  = "0";
		стрДолгота = "0";
	КонецЕсли; 
	
	Возврат стрШирота + "@" + стрДолгота + "@" + РежимРедактора;	
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_Карты_Маркер

&НаКлиенте
Процедура КартаПерейтиКМаркеру(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Широта 	= СтррМаркер.Широта;
	Долгота = СтррМаркер.Долгота;
	
	Если Не УстановитьТаймер Тогда 
		ОкноБраузера.GoToMarker(Широта, Долгота);
	Иначе
		Попытка
			ОкноБраузера.GoToMarker(Широта, Долгота);
		Исключение
			Таймер_Включить("ПерейтиКМаркеру");	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет на карту маркеры из массива Маркеры.
// Используется в режиме "показать только карту" (когда СтррКонтекст.ПоказатьТолькоКарту = Ложь).
&НаКлиенте
Процедура КартаДобавитьМаркеры(УстановитьТаймер = Ложь)
	
	Если тзМаркеры.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Описание 		= "";
	Подвал 			= "";
	Подсказка 		= "";
	Порядок  		= "";
	
	ПутьИконок = СтррКонтекст.КаталогИконок;
	ПервыйМаркер = тзМаркеры[0];
	стррМаркер.Широта  = ПервыйМаркер.Широта; 
	стррМаркер.Долгота = ПервыйМаркер.Долгота; 
	
	Попытка 
		
		Документ 		= Элементы.ПолеБраузера.Document;		
		ОкноБраузера 	= Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		
		ОкноБраузера.ClearCollection();
		
		Для Каждого Маркер Из тзМаркеры Цикл
			ОкноБраузера.setMarker(Маркер.Широта, Маркер.Долгота, ПутьИконок + Маркер.Иконка, Маркер.Заголовок, Маркер.Описание, Подвал, Подсказка, Порядок, Ложь);			
		КонецЦикла; 
		
	Исключение
		
		Если УстановитьТаймер Тогда 
			Таймер_Включить("ДобавитьМаркеры");	
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При построении карты произошла ошибка. Возможно, карта не загружена.'; uk = 'При побудові карти сталася помилка. Можливо, карта не завантажена.'"));
		КонецЕсли;	
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаОбновитьМаркеры(мМаркеры)
	
	МаркерыЗаполнить(мМаркеры);
	КартаДобавитьМаркеры(Истина);
	КартаПерейтиКМаркеру(Истина);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Маркер
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты_Таймер

// Процедура включает таймер обработки очереди событий для поля браузера, 
// при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
// Также должен быть объявлен реквизит формы ТаймерОжидания.
// Реквизит формы "ТаймерОжидания" используется для организациии очереди передачи команд в поле браузера, 
// т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
&НаКлиенте
Процедура Таймер_Включить(Событие)
	Если ТипЗнч(ТаймерОжидания) <> Тип("Структура") Тогда // реквизит еще не инициализировался
		ТаймерОжидания = Новый Структура("Включен,Очередь,Время", Ложь);
		ТаймерОжидания.Очередь = Новый Массив; // стэк событий для взаимодействия с полем браузера (обрабатывается в порядке добавления событий) 
	КонецЕсли;
	Если ТаймерОжидания.Очередь.Найти(Событие) = Неопределено Тогда
		ТаймерОжидания.Очередь.Добавить(Событие);
		ТаймерОжидания.Время = ТекущаяДата();
	КонецЕсли;
	Если Не ТаймерОжидания.Включен Тогда
		ТаймерОжидания.Включен = Истина;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_Обработчик()
	
	Если ТекущаяДата() - ТаймерОжидания.Время > 5 Тогда // время с момента постановки события в очередь привысило 5 секунд - прекращаем обрабатывать все события
		Таймер_Выключить(Истина);
	КонецЕсли;
	Событие =  ТаймерОжидания.Очередь[0];
	Попытка
		Если Событие = "ДобавитьМаркеры" Тогда
			КартаДобавитьМаркеры();
		ИначеЕсли Событие = "ПерейтиКМаркеру" Тогда
			КартаПерейтиКМаркеру();
		ИначеЕсли Событие = "КартаОбновитьТекущийМакет" Тогда
			КартаОбновитьТекущийМакет();
		ИначеЕсли Лев(Событие, 1) = "!" Тогда // событие - строка кода для выполнения
			Выполнить(Сред(Событие, 2) + ";");
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Таймер_Выключить(Ложь);
	
КонецПроцедуры

// Процедура выключает таймер обработки очереди событий для поля браузера, 
// или удаляет из очереди первое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
&НаКлиенте
Процедура Таймер_Выключить(Знач ВыключитьДляВсехСобытий)
	Если Не ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Очередь.Удалить(0);
		Если ТаймерОжидания.Очередь.Количество() = 0 Тогда
			ВыключитьДляВсехСобытий = Истина;
	    КонецЕсли;
	КонецЕсли;
	Если ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Включен = Ложь;
		ОтключитьОбработчикОжидания("Таймер_Обработчик");
	КонецЕсли;
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Таймер
#КонецОбласти

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
