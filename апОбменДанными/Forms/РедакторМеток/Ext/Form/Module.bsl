
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Повторно,КаталогИконок,ПрежниеЗначенияСтроки,ЗначениеБезТочности,КартаЦентр,РежимВыбораЦентраКарты,КоличествоМиганий,ОткрытыеКонтрагенты");
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.Повторно = Ложь;
	
	СтррКонтекст.РежимВыбораЦентраКарты	= Ложь; // интерактивный режим выбора центра карты
	СтррКонтекст.КартаЦентр = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	СтррКонтекст.КоличествоМиганий = 0; //количество миганий координат в поле "КонтрагентыКоординаты" после интерактивного изменения
	СтррКонтекст.КаталогИконок = ТекОбъект.ПолучитьВебКаталогИконок();
	
	СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура("Контрагент,ИдентификаторСтроки"); // для восстановления значения строки элемента "Контрагенты"
	СтррКонтекст.ЗначениеБезТочности = 99; // чтобы при интерактивной сортировке по точности определения координат строки без точности были в конце таблицы
	
	СтррКонтекст.ОткрытыеКонтрагенты = Новый Массив;
	
	СтррМаркер = Новый Структура("Широта,Долгота,Заголовок", 0, 0, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	Если СтррКонтекст.КартаЦентр = Неопределено Тогда
		СохранитьЦентрКартыКлиент(МодульКарты.ПолучитьКоординатыПользователя());
	Иначе
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
	МодульКарты.УстановитьРегионГеокодера(СтррКонтекст.КартаЦентр); // для точности геокодирования
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	КартаПереключитьРежимВыбораКоординат();
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	ПроверитьГотовностьДополнительныхРеквизитов();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	КартаОбновитьТекущийМакет();
	
	ОбновитьФлажокТолькоСПустымиКоординатами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Параметр ИсточникВыбора принимает значение "ПриОткрытииФормы", если добавление контрагентов вызвано извне 
// (при открытии или повторном открытии формы).
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		ВызватьИсключение(НСтр("ru = 'Не предусмотренное значение для подбора в форму: '; uk = 'Не передбачене значення для підбору в форму: '") + ВыбранноеЗначение);
	КонецЕсли; 
	
 	мНовыеКонтрагенты = Новый Массив; // массив добавленных контрагентов во время подбора
	СтрокаТ = Неопределено;
	НачальнаяСтрока = Контрагенты.Количество();
	
	ПроверятьНаПустыеКоординаты = Элементы.КонтрагентыПризнакТолькоСПустымиКоординатами.Пометка;
	
	БезТочности = СтррКонтекст.ЗначениеБезТочности;
	ВыбранаОднаСтрока = (ВыбранноеЗначение.Количество() = 1);
	
	// подбор контрагентов
	Для каждого Контрагент Из ВыбранноеЗначение Цикл
		
		мСтроки = Контрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
		Если мСтроки.Количество() > 0 Тогда // в таблице уже есть такой контрагент
			Если ВыбранаОднаСтрока Тогда
				СтрокаТ = мСтроки[0]; // выделяем найденную строку:
				ПоказатьПредупреждение(, НСтр("ru='Данный контрагент уже выбран.';uk='Даний контрагент вже обраний.'"));
				Прервать;
			Иначе
				Текст = СтрШаблон_(НСтр("ru='Пропущен Контрагент ""%1"" т.к. он уже выбран.';uk='Пропущений Контрагент ""%1"" тому що він вже обраний.'"), Контрагент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не ПроверятьНаПустыеКоординаты Тогда // сразу добавляем контрагентов в таблицу формы, иначе контрагенты будут проверены на пустые координаты
			СтрокаТ = Контрагенты.Добавить();
			СтрокаТ.Контрагент  = Контрагент;
			СтрокаТ.Точность = БезТочности;
		КонецЕсли;
		мНовыеКонтрагенты.Добавить(Контрагент);
	
	КонецЦикла;
	
	// устанавливаем текущую строку
	СтрокаТ = ?(ИсточникВыбора = "ПриОткрытииФормы" И Контрагенты.Количество() > 0, Контрагенты[0], СтрокаТ);
	Если СтрокаТ <> Неопределено Тогда
		Элементы.Контрагенты.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();	
	КонецЕсли; 		
	
	Если мНовыеКонтрагенты.Количество() <> 0 Тогда
		//vd12121
		КоличествоПередДобавлением = мНовыеКонтрагенты.Количество();
		ОбновитьКоординатыКонтрагентов(мНовыеКонтрагенты, НачальнаяСтрока, Ложь, ПроверятьНаПустыеКоординаты);			
		ОбновитьАдресаКонтрагентов(мНовыеКонтрагенты, НачальнаяСтрока, Ложь);
		
		Если КоличествоПередДобавлением <> мНовыеКонтрагенты.Количество() И ПроверятьНаПустыеКоординаты Тогда
			Если КоличествоПередДобавлением = 1 Тогда
				Текст = НСтр("ru='У контрагента указаны координаты';uk='У контрагента вказані координати'");
			ИначеЕсли мНовыеКонтрагенты.Количество() = 0 Тогда
			    Текст = НСтр("ru='Все выбранные контрагенты с заполненными координатами';uk='Всі вибрані контрагенти з заповненими координатами'");
			Иначе
				Текст = НСтр("ru='Были исключены контрагенты с заполненными координатами';uk='Були виключені контрагенти з заповненими координатами'");
			КонецЕсли; 
			ПоказатьПредупреждение(, Текст + " " + НСтр("ru='(включен режим подбора только для контрагентов с пустыми координатами).';uk='(Включений режим підбору тільки для контрагентів з порожніми координатами).'"));
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОпределитьКоординатыПоАдресу(Команда)
	
	ОпределитьКоординатыПоАдресу();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьКоординатыКлиент();

КонецПроцедуры

#Область ОбработчикиКомандФормы_КонтрагентыКонтекстноеМеню

&НаКлиенте
Процедура КомандаСнятьПризнакИзмененияКоординат(Команда)

	УстановитьПризнакИзмененияКоординат(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПризнакИзмененияКоординат(Команда)
	
	УстановитьПризнакИзмененияКоординат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоТочностиКоординат(Команда)
	Контрагенты.Сортировать("Точность,Контрагент");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ПодборКонтрагентов

&НаКлиенте
Процедура КомандаПодборКонтрагентовИзСправочника(Команда)
	
	//унф переделан на контрагентов
	
	СтррПараметры = Новый Структура;	
	СтррПараметры.Вставить("ЗакрыватьПриВыборе", Ложь); 
	СтррПараметры.Вставить("МножественныйВыбор", Истина);
	СтррПараметры.Вставить("РежимВыбора"	   , Истина);
		
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", СтррПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКонтрагентовИзСпискаТТ(Команда)
	
	СтррПараметры  = Новый Структура("ID,ДляВыбора", Неопределено, Истина);
	Если ЭтаФорма.КлючУникальности = Неопределено Тогда
		ЭтаФорма.КлючУникальности = Новый УникальныйИдентификатор;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СписокТорговыхТочекВыборЗавершение", ЭтотОбъект, Неопределено);
	МодульК().ОткрытьФормуОбработки("СпискиТорговыхТочек", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВсехКонтрагентов(Команда)
	
	Если Контрагенты.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ДобавитьВсехКонтрагентовПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Перед добавленинем всех контрагентов таблица будет очищена. Продолжить?';uk='Перед добавленінем всіх контрагентів таблиця буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		КонтрагентыДобавитьВсехКонтрагентовКлиент();
	КонецЕсли; 
	
КонецПроцедуры

// Сохранение измененных координат для Контрагентов с признаком КоординатыИзменены.
&НаКлиенте
Процедура ДобавитьВсехКонтрагентовПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КонтрагентыДобавитьВсехКонтрагентовКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПризнакТолькоСПустымиКоординатами(Команда)
	
	ТолькоСПустымиКоординатами = Не ТолькоСПустымиКоординатами;
	ОбновитьФлажокТолькоСПустымиКоординатами();
	
КонецПроцедуры

// ОбработчикиКомандФормы_ПодборКонтрагентов
#КонецОбласти 

&НаКлиенте
Процедура КомандаУказатьЦентрКарты(Команда)
	
	СтррПараметры = Неопределено;
	Оповещение = Новый ОписаниеОповещения("КомандаУказатьЦентрКартыПродолжить", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборЦентраКарты", СтррПараметры,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьЦентрКартыПродолжить(Центр, ДополнительныеПараметры) Экспорт
	
	Если Центр <> Неопределено Тогда
		
		Если ТипЗнч(Центр) = Тип("Структура") Тогда
			
			СохранитьЦентрКартыКлиент(Центр);
			ЗаполнитьЗначенияСвойств(СтррМаркер, Центр);
			КартаПерейтиКМаркеру(Истина);
			КартаДобавитьМаркер(Истина);
			
		ИначеЕсли Центр = "ВыбратьНаКарте" Тогда // включаем режим выбора центра на карте
			
			КартаПереключитьРежимВыбораКоординат(Истина, Истина);
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытиЭлементовФормы

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	//(( sk_191129 Пересоздаем ПолеБраузера, если не используем WebKit в рамках (MOD-977) 
	Если Не МодульКарты.ИспользоватьWebKit() Тогда
		УдалитьПолеБраузера();
		СоздатьПолеБраузера();
	КонецЕсли;
	//)) sk_191129

	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераДокументСформирован(Элемент)

	#Если ВебКлиент Тогда
		СисИнфо = Новый СистемнаяИнформация;
		Если Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") = 0 Тогда
			Документ = Элементы.ПолеБраузера.document;
			HTMLWindow = ?(Документ.parentWindow <> Неопределено, Документ.parentWindow, Документ.defaultView);
			HTMLWindow.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", СтррКонтекст.КартаЦентр);
		КонецЕсли;
	#КонецЕсли 
	
	Таймер_Включить("ДобавитьМаркер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Если Не РежимВыбораКоординат Или ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//(( sk_191129 Получаем координаты в рамках (MOD-977)
	//Источник = ДанныеСобытия.Button;
	//
	//Если Источник.id <> "ClickEvent" Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтандартнаяОбработка = Ложь;
	//Если Источник.apObjectType <> "map" Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//мКоординаты = СтрРазделить_(Источник.apValue);
	//Если мКоординаты.Количество() <> 2 Тогда
	//	Возврат;
	//КонецЕсли;
		Если МодульКарты.ИспользоватьWebKit() Тогда
		ДанныеОперации = ДанныеСобытия.Document.documentElement.childNodes[2].childNodes; 
		Для Каждого СтрокаДанныхОперации Из ДанныеОперации Цикл
			Если СтрокаДанныхОперации.id = "ClickEvent" Тогда
				стрКоординаты = СтрокаДанныхОперации["apValue"];	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Источник = ДанныеСобытия.Button;
		
		Если Источник.id <> "ClickEvent" Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Если Источник.apObjectType <> "map" Тогда
			Возврат;
		КонецЕсли;
		
		стрКоординаты = Источник.apValue;
	КонецЕсли;
	
	мКоординаты = СтрРазделить_(стрКоординаты);
	//)) sk_191129
	
	Широта  = СтрокуВЧисло(мКоординаты[0]);
	Долгота = СтрокуВЧисло(мКоординаты[1]);
	
	// кликом по карте указаны новые координаты маркера
	стррМаркер.Широта  = Широта;
	стррМаркер.Долгота = Долгота;
	
	стррПараметры = Новый Структура("Широта,Долгота", Широта, Долгота);
	
	Если СтррКонтекст.РежимВыбораЦентраКарты Тогда // режим указания координат для центра карты
		Оповещение = Новый ОписаниеОповещения("ЗапомнитьНовыеКоординатыЦентраКартыПродолжить", ЭтотОбъект, стррПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru='Запомнить новые координаты центра карты?';uk=""Запам'ятати нові координати центру карти?"""), РежимДиалогаВопрос.ДаНетОтмена);
		// пока еще не показан вопрос, определим по координатам город
		стррЦентр = Новый Структура("Широта,Долгота", стррПараметры.Широта, стррПараметры.Долгота);
		стррПараметры.Вставить("Город", МодульКарты.ПолучитьАдресПоКоординатамОтВебСервиса(стррЦентр, Истина));
	ИначеЕсли КонтрагентыУстановитьНовыеКоординатыДляТекущегоКонтрагента(стррПараметры, Ложь) Тогда // режим указания координат для текущего контрагента
		МигатьКоординатами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНовыеКоординатыЦентраКартыПродолжить(РезультатОтвета, стррПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КартаПереключитьРежимВыбораКоординат(Ложь);
		СохранитьЦентрКартыКлиент(стррПараметры); // запоминаем центр карты в хранилище
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		КартаПереключитьРежимВыбораКоординат(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораКоординатПриИзменении(Элемент)
	
	КартаПереключитьРежимВыбораКоординат();
	
КонецПроцедуры

// ОбработчикиСобытиЭлементовФормы
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагента

&НаКлиенте
Процедура КонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриИзменении(Элемент)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	
	Если СтрокаТ <> Неопределено Тогда
		
		ЭлементИмя = Элемент.ТекущийЭлемент.Имя;
			
		Если ЭлементИмя = "КонтрагентыШирота" Или ЭлементИмя = "КонтрагентыДолгота" Тогда
			
			СтрокаТ.КоординатыИзменены = Истина;
			УстановитьМодифицированостьФормы(Истина);
			
		ИначеЕсли ЭлементИмя = "КонтрагентыКоординатыИзменены"  Тогда			
			
			Если СтрокаТ.КоординатыИзменены Тогда
				УстановитьМодифицированостьФормы(Истина);
			КонецЕсли; 
			
		КонецЕсли;

	КонецЕсли; // Если СтрокаТ <> Неопределено
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	//унф переделано на контрагентов
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;

	// Проверяем, не выбрали ли контрагента, который уже есть в таблице
	Если ЗначениеЗаполнено(СтрокаТ.Контрагент) Тогда
		мСтроки = Контрагенты.НайтиСтроки(Новый Структура("Контрагент", СтрокаТ.Контрагент));
		Если мСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть два таких контрагента
			Текст = СтрШаблон_(НСтр("ru='Контрагент ""%1"" уже присутствует в таблице.';uk='Контрагент ""%1"" вже присутній в таблиці.'"), СтрокаТ.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Контрагенты[" + СтрокаТ.ПолучитьИдентификатор() + "]");
			// восстанавливаем прежнее значение контрагента
			ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
			Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
				СтрокаТ.Контрагент = ПрежниеЗначения.Контрагент;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
			СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ПроставитьАдресИКоординатыКонтрагента(Контрагенты.Индекс(СтрокаТ));// Элементы.Контрагенты.ТекущаяСтрока - возвращает другой индекс после сортировки таблицы
	Элементы.Контрагенты.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	//унф перделана на контрагентов
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ = Неопределено Или Не ЗначениеЗаполнено(СтрокаТ.Контрагент) Тогда
		Возврат;
	КонецЕсли; 
	Если СтррКонтекст.ОткрытыеКонтрагенты.Найти(СтрокаТ.Контрагент) = Неопределено Тогда
		СтррКонтекст.ОткрытыеКонтрагенты.Добавить(СтрокаТ.Контрагент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	
	//унф переделана на контрагентов
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем некоторые знаечения текущей строки на случай, если потребуется восстановить прежнее значение в строке
	ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
	СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "Контрагенты" Тогда
		
		КартаПерейтиКМаркеруТекущегоКонтрагента(Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//унф переделана на контрагентов
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементИмя = Элемент.ТекущийЭлемент.Имя;
	
	Если ЭлементИмя = "КонтрагентыКоординаты" Тогда
		
		стррПараметры = Новый Структура("Широта,Долгота", СтрокаТ.Широта, СтрокаТ.Долгота);
		
		Оповещение = Новый ОписаниеОповещения("КонтрагентыВыборКоординатЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборКоординат", Новый Структура("Значения", стррПараметры),, Оповещение);
		
	ИначеЕсли ЭлементИмя = "КонтрагентыАдресКоординат" Или ЭлементИмя = "КонтрагентыТочность" Тогда
		
		ОпределитьКоординатыПоАдресу(Истина);
		
	ИначеЕсли ЭлементИмя = "КонтрагентыАдрес" Тогда
		//унф доработка, открытие карточки контрагента
		//Оповещение = Новый ОписаниеОповещения("КонтрагентыВыборКоординатЗавершение", ЭтотОбъект);
		//МодульК().ОткрытьФормуОбработки("ВыборКоординат", Новый Структура("Значения", стррПараметры),, Оповещение);
		
		//стррПараметры = Новый Структура;
		//стррПараметры.Вставить("РежимВыбора",      	Истина);
		//стррПараметры.Вставить("МножественныйВыбор", 	Истина);	
		//стррПараметры.Вставить("ВыборГрупп", 			Ложь);
		//стррПараметры.Вставить("ЗакрыватьПриВыборе", 	Истина);
		//стррПараметры.Вставить("ТекущаяСтрока",    	СтррКонтекст.Сотрудник);
		//стррПараметры.Вставить("РежимОткрытияОкна", 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		стррПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Контрагент);
		Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", стррПараметры);    
		Форма.Открыть();

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыборКоординатЗавершение(стррРезультат, ДополнительныеПараметры) Экспорт
	
	//унф пережелан на контрагентов
	
	Если ТипЗнч(стррРезультат) = Тип("Структура") Тогда
		КонтрагентыУстановитьНовыеКоординатыДляТекущегоКонтрагента(стррРезультат, Истина);
		МигатьКоординатами();
	КонецЕсли;

КонецПроцедуры

// Функция устанавливает новые координаты для текущего контрагента в элементе "Контрагенты".
// Возаращает Истина, если новые координаты отличаются от старых.
&НаКлиенте
Функция КонтрагентыУстановитьНовыеКоординатыДляТекущегоКонтрагента(стррКоординаты, ФокусНаКонтрагентах)
	
	УстановленыНовыеКоординаты = Ложь;
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Точность 	= ?(СтрокаТ.Широта = 0 Или СтрокаТ.Долгота = 0, СтррКонтекст.ЗначениеБезТочности, 1); //1 - максимальная точность
		Если СтрокаТ.Широта	<> стррКоординаты.Широта Или СтрокаТ.Долгота <> стррКоординаты.Долгота Или СтрокаТ.Точность <> Точность Тогда
			УстановленыНовыеКоординаты = Истина;
		КонецЕсли; 			
		
		ЗаполнитьЗначенияСвойств(СтрокаТ, стррКоординаты, "Широта,Долгота");
		СтрокаТ.Точность = Точность;

		СтрокаТ.Координаты  = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
		СтрокаТ.КоординатыИзменены = Истина;
		УстановитьМодифицированостьФормы(Истина);
		Если ФокусНаКонтрагентах Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Контрагенты; // оставляем фокус на таблице контрагентов		
		КонецЕсли; 
	КонецЕсли;
	
	Возврат УстановленыНовыеКоординаты;
	
КонецФункции


&НаКлиенте
Процедура КонтрагентыПослеУдаления(Элемент)
	
	Если ЭтаФорма.Модифицированность И Контрагенты.Количество() = 0 Тогда // если удалены все контрагенты из формы, снимаем признак модифицированности формы
		УстановитьМодифицированостьФормы(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

&НаКлиенте
Процедура СохранитьЦентрКартыКлиент(стррЦентр)
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") Тогда
		СтррКонтекст.КартаЦентр = стррЦентр;	
		ОбновитьЗаголовокФормы();
		МодульКарты.УстановитьРегионГеокодера(стррЦентр); // для точности геокодирования
		МодульКарты.СохранитьЦентрКартыКлиент(стррЦентр);
	КонецЕсли; 
	
КонецПроцедуры	

// sk_191129 Процедура добавлена в рамках (MOD-977)
// Выполняет удаление ПолеБраузера
//
&НаСервере
Процедура УдалитьПолеБраузера()
	Элементы.Удалить(Элементы.ПолеБраузера);
КонецПроцедуры

// sk_191129 Процедура добавлена в рамках (MOD-977)
// Выполняет создание ПолеБраузера
//
&НаСервере
Процедура СоздатьПолеБраузера()
	
	Элемент = Элементы.Добавить("ПолеБраузера", Тип("ПолеФормы"), Элементы.ГруппаПраваяОбласть);
	Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	Элемент.ПутьКДанным = "ТекстСкрипта";
	Элемент.УстановитьДействие("ПолеБраузераПриНажатии");
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры


&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте 
Процедура ОбновитьЗаголовокФормы()
	
	стррЦентр = СтррКонтекст.КартаЦентр;
	ЭтаФорма.Заголовок = НСтр("ru='Редактор меток на карте';uk='Редактор міток на мапі'") 
		+ ?(ТипЗнч(стррЦентр) = Тип("Структура") И стррЦентр.Свойство("Город") И ЗначениеЗаполнено(стррЦентр.Город), " - " + стррЦентр.Город, "");
	
КонецПроцедуры
	
&НаКлиенте 
Процедура ОбновитьФлажокТолькоСПустымиКоординатами()
	
	Элементы.КонтрагентыПризнакТолькоСПустымиКоординатами.Пометка = ТолькоСПустымиКоординатами;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнийВызовДобавитьИПоказатьКонтрагентов (мКонтрагенты) Экспорт
	
	Если мКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Контрагенты.Очистить();
	ТолькоСПустымиКоординатами = Ложь; // чтобы не игнорировались контрагенты из массива, у кого заполнены координаты
	
	ОбработкаВыбора(мКонтрагенты, "ПриОткрытииФормы");

	Если СтррКонтекст.Повторно Тогда // форма открыта повторно, карта уже загружена
		КартаПерейтиКМаркеруТекущегоКонтрагента(Истина);	
	Иначе // форма открыта впервые, дожидаемся когда будет загружена карта - через отсрочку и попытку/исключение
		Таймер_Включить("!КартаПерейтиКМаркеруТекущегоКонтрагента(Истина)"); // команда не поддерживается на веб-клиенте!
	КонецЕсли; 

КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КИКонтрагентов

&НаКлиенте
Процедура УстановитьПризнакИзмененияКоординат(КоординатыИзменены)

	Если Элементы.Контрагенты.ТекущиеДанные <> Неопределено Тогда
		
		мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Контрагенты.ВыделенныеСтроки);
		// применяем действие к выделенным строкам
		Для Каждого ИдСтроки Из мСтроки Цикл
			СтрокаТ = Контрагенты.НайтиПоИдентификатору(ИдСтроки);
			СтрокаТ.КоординатыИзменены = КоординатыИзменены;
		КонецЦикла;
		
		Если КоординатыИзменены Тогда
			УстановитьМодифицированостьФормы(Истина);	
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыеКоординаты(СтрокаТ, стрКоординаты, стрАдресКоординат)
	
	СтрокаТ.АдресКоординат = стрАдресКоординат;
	мКоординаты = СтрРазделить_(стрКоординаты, " ");
	СтрокаТ.Широта   = мКоординаты[0];
	СтрокаТ.Долгота  = мКоординаты[1];
	СтрокаТ.Точность = мКоординаты[2];
	СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
	СтрокаТ.КоординатыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьАдресИКоординатыКонтрагента(ИндексСтроки)
	
	//унф изменеа на контрагентов
	
	СтрокаТ = Контрагенты[ИндексСтроки]; 
	
	Если Не ЗначениеЗаполнено(СтрокаТ.Контрагент) Тогда
		СтрокаТ.Адрес = "";
		СтрокаТ.Долгота = 0;
		СтрокаТ.Широта  = 0;
		СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);		
		СтрокаТ.Точность = СтррКонтекст.ЗначениеБезТочности;
	Иначе
		мКонтрагенты = Новый Массив;
		мКонтрагенты.Добавить(СтрокаТ.Контрагент);
		ОбновитьКоординатыКонтрагентов(мКонтрагенты, ИндексСтроки, Истина, Ложь);		
		ОбновитьАдресаКонтрагентов(мКонтрагенты, ИндексСтроки, Истина);
	КонецЕсли; 
		
КонецПроцедуры

// Процедура обновляет координаты контрагентов на форме (если параметр ИсключитьСЗаполненнымиКоординатами = Ложь).
// Если параметр ИсключитьСЗаполненнымиКоординатами установлен в Истина, то из массива мКонтрагенты
// удаляются контрагенты, у которых заполнены координаты, остальные добавляются в таблицу контрагентов на форме.
&НаСервере
Процедура ОбновитьКоординатыКонтрагентов(мКонтрагенты, НачальнаяСтрока, ВОднойСтроке, ИсключитьСЗаполненнымиКоординатами)
	
	//унф все переделано на контрагентов
	
	БезТочности = СтррКонтекст.ЗначениеБезТочности;
	
	тзКоординаты = ПолучитьТЗКоординатКонтрагентов(мКонтрагенты);
	
	СтррПоиск = Новый Структура("Ссылка");       
	
	Если ИсключитьСЗаполненнымиКоординатами Тогда // нужно добавить в ТЗ Контрагенты новые строки, иначе строки уже добавлены
		// Контрагенты еще не включены в таблицу Контрагенты на форме.
		// Исключаем из мКонтрагенты тех, у кого есть координаты. В тзКоординаты у нас сейчас те контрагенты, у кого заполнены координаты.		
		// Остальных Контрагентов добавляем на форму.
		НачальнаяСтрока = Контрагенты.Количество();
		мДобавленныеКонтрагенты = Новый Массив;
		Для каждого Контрагент Из мКонтрагенты Цикл
			СтррПоиск.Ссылка = Контрагент;
			мСтроки = тзКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() = 0 Тогда // добавбяем нового контрагента на форму
				СтрокаТ = Контрагенты.Добавить();
				СтрокаТ.Контрагент = Контрагент;
				СтрокаТ.Точность   = БезТочности;
				мДобавленныеКонтрагенты.Добавить(Контрагент);
			КонецЕсли; 
		КонецЦикла;
		мКонтрагенты = мДобавленныеКонтрагенты; // оставляем в массиве мКонтрагенты только контрагентов с пустыми координатами
		
	ИначеЕсли НачальнаяСтрока = 0 И Не ВОднойСтроке Тогда // обновляем координаты для всей таблицы контрагентов на форме
		// Конетрагенты уже включены в таблицу Контрагенты на форме.
		Для каждого СтрокаТ Из Контрагенты Цикл
			СтррПоиск.Ссылка = СтрокаТ.Контрагент;
			мСтроки = тзКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() > 0 Тогда
				СтрокаТ.Широта  = мСтроки[0].Широта;
				СтрокаТ.Долгота = мСтроки[0].Долгота;

				//унф адрессконтрагента
				//Если значениеЗаполнено(мСтроки[0].Адрес) Тогда
					СтрокаТ.АдресКоординат = мСтроки[0].Адрес;
				//Иначе
				//	СтрокаТ.АдресКоординат = РеквизитФормыВЗначение("Объект").ПолучитьАдресКонтрагента(СтрокаТ.Контрагент);
				//КонецЕсли;
				
			Иначе
				СтрокаТ.Широта  = 0;
				СтрокаТ.Долгота = 0;
				СтрокаТ.АдресКоординат = "";
			КонецЕсли;
			СтрокаТ.Точность = БезТочности;
			СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
			СтрокаТ.КоординатыИзменены = Ложь;
		КонецЦикла; 
		
	Иначе // обновляем координаты для контрагентов начиная с указанной строки таблицы контрагентов на форме и ниже
		// Контрагенты уже включены в таблицу Контрагенты на форме.
		ПоследняяСтрока = ?(ВОднойСтроке, НачальнаяСтрока, Контрагенты.Количество() - 1);
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Контрагенты[НомерСтроки]; //Конетрагенты.НайтиПоИдентификатору(НомерСтроки); 
			СтррПоиск.Ссылка = СтрокаТ.Контрагент;
			мСтроки = тзКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() > 0 Тогда
				СтрокаТ.Широта  = мСтроки[0].Широта;
				СтрокаТ.Долгота = мСтроки[0].Долгота;
				
				//унф адрессконтрагента
				//Если значениеЗаполнено(мСтроки[0].Адрес) Тогда
					СтрокаТ.АдресКоординат = мСтроки[0].Адрес;
				//Иначе
				//	СтрокаТ.АдресКоординат = РеквизитФормыВЗначение("Объект").ПолучитьАдресКонтрагента(СтрокаТ.Контрагент);
				//КонецЕсли
				
			Иначе
				СтрокаТ.Широта  = 0;
				СтрокаТ.Долгота = 0;
				СтрокаТ.АдресКоординат = "";
			КонецЕсли;
			СтрокаТ.Точность = БезТочности;
			СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
			СтрокаТ.КоординатыИзменены = Ложь;
		КонецЦикла; 
		
	КонецЕсли;  	
КонецПроцедуры  

&НаКлиенте
Процедура ПопыткаОбновитьАдресаКонтрагентов(мКонтрагенты, СтрокаТ = Неопределено, УбиратьКонтрагентовИзМассива = Истина)
	
	//унф переделана на контрагентов
	
	Если СтрокаТ <> Неопределено Тогда
		ИндексВМассиве = ?(ЗначениеЗаполнено(СтрокаТ.Контрагент), мКонтрагенты.Найти(СтрокаТ.Контрагент), Неопределено);
		Если ИндексВМассиве <> Неопределено Тогда
			мКонтрагент = Новый Массив();
			мКонтрагент.Добавить(СтрокаТ.Контрагент);
			ОбновитьАдресаКонтрагентов(мКонтрагенты, Контрагенты.Индекс(СтрокаТ), Истина);
			Если УбиратьКонтрагентовИзМассива Тогда
			    мКонтрагенты.Удалить(ИндексВМассиве);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ОбновитьАдресаКонтрагентов(мКонтрагенты, Неопределено, Ложь);
		Если УбиратьКонтрагентовИзМассива Тогда
			мКонтрагенты.Очистить();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресаКонтрагентов(мКонтрагенты, НачальнаяСтрока, ВОднойСтроке)
	
	//унф переделана на контрагентов и адрес контрагента из УС
	
	Если мКонтрагенты.Количество() = 0 Или Контрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	//мВидыКИ = Новый Массив;
	//мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	//тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мКонтрагенты,, мВидыКИ);
	//стррПоиск = Новый Структура("Объект"); // структура для поиска контрагента в тзАдреса
	
	Если НачальнаяСтрока = 0 И Не ВОднойСтроке Тогда // обновление всех строк ТЗ Контрагенты
		Для каждого СтрокаТ Из Контрагенты Цикл
			ОбновитьАдресКонтрагента(СтрокаТ);
		КонецЦикла; 
	ИначеЕсли НачальнаяСтрока = Неопределено Тогда // обновляем только те строки, у которых Контрагент в массиве мКонтрагенты
		стррПоискВТЗКонтрагенты = Новый Структура("Контрагент");
		Для Каждого Контрагент Из мКонтрагенты Цикл
			стррПоискВТЗКонтрагенты.Контрагент = Контрагент;
			мСтроки = Контрагенты.НайтиСтроки(стррПоискВТЗКонтрагенты);
			Если мСтроки.Количество() <> 0 Тогда
				ОбновитьАдресКонтрагента(мСтроки[0]);
			КонецЕсли; 
		КонецЦикла; 
	Иначе // обновление строк, начиная с НачальнаяСтрока и до последней строки ТЗ Контрагенты
		ПоследняяСтрока = ?(ВОднойСтроке, НачальнаяСтрока, Контрагенты.Количество() - 1);
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			ОбновитьАдресКонтрагента(Контрагенты[НомерСтроки]); // Контрагенты.НайтиПоИдентификатору(НомерСтроки); 
		КонецЦикла; 
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресКонтрагента(стзКонтрагенты)
	//унф все переделано
	
	//СтррПоиск.Объект = стзКонтрагенты.Контрагент;
	//мСтроки = тзАдреса.НайтиСтроки(СтррПоиск);
	//стзКонтрагенты.Адрес = ?(мСтроки.Количество() > 0, мСтроки[0].Представление, "");
	
	стзКонтрагенты.Адрес = РеквизитФормыВЗначение("Объект").ПолучитьАдресКонтрагента(стзКонтрагенты.Контрагент);	
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьТЗКоординатКонтрагентов(мКонтрагенты)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьТЗКоординатКонтрагентов(мКонтрагенты);

КонецФункции

&НаСервере
Процедура ПроверитьГотовностьДополнительныхРеквизитов()
	
	СтррРезультат = РеквизитФормыВЗначение("Объект").ПроверитьДополнительныеРеквизитыСправочникаКонтрагенты();
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Для каждого Текст Из СтррРезультат.Сообщения Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция КонтрагентыПолучитьКоординатыТекущегоКонтрагентаДлаМаркера()
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ <> Неопределено И СтрокаТ.Широта <> 0 Тогда
		Возврат Новый Структура("Широта,Долгота,Заголовок", СтрокаТ.Широта, СтрокаТ.Долгота, СтрокаТ.Контрагент);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции


#Область СлужебныеПроцедурыИФункции_КИКонтрагентов_ВебСервис

&НаКлиенте
Процедура ОпределитьКоординатыПоАдресу(ТолькоДляТекущейСтроки = Ложь)
	
	//унф переделан на контрагентов
	
	Если Контрагенты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Сначала подберите в данную таблицу контрагентов.';uk='Спочатку підберіть в цю таблицю контрагентів.'"), Неопределено, "Контрагенты");
		Возврат;
	ИначеЕсли Элементы.Контрагенты.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, Нстр("ru='Выберите в таблице нужных контрагентов и повторите попытку.';uk='Выберите в таблице нужных контрагентов и повторите попытку.'")); // gi_170902
		Возврат;
	КонецЕсли; 
	
	БылиИзменения = Ложь;
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Контрагенты.ВыделенныеСтроки);
	
	Если мСтроки.Количество() = 1 Или ТолькоДляТекущейСтроки Тогда
		СтрокаТ = ?(ТолькоДляТекущейСтроки, Элементы.Контрагенты.ТекущиеДанные, Контрагенты.НайтиПоИдентификатору(мСтроки[0]));
		ПопыткаОбновитьАдресаКонтрагентов(СтррКонтекст.ОткрытыеКонтрагенты, СтрокаТ); // если открывалась карточка контрагента из формы, возможно у нее изменен адрес
		Если ПустаяСтрока(СтрокаТ.Адрес) Тогда
			Текст = СтрШаблон_(Нстр("ru='У контрагента ""%1"" не указан адрес. Определение координат для данного контрагента невозможно.';uk='У контрагента ""%1"" немає адреси. Визначення координат для даного контрагента неможливо.'"), СтрокаТ.Контрагент);
		    ПоказатьПредупреждение(, Текст);
			Возврат;
		КонецЕсли; 
		списКоординаты = МодульКарты.ПолучитьКоординатыОтВебСервиса(СтрокаТ.Адрес, Ложь);
		Если списКоординаты <> Неопределено Тогда
			Если списКоординаты.Количество() = 1 Тогда // найден единственный адрес
				УстановитьНовыеКоординаты(СтрокаТ, списКоординаты[0].Значение, списКоординаты[0].Представление);
				МигатьКоординатами();
				БылиИзменения = Истина;
			Иначе // предлагаем пользователю выбрать координаты + адрес из списка
				Оповещение = Новый ОписаниеОповещения("КоординатыОбработкаВыбораИзСписка", ЭтотОбъект);
				списКоординаты.ПоказатьВыборЭлемента(Оповещение, Нстр("ru='Выберите координаты по адресу';uk='Виберіть координати за адресою'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ПопыткаОбновитьАдресаКонтрагентов(СтррКонтекст.ОткрытыеКОнтрагенты); // если открывалась карточки контрагентов из формы, возможно у них изменен адрес
		
		Всего = мСтроки.Количество();
		ТекПроцент = Неопределено;
		
		Для Шаг = 1 По Всего Цикл
			Процент = Цел(100 * Шаг / Всего);
			Если Процент <> ТекПроцент Тогда
				ТекПроцент = Процент;
				Состояние(Нстр("ru='Получение координат...';uk='Для отримання координат ...'"), Процент);
			КонецЕсли; 
			СтрокаТ = Контрагенты.НайтиПоИдентификатору(мСтроки[Шаг-1]);
			стррКоординаты = МодульКарты.ПолучитьКоординатыОтВебСервиса(СтрокаТ.Адрес, Истина);
			Если стррКоординаты <> Неопределено Тогда
				УстановитьНовыеКоординаты(СтрокаТ, стррКоординаты.Координаты, стррКоординаты.Адрес);
				БылиИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Если БылиИзменения Тогда
		УстановитьМодифицированостьФормы(Истина);
		КартаПерейтиКМаркеруТекущегоКонтрагента(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КоординатыОбработкаВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
		УстановитьНовыеКоординаты(СтрокаТ, Результат.Значение, Результат.Представление);
		УстановитьМодифицированостьФормы(Истина);
		КартаПерейтиКМаркеруТекущегоКонтрагента(Ложь);
		МигатьКоординатами();
	КонецЕсли;

КонецПроцедуры	

// СлужебныеПроцедурыИФункции_КИКонтрагентов_ВебСервис
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КИКонтрагентов_ЗаписьВБД

// Сохранение измененных координат для контрагентов с признаком КоординатыИзменены.
&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьКоординатыКлиент();
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКоординатыКлиент()
	
	Состояние(НСтр("ru='Сохранение координат контрагентов...';uk='Збереження координат контрагентів ...'"));
	СохранитьКоординаты();
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКоординаты()
	
	//унф переделана на контрагентов
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	
	тзРеквизиты = Новый ТаблицаЗначений;
	тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	тзРеквизиты.Колонки.Добавить("Значение");
	
	стзШирота = тзРеквизиты.Добавить();	
	стзШирота.Свойство  = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваШиротаКонтрагент());	
	стзДолгота = тзРеквизиты.Добавить();
	стзДолгота.Свойство = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваДолготаКонтрагент());
	стзАдрес = тзРеквизиты.Добавить();
	стзАдрес.Свойство   = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваАдресИзСервисаКонтрагент());
	
	Для каждого СтрокаТ Из Контрагенты Цикл
		Если СтрокаТ.КоординатыИзменены Тогда
			стзШирота.Значение  = СтрокаТ.Широта;
			стзДолгота.Значение = СтрокаТ.Долгота;
			стзАдрес.Значение   = СтрокаТ.АдресКоординат;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(СтрокаТ.Контрагент, тзРеквизиты);
			СтрокаТ.КоординатыИзменены = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИКонтрагентов_ЗаписьВБД
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КИКонтрагентов_Мигание

&НаКлиенте
Процедура МигатьКоординатами()
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		СтррКонтекст.Вставить("ЗначениеМигания", СтрокаТ.Координаты);
		СтррКонтекст.КоличествоМиганий = 5; // количество переключений видимости
		ТаймерМигания();
		ПодключитьОбработчикОжидания("ТаймерМигания", 0.15, Истина); // дробные значения принимаются только для однократных таймеров
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерМигания()
	
	СтррКонтекст.КоличествоМиганий = СтррКонтекст.КоличествоМиганий - 1;
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		СтрокаТ.Координаты = ?(СтррКонтекст.КоличествоМиганий % 2 = 0, СтррКонтекст.ЗначениеМигания, "");
		Если СтррКонтекст.КоличествоМиганий <> 0 Тогда
			ПодключитьОбработчикОжидания("ТаймерМигания", 0.15, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИКонтрагентов_Мигание
#КонецОбласти 

// СлужебныеПроцедурыИФункции_КИКонтрагентов
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_СписокТорговыхТочек

&НаКлиенте
Процедура СписокТорговыхТочекВыборЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Если СтррРезультат <> Неопределено Тогда
		СписокТорговыхТочекДобавитьКонтрагентовИзСписка(СтррРезультат);
		ПредупредитьПользователяОРезультатеДобавленияКонтрагентов(СтррРезультат);
	КонецЕсли; 
	
КонецПроцедуры

// Вывод предупреждения после добавления Контрагентов из списка ТТ или добавления всех Контрагентов в таблицу.
&НаКлиенте
Процедура ПредупредитьПользователяОРезультатеДобавленияКонтрагентов(СтррРезультат)
	
	Текст = "";
	Если СтррРезультат.Свойство("ИсключеноКонтрагентовСЗаполненнымиКоординатами") Тогда
		Текст = Текст + НСтр("ru='Были исключены контрагенты с заполненными координатами';uk='Були виключені контрагенти з заповненими координатами'")
			+ " " + НСтр("ru='(включен режим подбора только для контрагентов с пустыми координатами).';uk='(Включений режим підбору тільки для контрагентів з порожніми координатами).'")
			+ Символы.ПС + СтрШаблон_(НСтр("ru='Исключено контрагентов: %1.';uk='Виключено контрагентів: %1.'"), СтррРезультат.ИсключеноКонтрагентовСЗаполненнымиКоординатами) + " ";
	КонецЕсли; 
	
	Если СтррРезультат.ДобавленоКонтрагентов = 0 Тогда
		Если Контрагенты.Количество() <> 0 Тогда
			Текст = Текст + НСтр("ru='Новых контрагентов больше не добавлено, т.к. они уже есть в таблице.';uk='Нових контрагентів більше не додано, тому що вони вже є в таблиці.'");
		Иначе
			Текст = Текст + НСтр("ru='Новых контрагентов больше не добавлено.';uk='Нових контрагентів більше не додано.'");
		КонецЕсли; 
	КонецЕсли;  
	
	Если Текст <> "" Тогда
		ПоказатьПредупреждение(, Текст);
	КонецЕсли; 
	
КонецПроцедуры

// Добавление в таблицу на форме контрагентов из списков торговых точек (может быть добавлено из нескольких списков ТТ)
&НаСервере
Процедура СписокТорговыхТочекДобавитьКонтрагентовИзСписка(СтррПараметры)
	
	мВыбранныеЗначения = СтррПараметры.мВыбранныеЗначения; // выбранные списки торговых точек (контрагентов)
	
	НачальнаяСтрока = Контрагенты.Количество();
	
	мНовыеКонтрагенты = Новый Массив; // количество добавленных контрагентов
	
	ПроверятьНаПустыеКоординаты = Элементы.КонтрагентыПризнакТолькоСПустымиКоординатами.Пометка;
	БезТочности = СтррКонтекст.ЗначениеБезТочности;	
	ПрежнееКоличествоКонтрагентов = Контрагенты.Количество();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	СтррПоиск = Новый Структура("Контрагент");
	
	Для каждого Значение Из мВыбранныеЗначения Цикл
		
		СтррОбъект = ТекОбъект.ПолучитьОбъектИзХранилища("СпрСТТ", Значение.ID);
		Если СтррОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого стзСостав Из СтррОбъект.Состав Цикл
			Контрагент = стзСостав.Контрагент;
			СтррПоиск.Контрагент = Контрагент;
			мСтроки = Контрагенты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() = 0 Тогда
				Если Не ПроверятьНаПустыеКоординаты Тогда
					СтрокаТ = Контрагенты.Добавить();
					СтрокаТ.Контрагент = Контрагент;
					СтрокаТ.Точность = БезТочности;
				КонецЕсли; 
				мНовыеКонтрагенты.Добавить(Контрагент);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Если мНовыеКонтрагенты.Количество() <> 0 Тогда // добавлены новые контрагенты 
		
		КоличествоВМассивеДоДобавления = мНовыеКонтрагенты.Количество(); // Если включена проверка на добавление с непустыми координатами, то после вызова 
		ОбновитьКоординатыКонтрагентов(мНовыеКонтрагенты, НачальнаяСтрока, Ложь, ПроверятьНаПустыеКоординаты); // этой процедуры из массива будут исключены контрагенты с непустыми координатами.
		ОбновитьАдресаКонтрагентов(мНовыеКонтрагенты, НачальнаяСтрока, Ложь);
		Если КоличествоВМассивеДоДобавления <> мНовыеКонтрагенты.Количество() И ПроверятьНаПустыеКоординаты Тогда
			СтррПараметры.Вставить("ИсключеноКонтрагентовСЗаполненнымиКоординатами", КоличествоВМассивеДоДобавления - мНовыеКонтрагенты.Количество());
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтррПараметры.Вставить("ДобавленоКонтрагентов", Контрагенты.Количество() - ПрежнееКоличествоКонтрагентов);	
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_СписокТорговыхТочек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДобавлениеВсехконтрагентов

&НаКлиенте
Процедура КонтрагентыДобавитьВсехКонтрагентовКлиент()
	
	УстановитьМодифицированостьФормы(Ложь);
	СтррРезультат = КонтрагентыДобавитьВсехКонтрагентов();
	ПредупредитьПользователяОРезультатеДобавленияКонтрагентов(СтррРезультат);	
	
КонецПроцедуры

// Добавление в таблицу на форме всех контрагентов.
&НаСервере
Функция КонтрагентыДобавитьВсехКонтрагентов()
	
	//унф переделана на контрагентов
	
	cтррРезультат = Новый Структура;	
	
	Контрагенты.Очистить();
	
	мНовыеКонтрагенты = Новый Массив; // массив добавленных контрагентов в элемент "Контрагенты"
	БезТочности = СтррКонтекст.ЗначениеБезТочности;	
	ПрежнееКоличествоКонтрагентов = Контрагенты.Количество();
	
	ПроверятьНаПустыеКоординаты = Элементы.КонтрагентыПризнакТолькоСПустымиКоординатами.Пометка;	
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ 
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ";
		
	Запрос = Новый Запрос(Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПроверятьНаПустыеКоординаты Тогда
			СтрокаТ = Контрагенты.Добавить();
			СтрокаТ.Контрагент  = Выборка.Ссылка;
			СтрокаТ.Точность    = БезТочности;
		КонецЕсли;
		мНовыеКонтрагенты.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Если мНовыеКонтрагенты.Количество() <> 0 Тогда
		КоличествоВМассивеДоДобавления = мНовыеКонтрагенты.Количество();
		ОбновитьКоординатыКонтрагентов(мНовыеКонтрагенты, 0, Ложь, ПроверятьНаПустыеКоординаты);
		ОбновитьАдресаКонтрагентов(мНовыеКонтрагенты, 0, Ложь);
		Если КоличествоВМассивеДоДобавления <> мНовыеКонтрагенты.Количество() И ПроверятьНаПустыеКоординаты Тогда
			cтррРезультат.Вставить("ИсключеноКонтрагентовСЗаполненнымиКоординатами", КоличествоВМассивеДоДобавления - мНовыеКонтрагенты.Количество());
		КонецЕсли;
	КонецЕсли; 
	
	cтррРезультат.Вставить("ДобавленоКонтрагентов", Контрагенты.Количество() - ПрежнееКоличествоКонтрагентов);
	Возврат cтррРезультат;

КонецФункции

// СлужебныеПроцедурыИФункции_ДобавлениеВсехКонтрагентов
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карты

#Область СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоординатNMEA(Широта, Долгота)

	Если Широта = 0 И Долгота = 0 Тогда
		Возврат "";
	Иначе
		Возврат Строка(Широта) + "; " + Строка(Долгота);			
	КонецЕсли; 

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

&НаКлиенте
Процедура КартаПереключитьРежимВыбораКоординат(Режим = "НеМенять", ВыборЦентраКарты = Ложь)
	
	СтррКонтекст.РежимВыбораЦентраКарты = ВыборЦентраКарты;
	
	Если ТипЗнч(Режим) = Тип("Булево") Тогда
	    РежимВыбораКоординат = Режим;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаОбновитьТекущийМакет()
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объеткми?).
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);
	// sk_191129 Добавлено использование WebKit в рамках (MOD-977)
	Если МодульКарты.ИспользоватьWebKit() Тогда
		ТекстСкрипта = ТекстМакета;
		//Параметр, показывающий, что файл скрипта используется для Редактора маршрута, переходит к области города.
		Элементы.ПолеБраузера.Документ.defaultView.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", стррКонтекст.КартаЦентр);
	Иначе
		#Если Не ВебКлиент Тогда
			Документ = Элементы.ПолеБраузера.Document;	
			
			КартаЗагрузитьМакет(Документ, ТекстМакета);
			
			ОкноБраузера = Документ.parentWindow; // IE
			Если ОкноБраузера = Неопределено Тогда
				ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
			
			ПоказатьМаркер = СтррМаркер.Широта <> 0 И Контрагенты.Количество() <> 0;
			
			стррЦентр = ?(ПоказатьМаркер, СтррМаркер, СтррКонтекст.КартаЦентр); // если маркер еще не использовался, показываем центр карты
			
			//передаем параметр, показывающий, что файл скрипта используется для Редактора маршрута		
			ОкноБраузера.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", стррЦентр);
		#Иначе
			ТекстСкрипта = ТекстМакета;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			ТекстСкрипта = ТекстМакета;
		КонецПопытки;
	КонецПопытки; 
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   стррЦентр.Широта 	- широта для позиционирования центра карты
//   стррЦентр.Долгота  - долгота для позиционирования центра карты
//
//  Возвращаемое значение:
//   РежимРедактора - Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, стррЦентр = Неопределено) Экспорт
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") И стррЦентр.Свойство("Широта") Тогда
		стрШирота  = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Широта));
		стрДолгота = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Долгота));
	Иначе
		стрШирота  = "0";
		стрДолгота = "0";
	КонецЕсли; 
	
	Возврат стрШирота + "@" + стрДолгота + "@" + РежимРедактора;	
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_Карты_Маркер

&НаКлиенте
Процедура КартаПерейтиКМаркеруТекущегоКонтрагента(Принудительно)
	
	//унф переделана на контрагентов
	
	СтрокаТ = Элементы.Контрагенты.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Если Не Принудительно И СтррМаркер.Широта = СтрокаТ.Широта И СтррМаркер.Долгота = СтрокаТ.Долгота Тогда
			Возврат; // координаты маркера не менялись
		КонецЕсли; 
		
		СтррМаркер.Широта    = СтрокаТ.Широта;
		СтррМаркер.Долгота   = СтрокаТ.Долгота;
		СтррМаркер.Заголовок = Строка(СтрокаТ.Контрагент);
		
		Если СтррМаркер.Широта <> 0 И СтррМаркер.Долгота <> 0 Тогда 
			КартаПерейтиКМаркеру(Истина);
			КартаДобавитьМаркер(Истина);
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры		

&НаКлиенте
Процедура КартаПерейтиКМаркеру(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Широта 	= СтррМаркер.Широта;
	Долгота = СтррМаркер.Долгота;
	
	Если Не УстановитьТаймер Тогда 
		ОкноБраузера.GoToMarker(Широта, Долгота);
	Иначе
		Попытка
			ОкноБраузера.GoToMarker(Широта, Долгота);
		Исключение
			Таймер_Включить("ПерейтиКМаркеру");	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура располагает на карте маркер из реквизита стррМаркер.
&НаКлиенте
Процедура КартаДобавитьМаркер(УстановитьТаймер = Ложь)
	
	Если СтррМаркер.Широта = 0 И СтррМаркер.Долгота = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание 		= "";
	Подвал 			= "";
	Подсказка 		= "";
	Порядок  		= "";
	
	ИмяФайлаИконки = "tpnochek.png";
	
	ОтображаемаяИконка = СтррКонтекст.КаталогИконок + ИмяФайлаИконки;
	
	Попытка 
		
		Документ 		= Элементы.ПолеБраузера.Document;		
		ОкноБраузера 	= Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		
		ОкноБраузера.ClearCollection();	// удаление всех маркеров
		ОкноБраузера.setMarker(СтррМаркер.Широта, СтррМаркер.Долгота, ОтображаемаяИконка, СтррМаркер.Заголовок, Описание, Подвал, Подсказка, Порядок, Ложь);
		
	Исключение
		
		Если УстановитьТаймер Тогда 
			Таймер_Включить("ДобавитьМаркер");	
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При построении карты произошла ошибка. Возможно, карта не загружена.'; uk = 'При побудові карти сталася помилка. Можливо, карта не завантажена.'"));
		КонецЕсли;	
		
	КонецПопытки;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Маркер
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты_Таймер

// Процедура включает таймер обработки очереди событий для поля браузера, 
// при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
// Также должен быть объявлен реквизит формы ТаймерОжидания.
// Реквизит формы "ТаймерОжидания" используется для организациии очереди передачи команд в поле браузера, 
// т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
&НаКлиенте
Процедура Таймер_Включить(Событие)
	Если ТипЗнч(ТаймерОжидания) <> Тип("Структура") Тогда // реквизит еще не инициализировался
		ТаймерОжидания = Новый Структура("Включен,Очередь,Время", Ложь);
		ТаймерОжидания.Очередь = Новый Массив; // стэк событий для взаимодействия с полем браузера (обрабатывается в порядке добавления событий) 
	КонецЕсли;
	Если ТаймерОжидания.Очередь.Найти(Событие) = Неопределено Тогда
		ТаймерОжидания.Очередь.Добавить(Событие);
		ТаймерОжидания.Время = ТекущаяДата();
	КонецЕсли;
	Если Не ТаймерОжидания.Включен Тогда
		ТаймерОжидания.Включен = Истина;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_Обработчик()
	
	Если ТекущаяДата() - ТаймерОжидания.Время > 5 Тогда // время с момента постановки события в очередь привысило 5 секунд - прекращаем обрабатывать все события
		Таймер_Выключить(Истина);
	КонецЕсли;
	Событие =  ТаймерОжидания.Очередь[0];
	Попытка
		Если Событие = "ДобавитьМаркер" Тогда
			КартаДобавитьМаркер();
		ИначеЕсли Событие = "ПерейтиКМаркеру" Тогда
			КартаПерейтиКМаркеру();
		ИначеЕсли Событие = "КартаОбновитьТекущийМакет" Тогда
			КартаОбновитьТекущийМакет();
		ИначеЕсли Лев(Событие, 1) = "!" Тогда // событие - строка кода для выполнения
			Выполнить(Сред(Событие, 2) + ";");
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Таймер_Выключить(Ложь);
	
КонецПроцедуры

// Процедура выключает таймер обработки очереди событий для поля браузера, 
// или удаляет из очереди первое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
&НаКлиенте
Процедура Таймер_Выключить(Знач ВыключитьДляВсехСобытий)
	Если Не ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Очередь.Удалить(0);
		Если ТаймерОжидания.Очередь.Количество() = 0 Тогда
			ВыключитьДляВсехСобытий = Истина;
	    КонецЕсли;
	КонецЕсли;
	Если ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Включен = Ложь;
		ОтключитьОбработчикОжидания("Таймер_Обработчик");
	КонецЕсли;
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Таймер
#КонецОбласти

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
