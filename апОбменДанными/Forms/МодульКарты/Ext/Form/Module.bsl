
#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура("ЗначениеБезТочности,РегионГеокодера,ВерсияКонфигурации");
	
	СтррКонтекст.ЗначениеБезТочности = 99; // чтобы при интерактивной "сортировке по точности" таблицы координат, координаты без точности были в конце
	СтррКонтекст.РегионГеокодера = "";
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой. Будет инициализирована, как только потребуется
	СтррКонтекст.Вставить("МаксимальноеРасстояниеОтТТ", Неопределено); 
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	//СтррКонтекст.Местоположение = ТекОбъект.ПрочитатьЗначениеНастройки("МестоположениеДляИнформера");
	СтррКонтекст.ВерсияКонфигурации = ТекОбъект.ВерсияКонфигурации();

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ЗаполнитьСписокДоступныхКарт(Список) Экспорт

	Список.Очистить();
	Список.Добавить("OSM", "Open street maps");
	// +АгентПлюс 2018-11-21 Виктор 
	ВерсияКонфигурации = СтррКонтекст.ВерсияКонфигурации.Конфигурация;
	Если НЕ (ВерсияКонфигурации = "УНФ_UA") Тогда
		Список.Добавить("YandexMaps", "Yandex-карты");
	КонецЕсли;
	// -АгентПлюс 2018-11-21 Виктор 
	Список.Добавить("GoogleMaps", "Google maps");

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапросКВебСервису(Знач url = Неопределено, ВебЗапрос, ВернутьJSONСтруктуру = Ложь) Экспорт
	
	СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
	Если url = Неопределено Тогда
		url = "geocode-maps.yandex.ru";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(url,,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	
	ОписаниеОшибки = "";
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Ошибка обращения к веб-сервису. ';uk='Помилка звернення до веб-сервісу.'") + ОписаниеОшибки); sk_191129 Исключено в рамках (MOD-928)
		Возврат Неопределено;
	КонецЕсли;
	
	//(( sk_191129 Добавлено в рамках (MOD-928)
	Если HTTPОтвет.КодСостояния = 403 Тогда
		//Отказ сервера определять координаты.
		Возврат Неопределено;
	КонецЕсли;
	//)) sk_191129

	Если Не ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли; 

КонецФункции

// sk_191129 Добавлена в рамках (MOD-928)
//
&НаКлиенте
Функция ВыполнитьЗапросКВебСервисуСпутник(Адрес, ВернутьJSONСтруктуру = Ложь) Экспорт 

	url 		= "search.maps.sputnik.ru";
	ВебЗапрос 	= "/search/addr?q=" + Адрес + "&format=xml";
	Соединение 	= Новый HTTPСоединение(url,,,,,,);
	HTTPЗапрос 	= Новый HTTPЗапрос(ВебЗапрос);	
	
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 403 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Ошибка обращения к веб-сервису. ';uk='Помилка звернення до веб-сервісу.'"));
		//Отказ сервера определять координаты.
		Возврат Неопределено;
	КонецЕсли;

	Если Не ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;  	
	
КонецФункции

// Перенос (чтение) данных из строки JSON в структуру.
&НаКлиенте
Функция ПреобразоватьСтрокуВJSON(Строка)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип("Структура") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура("JSON", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоординатыПользователя() Экспорт
	
	стррРезультат = Неопределено;	
	стррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	Если ТипЗнч(стррОтвет) = Тип("Структура") И стррОтвет.Свойство("city") Тогда
		Если ТипЗнч(стррОтвет.city) = Тип("Структура") И стррОтвет.city.Свойство("lat") И стррОтвет.city.Свойство("lon") Тогда
			стррРезультат = Новый Структура("Широта,Долгота,Город,Регион", 
			  		КоординатаИзWGS84вNMEA(стррОтвет.city.lat),
					КоординатаИзWGS84вNMEA(стррОтвет.city.lon)
				);
			стррОтвет.city.Свойство("name_ru", стррРезультат.Город);
			Если стррОтвет.Свойство("region") Тогда
				стррОтвет.region.Свойство("name_ru", стррРезультат.Регион);
			КонецЕсли
		КонецЕсли
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

&НаКлиенте
Функция МестоположениеПользователяПолучить() Экспорт
	
	стррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	стррРезультат = Новый Структура;	
	
	Если ТипЗнч(стррОтвет) = Тип("Структура") Тогда
		
		Если стррОтвет.Свойство("city") И ЗначениеЗаполнено(стррОтвет.city) Тогда
			стррРезультат.Вставить("city_ru", стррОтвет.city.name_ru);
			стррРезультат.Вставить("city_en", стррОтвет.city.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("country") И ЗначениеЗаполнено(стррОтвет.country) Тогда
			стррРезультат.Вставить("country_ru", стррОтвет.country.name_ru); 
			стррРезультат.Вставить("country_en", стррОтвет.country.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("region") И ЗначениеЗаполнено(стррОтвет.region) Тогда
			стррРезультат.Вставить("region_ru", стррОтвет.region.name_ru); 
			стррРезультат.Вставить("region_en", стррОтвет.region.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("error") И ЗначениеЗаполнено(стррОтвет.error) Тогда
		    стррРезультат.Вставить("error", стррОтвет.error); 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если стррРезультат.Количество() = 0 Тогда
		стррРезультат.Вставить("error", НСтр("ru = 'Ошибка определения местоположения.'; uk = 'Помилка визначення місця розташування.'")); 
	Иначе
		МестоположениеПользователяСкорректироватьНазвания(стррРезультат);
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

&НаКлиенте
Процедура МестоположениеПользователяСкорректироватьНазвания(стррМестоположение) 
	
	Для Каждого Элемент Из стррМестоположение Цикл
		Ключ = Элемент.Ключ;
		Если Прав(Ключ, 3) = "_ru" Тогда
			Значение = Элемент.Значение;
			Если Найти(Значение, "ь") <> 0 Или Найти(Значение, "ъ") <> 0 Или Найти(Значение, "й") <> 0 Тогда
				КлючАнгл = Лев(Ключ, СтрДлина(Ключ) - 3) + "_en";
				Name = СтрЗаменить(стррМестоположение[КлючАнгл], "'", "");
				стррМестоположение[КлючАнгл] = Name;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает код страны местоположения пользователя.
// Возвращамое значение - строка - код страны:
//		"RU" - Россия
//		"UA" - Украина
&НаКлиенте
Функция КодСтраныМестоположения(Знач стррМестоположение = Неопределено) Экспорт

	Результат = "RU";	
	
	Если ТипЗнч(стррМестоположение) <> Тип("Структура") Тогда	
		стррМестоположение = МестоположениеПользователяПолучить();
	КонецЕсли; 
	
	Если Не стррМестоположение.Свойство("error") Тогда
		СтранаКод = Лев(СокрЛП(НРег(стррМестоположение.country_ru)), 3) + Лев(СокрЛП(НРег(стррМестоположение.country_en)), 3);
		Если Найти(СтранаКод, "укр") <> 0 Или Найти(СтранаКод, "ukr") <> 0 Тогда 
			Результат = "UA";
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Функция возвращает город местоположения пользователя.
&НаКлиенте
Функция ГородМестоположения(Знач стррМестоположение = Неопределено) Экспорт

	Результат = "";	
	
	Если ТипЗнч(стррМестоположение) <> Тип("Структура") Тогда	
		стррМестоположение = МестоположениеПользователяПолучить();
	КонецЕсли; 
	
	Если ТипЗнч(стррМестоположение) = Тип("Структура") И Не стррМестоположение.Свойство("error") Тогда
		Результат = стррМестоположение.city_ru;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Функция возвращает строку адреса по переданным координатам.
// Параметры:
// 		стррКоординаты - Структура - структура со свойствами Широта и Долгота
// 		КонвертироватьИзNMEA - Булево - координаты в строктуре переданы в формате NMEA, иначе - в формате WGS84
// 		ВернутьТочныйАдрес - Булево - Если Истина - возвращать точный адрес, иначе - возвращать только название локации (населенного пункта).
// Возвращаемое значение: строка адреса.
&НаКлиенте
Функция ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты, КонвертироватьИзNMEA = Ложь, ВернутьТочныйАдрес = Ложь) Экспорт

	СтрШирота  = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(стррКоординаты.Широта)),  ЧислоВСтроку(стррКоординаты.Широта));
	СтрДолгота = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(стррКоординаты.Долгота)), ЧислоВСтроку(стррКоординаты.Долгота));
	
	ВебЗапрос  = "1.x/?geocode=" + СтрДолгота + "," + СтрШирота + ?(ВернутьТочныйАдрес, "", "&kind=locality");
	
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	
	//Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Результат = Неопределено;
	
	ИскатьЗначение = ?(ВернутьТочныйАдрес, "addressline", "text");

	//Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если НРег(ИмяПараметра) = ИскатьЗначение Тогда
			ЧтениеОтвета.Прочитать();
			Результат = СокрЛП(ЧтениеОтвета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоординатыОтВебСервиса(Знач Адрес, ВернутьОдинАдрес) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	флСервисЯндекс = Истина; // sk_191129 Добавлено в рамках (MOD-928)

	ВебЗапрос = "1.x/?geocode=" + ПреобразоватьСтрокуВУТФ8(Адрес) + СтррКонтекст.РегионГеокодера;
		
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		//(( sk_191129 Добавлено в рамках (MOD-928)
		//Возврат Неопределено;
		флСервисЯндекс = Ложь;
		ОтветСервера = ВыполнитьЗапросКВебСервисуСпутник(Адрес);
		Если ОтветСервера = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		//)) sk_191129
	КонецЕсли; 

	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	БезТочности = СтррКонтекст.ЗначениеБезТочности;		
	
	СписокАдресов = Новый СписокЗначений;
	
	//Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Адрес = ""; 
	СтрТочность = "";
	Точность = БезТочности;
	Координаты = Неопределено;
	
	//Чтение XML строки
	Если флСервисЯндекс Тогда
		Пока ЧтениеОтвета.Прочитать() Цикл
			ИмяПараметра = ЧтениеОтвета.Имя;
			ТипУзла = ЧтениеОтвета.ТипУзла;
			Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяПараметра = "text" Тогда
				Если ЗначениеЗаполнено(Адрес) Тогда
					СписокАдресов.Добавить(Координаты + " " + Точность, Адрес + СтрТочность);
					Если ВернутьОдинАдрес И СписокАдресов.Количество() > 1 Тогда // возвращаем первый найденный адрес
						Прервать;
					КонецЕсли; 
				КонецЕсли; 
				ЧтениеОтвета.Прочитать();
				Адрес = СокрЛП(ЧтениеОтвета.Значение);
				Точность = БезТочности;
			ИначеЕсли ИмяПараметра = "precision" Тогда
				ЧтениеОтвета.Прочитать();
				Значение = СокрЛП(ЧтениеОтвета.Значение);
				Если Значение = "exact" Тогда
					Точность = 1;
					СтрТочность = "";
				ИначеЕсли Значение = "number" Тогда
					Точность = 2;
					СтрТочность = " *";
				ИначеЕсли Значение = "street" Тогда
					Точность = 3;
					СтрТочность = " **";
				Иначе
					Точность = 4;
					СтрТочность = " ***";
				КонецЕсли; 
			ИначеЕсли ИмяПараметра = "pos" Тогда
				ЧтениеОтвета.Прочитать();
				Координаты = КонвертироватьWGS84NMEA(СокрЛП(ЧтениеОтвета.Значение));
			КонецЕсли;
		КонецЦикла;
	Иначе
		//sk_191129 Перенесено из УД в рамках (MOD-928)
		Широта = "";
		Долгота = "";
		Пока ЧтениеОтвета.Прочитать() Цикл
			ИмяПараметра = ЧтениеОтвета.Имя;
			ТипУзла = ЧтениеОтвета.ТипУзла;
			Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяПараметра = "h2" Тогда
				ЧтениеОтвета.Прочитать();
				ЗначениеПараметра = СокрЛП(ЧтениеОтвета.Значение);
				Если ЗначениеПараметра = "Сервис временно недоступен." Тогда 
					Прервать;
				КонецЕсли;
			ИначеЕсли ИмяПараметра = "display_name" И Не ЗначениеЗаполнено(Адрес) Тогда
				ЧтениеОтвета.Прочитать();
				Адрес = СокрЛП(ЧтениеОтвета.Значение);
			ИначеЕсли ИмяПараметра = "full_match" Тогда
				Точность = БезТочности;
				//возвращает полное совпадение или нет. нельзя определить точность
			ИначеЕсли ИмяПараметра = "lat" И Не ЗначениеЗаполнено(Широта) Тогда
				ЧтениеОтвета.Прочитать();
				Широта = ЧтениеОтвета.Значение;
			ИначеЕсли ИмяПараметра = "lon" И Не ЗначениеЗаполнено(Долгота) Тогда
				ЧтениеОтвета.Прочитать();
				Долгота = ЧтениеОтвета.Значение;
			КонецЕсли;
			
		КонецЦикла;
		Координаты = КонвертироватьWGS84NMEA(СокрЛП(Долгота + " " + Широта));    
		
	КонецЕсли;
	
	ЧтениеОтвета.Закрыть();

	Если ЗначениеЗаполнено(Адрес) Тогда	
		СписокАдресов.Добавить(Координаты  + " " + Точность, Адрес + СтрТочность);
		Если ВернутьОдинАдрес Тогда // возвращаем первый найденный адрес
			ЭлементСписка = СписокАдресов[0];
			Если СписокАдресов.Количество() > 1 Тогда // нужно исправить данные о точности
				КоординатыИТочность = Лев(ЭлементСписка.Значение, СтрДлина(ЭлементСписка.Значение) - 1) + "5";
			Иначе
				КоординатыИТочность = ЭлементСписка.Значение;
			КонецЕсли; 
			Возврат Новый Структура("Координаты,Адрес", КоординатыИТочность, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ?(ВернутьОдинАдрес Или СписокАдресов.Количество() = 0, Неопределено, СписокАдресов);
	
КонецФункции

// Процедура устаналвивает регион для приоритета геокодирования.
// Параметры:
// 		стррРегион - Структура - свойства структуры:
// 			Широта, Долгота - Число - координаты центра региона в формате NMEA
// 			Ширина, Высота  - Число - (не обязательно) - ширина и высота региона в градусах в формате WGS84. Если не указано, то значения 2x2
//
&НаКлиенте
Процедура УстановитьРегионГеокодера(стррРегион) Экспорт

	Если стррРегион = Неопределено Тогда
		СтррКонтекст.РегионГеокодера = "";
	Иначе
		стрШирота  = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(стррРегион.Широта), 2)); // координаты центра региона
		стрДолгота = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(стррРегион.Долгота), 2));
		Если стррРегион.Свойство("Ширина") И стррРегион.Свойство("Высота") Тогда // ширина и высота региона, значения в градусах WGS84
			стрРазмер = ЧислоВСтроку(стррРегион.Ширина) + "," + ЧислоВСтроку(стррРегион.Высота);
		Иначе
			стрРазмер = "2,2";
		КонецЕсли; 
		СтррКонтекст.РегионГеокодера = "&ll=" + стрДолгота + "," + стрШирота + "&spn=" + стрРазмер;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ЗначенияРасстояния(стррКоординаты) Экспорт
	
	Если СтррКонтекст.МаксимальноеРасстояниеОтТТ = Неопределено Тогда
		ПрочестьНастройкиИзХранилища();
	КонецЕсли;
	
	стррКоординаты.МаксРасстояние =	СтррКонтекст.МаксимальноеРасстояниеОтТТ;
	стррКоординаты.Расстояние 	  = Неопределено;
	
	Если ЗначениеЗаполнено(стррКоординаты.Широта) И ЗначениеЗаполнено(стррКоординаты.Долгота) И ЗначениеЗаполнено(стррКоординаты.Широта2) И ЗначениеЗаполнено(стррКоординаты.Долгота2) Тогда
		стррКоординаты.Расстояние = РасстояниеМеждуТочкамиNMEA(ЗначениеВЧисло(стррКоординаты.Широта), ЗначениеВЧисло(стррКоординаты.Долгота), 
											ЗначениеВЧисло(стррКоординаты.Широта2), ЗначениеВЧисло(стррКоординаты.Долгота2));
		Если стррКоординаты.МаксРасстояние = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат стррКоординаты.МаксРасстояние >= стррКоординаты.Расстояние;
		КонецЕсли; 
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочкамиNMEA(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	Шрт1 = КонвертироватьNMEAWGS84(Широта1);
	Шрт2 = КонвертироватьNMEAWGS84(Широта2);
	Длг1 = КонвертироватьNMEAWGS84(Долгота1);
	Длг2 = КонвертироватьNMEAWGS84(Долгота2);
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСкриптКарты(ИдентификаторКарты) Экспорт
	Возврат ПолучитьТекстМакетаКарты(ИдентификаторКарты);
КонецФункции

&НаКлиенте
Процедура СохранитьЦентрКартыКлиент(стррЦентр) Экспорт
	
	СохранитьЦентрКарты(стррЦентр);
	
КонецПроцедуры


// ПрограммныйИнтерфейс
#КонецОбласти 

#Область КонверсияЗначений

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтрокуВУТФ8(Стр)

	Длина = СтрДлина(Стр);
	Результат = "";
	
	Для Н = 1 По Длина Цикл
		Знак = Сред(Стр, Н, 1);
		Код = КодСимвола(Знак);
		Если Код = 32 Тогда
			Результат = Результат + СимволВ16(Знак);
		ИначеЕсли Код < 128 Тогда
			Результат = Результат + Знак;
		Иначе
			Если (Код >= КодСимвола("А")) И (Код <= КодСимвола("п")) Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(144 + Код - КодСимвола("А")));
			ИначеЕсли (Код >= КодСимвола("р")) И (Код <= КодСимвола("я")) Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(128 + Код - КодСимвола("р")));
			ИначеЕсли (Знак = "ё") Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(145));
			ИначеЕсли (Знак = "Ё") Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(129));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СимволВ16(Символ)
	Возврат "%" + ПереводЧислаВСистемуСчисления16(КодСимвола(Символ));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПереводЧислаВСистемуСчисления16(Знач Значение)

	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + Результат;
		Значение = Цел(Значение / 16);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// Конвертирует переданные координаты из формата WGS84 в формат NMEA. 
//
//  Параметры:
//   стрКоординаты - строка с координатами вида "<Долгота> <Широта>" (в такой последовательности координаты возвращает geocoder Yandex)
//
//  Возвращаемое значение:
//   Результат - Строка - строка из координат, разделенных пробелом в формате "<Широта> <Долгота>"
//
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьWGS84NMEA(стрКоординаты)

	Результат = "";
	
	Индекс = Найти(стрКоординаты, " ");
	Если Индекс <> 0 Тогда
		ДолготаWGS84 = Число(Лев(стрКоординаты, Индекс-1));
		ШиротаWGS84  = Число(Сред(стрКоординаты, Индекс+1));
		Долгота = КоординатаИзWGS84вNMEA(ДолготаWGS84);
		Широта 	= КоординатаИзWGS84вNMEA(ШиротаWGS84);
		Результат = СтрЗаменить(Строка(Широта), " ", "") + " " + СтрЗаменить(Строка(Долгота), " ", "");		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

// Возвращает строку-представление координат в читабельном для пользователя виде.
// Координаты передаются в формате NMEA.
&НаКлиентеНаСервереБезКонтекста
Функция NMEAвСтроку(Коор)
	
	Ч = Цел(Коор / 100);
	М = Цел(Коор - 100*Ч);
	С = Окр((Коор - Цел(Коор))*60, 2);
	ЧСтр = Строка(Ч);
	МСтр = Формат(М, "ЧЦ=2;ЧВН=;ЧН=");
	ССтр = Формат(С, "ЧЦ=4;ЧДЦ=2;ЧРД=.;ЧВН=;ЧН=");
	
	Возврат ЧСтр + "°" + МСтр + "'" + ССтр + """";
	
КонецФункции

// Функция конвертирует координаты из NMEA в WGS84 и возвращает их строковое представление.
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоординатWGS84(Широта, Долгота) Экспорт
	
	Если Широта = 0 И Долгота = 0 Тогда
		Возврат НСтр("ru = 'Координаты не указаны.'; uk = 'Координати не вказані.'");	
	Иначе
		Возврат СтрШаблон_(НСтр("ru = 'Широта: %1; Долгота: %2'; uk = 'Широта: %1; Довгота: %2'"),
							NMEAвСтроку(Широта), NMEAвСтроку(Долгота));	
	КонецЕсли;                     

КонецФункции 

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВЧисло(Значение)
	
	Возврат ?(ЗначениеЗаполнено(Значение), СтрокуВЧисло(Значение), 0);
	
КонецФункции

// КонверсияЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТекстМакетаКарты(ИдентификаторКарты)
	
	Результат = "";	
	
	Если ЗначениеЗаполнено(ИдентификаторКарты) Тогда
		Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакетОбработки("Карта" + ИдентификаторКарты);
		Если Макет <> Неопределено Тогда
			Результат = Макет.ПолучитьТекст();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЦентрКарты(стррЦентр)
	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки("КартаЦентр", стррЦентр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 a = 6378137.0; // Основные полуоси 
	 b = 6356752.314245; // Неосновные полуоси 
	 e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 f = 0.003352810664747; // Выравнивание эллипсоида 

	 fdLambda = (StartLong - EndLong) * D2R; 
	 fdPhi = (StartLat - EndLat) * D2R; 
	 fPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2)); 
	 fRho = (a * (1 - e2)) / Pow(fTemp, 1.5); 
	 fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean)))); 

	 // Вычисляем угловое расстояние 
	 fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2)); 

	 fz = 2 * ASin(fz); 

	 // Вычисляем смещение 
	 fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	 
	Если fAlpha > 1 Тогда
		fAlpha = 1;
	ИначеЕсли fAlpha < -1 Тогда
		fAlpha = -1;
	КонецЕсли;
	
	 fAlpha = ASin(fAlpha); 

	 // Вычисляем радиус Земли 
	 fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (fz * fR); 
	 
	Возврат Distance;
	
КонецФункции

// sk_191129 Функция добавлена в рамках (MOD-977)
// Возвращает признак использования механизма WebKit
//
// Возвращаемое значение:
//  Булево - Признак использования механизма WebKit
//
&НаСервере
Функция ИспользоватьWebKit() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.14.0") >= 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиИзХранилища()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой
	СтррКонтекст.МаксимальноеРасстояниеОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ"); 
	
КонецПроцедуры
	
// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
