#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("СписокВсеВидыДокументов");	
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Документ");
	
	ВосстановитьНастройкиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиСервер();
	Оповестить("АПКатегорииДокументовИзменение", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаСохранитьВсе(Неопределено);
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

//Код процедур и функций

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегорииДокументов

&НаКлиенте
Процедура КатегорииДокументовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТ.Идентификатор) Тогда
			СтрокаТ.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		Цвет = ?(Не ПустаяСтрока(СтрокаТ.Цвет), СтрокаТ.Цвет, "0,0,0");	
		стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Цвет", Цвет));
		Оповещение = Новый ОписаниеОповещения("КатегорииДокументовЦветВыборЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборЦвета", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовЦветВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
		Если СтрокаТ <> Неопределено Тогда
			СтрокаТ.Цвет = Результат.Цвет;
		КонецЕсли;
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовСписокДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	Список = СтрокаТ.СписокДокументов;
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Список.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиЭлементовСписка", ЭтотОбъект, "СписокВидовДокументов");
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru='Выберите виды документов';uk='Виберіть види документів'"));

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиЭлементовСписка(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "СписокВидовДокументов" Тогда
		
		СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
		Если СтрокаТ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокПолучатель = СтрокаТ.СписокДокументов;
		СписокПолучатель.Очистить();
		
		Для Каждого Элемент из Список Цикл
			Если Элемент.Пометка Тогда					
				СписокПолучатель.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПередУдалением(Элемент, Отказ)

	Отказ = Истина;	
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Текст = СтрШаблон_(НСтр("ru='Удалить выбранные категории документов (выбрано: %1) ?';uk='Видалити вибрані категорії документів (вибрано: %1)?'"), 
					Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Текст = НСтр("ru='Удалить категорию документа?';uk='Видалити категорію документа?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КатегорииДокументовПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Массив = Новый Массив(); // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Элементы.КатегорииДокументов.ВыделенныеСтроки);

		ОбъектТЧ = Объект.КатегорииДокументов;	
		Для Каждого ИдСтроки Из Массив Цикл
			ОбъектТЧ.Удалить(ОбъектТЧ.Индекс(ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки)));
		КонецЦикла;
		
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

//Код процедур и функций

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы());

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы());
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиФормы()

	Возврат "КатегорииДокументов";
	
КонецФункции // НастройкиФормы()

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции
#КонецОбласти