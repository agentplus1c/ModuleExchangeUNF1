
#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("СтатусыСправочников,СтатусНастройкиОбмена,НастройкиЛКЗаданы,Сценарий");
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.НастройкиЛКЗаданы = Ложь;
	СтррКонтекст.Сценарий = СтрРазделить_("ДоступВЛК,КаналОбмена,ЗагрузкаМУ,НастройкиАгентов"); // сценарий быстрой настройки	
	
	ПрочитатьСтатусНастроекСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗапускБыстройНастройки", 0.1, Истина);
	Оповестить("АПЗакрытьФормуОбработки", "*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить("АПНастройкиПараметровОбменаИзмененияЗаписаны", Неопределено); // чтобы обновились статусы на Главной форме
	
КонецПроцедуры

// Принимаются оповещения от ЛК, чтобы через экспортные процедуры вызывать их обработку
// в соответствующих модулях.
// 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АППрерватьБыструюНастройку" Тогда
		
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АПНастройкиПараметровОбмена_БыстраяНастройка" Тогда // загружены из ЛК канады обмена (или была ошибка загрузки)
		
		СтатусСтрокиПопыткаОбновитьИнформацию("КаналОбмена", Параметр);
		ШагСценарияКаналОбмена();
		
	ИначеЕсли ИмяСобытия = "АПМобильныеУстройства_БыстраяНастройка" Тогда
		
		СтатусСтрокиПопыткаОбновитьИнформацию("ЗагрузкаМУ", Параметр);
		Если Параметр <> Неопределено И Параметр.ЕстьОшибки Тогда // были ошибки на предыдущем шаге
			СтатусСтрокиУстановитьЭтап("ЗагрузкаМУ", 100); // прерываем шаг сценария и переходим на следующий шаг
		Иначе
			ШагСценарияЗагрузкаМУ();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Форма

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

&НаКлиенте
Процедура ЗапускБыстройНастройки()
	
	СтатусНастройкиОбмена = СтррКонтекст.СтатусНастройкиОбмена;
	Если СтатусНастройкиОбмена.КодСостояния = "НеУказанКаталогДанных" Тогда // каталог данных устанавливаем сразу
		МодульНастроек = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиМодуля", СтррКонтекст, ЭтаФорма, "АПВнешнийВызов");
		МодульНастроек.УстановитьКаталогДанныхПоУмолчанию(Ложь);
		ПрочитатьСтатусНастроекСервер();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ШагСценария" + СтррКонтекст.Сценарий[0], 0.1, Истина);    
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтатусНастроекСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.СтатусНастройкиОбмена = ТекОбъект.НастройкиОбменаГотовыКРаботе();
	СтррКонтекст.СтатусыСправочников = РеквизитФормыВЗначение("Объект").СправочникиГотовыКРаботе("НастройкиАгентов,МобильныеУстройства");
	
	ЛКЛогин  = ТекОбъект.ПрочитатьЗначениеНастройки("ЛКЛогин");
	ЛКПароль = ТекОбъект.ПрочитатьЗначениеНастройки("ЛКПароль");
	
	СтррКонтекст.НастройкиЛКЗаданы = Не ПустаяСтрока(ЛКЛогин) И Не ПустаяСтрока(ЛКПароль);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Статусы

&НаКлиенте 
Процедура СтатусСтрокиОбновить(ШагСценария, Статус = Неопределено, Описание = Неопределено, Информация = Неопределено)
	
	мСтроки = ТЗСтатусы.НайтиСтроки(Новый Структура("ШагСценария", ШагСценария));
	Если мСтроки.Количество() = 0 Тогда
		СтрокаТ = ТЗСтатусы.Добавить();
		СтрокаТ.ШагСценария = ШагСценария;
	Иначе
		СтрокаТ = мСтроки[0];
	КонецЕсли;
	
	Если Статус <> Неопределено Тогда
		СтрокаТ.Статус = Статус;
		Если Элементы.ТЗСтатусы.ТекущаяСтрока <> СтрокаТ.ПолучитьИдентификатор() Тогда
		    Элементы.ТЗСтатусы.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор()
		КонецЕсли; 
	КонецЕсли; 
	
	Если Описание <> Неопределено Тогда
		СтрокаТ.Описание = Описание;
	КонецЕсли; 
	
	Если Информация <> Неопределено Тогда
		СтрокаТ.Информация = Информация;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте 
Функция СтатусСтрокиПолучитьЭтап(ШагСценария)
	
	мСтроки = ТЗСтатусы.НайтиСтроки(Новый Структура("ШагСценария", ШагСценария));
	Если мСтроки.Количество() = 0 Тогда
		Возврат 1;
	Иначе
		Возврат мСтроки[0].Этап;
	КонецЕсли;
	
КонецФункции

&НаКлиенте 
Процедура СтатусСтрокиУстановитьЭтап(Знач ШагСценария, Этап, ЖдатьВнешнееСобытие = Ложь)
	
	мСтроки = ТЗСтатусы.НайтиСтроки(Новый Структура("ШагСценария", ШагСценария));
	Если мСтроки.Количество() = 1 Тогда
		мСтроки[0].Этап = Этап;
	КонецЕсли;
	
	Если Этап >= 99 Тогда // переходим на следующий шаг сценария
		мСценарий = СтррКонтекст.Сценарий;
		Индекс = мСценарий.Найти(ШагСценария);
		Индекс = Индекс + 1;
		Если Индекс = мСценарий.Количество() Тогда // весь сценарий пройден
			СтатусСтрокиОбновить("Финал", 0, НСтр("ru='Быстрая настройка завершена.';uk='Швидке налаштування завершено.'"));
			Возврат; // сценарий завершен
		Иначе
			ШагСценария = мСценарий[Индекс];
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЖдатьВнешнееСобытие Тогда
		ПодключитьОбработчикОжидания("ШагСценария" + ШагСценария, 0.5, Истина);    		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСтрокиПопыткаОбновитьИнформацию(ШагСценария, стррПараметр)

	Если ТипЗнч(стррПараметр) = Тип("Структура") Тогда
		Информация = Неопределено; Описание = Неопределено;
		Если стррПараметр.Свойство("Описание") Тогда
			Описание = стррПараметр.Описание;
		КонецЕсли; 
		Если стррПараметр.Свойство("Сообщения") Тогда
			Информация = "";
			Для Каждого ТекстСообщения Из стррПараметр.Сообщения Цикл
				Информация = Информация + ?(Информация = "", "", Символы.ПС) + ТекстСообщения;
			КонецЦикла; 
		КонецЕсли;
		Статус = ?(стррПараметр.ЕстьОшибки, 2, Неопределено);
		СтатусСтрокиОбновить(ШагСценария, Статус, Описание, Информация);
	КонецЕсли; 

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Статусы
#КонецОбласти

&НаКлиенте
Процедура ШагСценарияДоступВЛК()
	
	ШагСценария = "ДоступВЛК";
	
	Этап = СтатусСтрокиПолучитьЭтап(ШагСценария);
	
	Если Этап = 1 Тогда // проверяем доступ в ЛК
		Если СтррКонтекст.НастройкиЛКЗаданы Тогда
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Настроен доступ в ""Личный кабинет"".';uk='Налаштований доступ до ""Особистого кабінету"".'"));
			Этап = 99;  // доступ в ЛК настроен, шаг сценария завершен
		Иначе
			СтатусСтрокиОбновить(ШагСценария, 3, НСтр("ru='Настройка доступа в ""Личный кабинет""...';uk='Налаштування доступу в ""Особистий кабінет"" ...'"));
		КонецЕсли; 
	ИначеЕсли Этап = 2 Тогда // просим задать пользователя логин и пароль для доступа в ЛК
		МодульЛК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "ЛичныйКабинет", СтррКонтекст, ЭтаФорма);
		МодульЛК.ВнешнийВызовЗадатьЛогинИПароль();
		Возврат;
	КонецЕсли; 
	
	СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагСценарияКаналОбмена()
	
	ШагСценария = "КаналОбмена";
	
	Этап = СтатусСтрокиПолучитьЭтап(ШагСценария);
	
	Если Этап = 1 Тогда // проверяем настройку канала обмена
		СтатусНастройкиОбмена = СтррКонтекст.СтатусНастройкиОбмена;
		Если СтатусНастройкиОбмена.КодСостояния = "НеВыбранСпособ" Или СтатусНастройкиОбмена.КодСостояния = "НеЗаполненыРеквизиты" Тогда
			СтатусСтрокиОбновить(ШагСценария, 3, НСтр("ru='Получение канала обмена из ""Личного кабинета""...';uk='Отримання каналу обміну з ""Особистого кабінету"" ...'"));
		Иначе
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Канал обмена настроен.';uk='Канал обміну налаштований.'"));
			Этап = 99; // канал настроен, шаг сценария завершен
		КонецЕсли;
	ИначеЕсли Этап = 2 Тогда // получаем канал из ЛК
		// Чтобы правильно обработать следующий шаг сценария после получения события "АПНастройкиПараметровОбмена_БыстраяНастройка",
		// заранее обновляем статус до следующего шага.
		СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1, Истина); 
		МодульНастроек = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиМодуля", СтррКонтекст, ЭтаФорма, "АПВнешнийВызов");
		МодульНастроек.ВнешнийВызовЛКЗагрузитьКаналыОбмена(); // асинхронный вызов
		// результат будет возвращен в оповещнии "АПНастройкиПараметровОбмена_БыстраяНастройка"
		Возврат;
	ИначеЕсли Этап = 3 Тогда // проверяем результат получения канала из ЛК 
		ПрочитатьСтатусНастроекСервер();
		СтатусНастройкиОбмена = СтррКонтекст.СтатусНастройкиОбмена;
		Если СтатусНастройкиОбмена.КодСостояния = "НеВыбранСпособ" Или СтатусНастройкиОбмена.КодСостояния = "НеЗаполненыРеквизиты" Тогда
			СтатусСтрокиОбновить(ШагСценария, 2, НСтр("ru='Канал обмена не настроен.';uk='Канал обміну не налаштований.'"));
		Иначе
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Канал обмена настроен.';uk='Канал обміну налаштований.'"));
		КонецЕсли;
		Этап = 99;
	КонецЕсли; 
	
	СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1);

КонецПроцедуры

// Загрузка мобильных устройств из ЛК
&НаКлиенте
Процедура ШагСценарияЗагрузкаМУ()
	
	ШагСценария = "ЗагрузкаМУ";
	
	Этап = СтатусСтрокиПолучитьЭтап(ШагСценария);
	Если Этап = 1 Тогда
		ПрочитатьСтатусНастроекСервер();
		стррСтатусАгенты = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
		стррСтатусМУ 	 = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
		Если стррСтатусАгенты.Готов И стррСтатусМУ.Готов Тогда // справочники агентов и МУ в порядке
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='МУ и настройки агентов настроены.';uk='МП та налаштування агентів налаштовані.'"));
			Этап = 99; // МУ и агенты настроены, шаг сценария завершен
		Иначе // даже если замечания только с справочнику агентов, загружаем список МУ, т.к. в ЛК могут быть указаны
			СтатусСтрокиОбновить(ШагСценария, 3, НСтр("ru='Загрузка мобильных устройств из ""Личного кабинета""...';uk='Завантаження мобільних пристроїв з ""Особистого кабінету""...'"));
		КонецЕсли;
	ИначеЕсли Этап = 2 Тогда // загрузка МУ из ЛК
		// Чтобы правильно обработать следующий шаг сценария после получения события "АПМобильныеУстройства_БыстраяНастройка",
		// заранее обновляем статус до следующего шага.
		СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1, Истина); 
		МодульМУ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МобильныеУстройства", СтррКонтекст, ЭтаФорма, "АПВнешнийВызов");
		МодульМУ.ВнешнийВызовЛКЗагрузитьМУ(); // результат будет возвращен в оповещнии "АПМобильныеУстройства_БыстраяНастройка"
		Возврат;
	ИначеЕсли Этап = 3 Тогда // проверка результата загрузки МУ из ЛК - в т.ч. по оповещению "АПМобильныеУстройства_БыстраяНастройка"
		ПрочитатьСтатусНастроекСервер();		
		стррСтатусМУ 	 = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
		Если Не стррСтатусМУ.Готов Тогда
			СтатусСтрокиОбновить(ШагСценария, 2, НСтр("ru='Мобильные устройства не загружены.';uk='Мобільні пристрої незавантажені.'"));
		Иначе
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Мобильные устройства загружены.';uk='Мобільні пристрої завантажені.'"));
		КонецЕсли;
		Этап = 99; // следующий шаг - наведение порядка в настройках справочника агентов
	КонецЕсли; 
	
	СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагСценарияНастройкиАгентов()
	
	ШагСценария = "НастройкиАгентов";
	
	Этап = СтатусСтрокиПолучитьЭтап(ШагСценария);
	Если Этап = 1 Тогда
		ПрочитатьСтатусНастроекСервер();
		стррСтатусАгенты = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
		Если стррСтатусАгенты.Готов Тогда // настройки агентов корректны
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Установлены настройки для агентов.';uk='Встановлено налаштування для агентів.'"));
			Этап = 99;
		Иначе // нужно привести в порядок настройки агентов
			СтатусСтрокиОбновить(ШагСценария, 3, НСтр("ru='Установка настроек для агентов...';uk='Установка налаштувань для агентів...'"));
			МодульНА = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиАгентов", СтррКонтекст, ЭтаФорма, "АПВнешнийВызов"); //??? какие параметры передаем ???
			МодульНА.ВнешнийВызовПроставитьНастройки();
		КонецЕсли;
	ИначеЕсли Этап = 2 Тогда // обновлены настройки для агентов в предыдущем шаге
		ПрочитатьСтатусНастроекСервер();
		стррСтатусАгенты = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
		Если стррСтатусАгенты.Готов Тогда // настройки агентов корректны
			СтатусСтрокиОбновить(ШагСценария, 1, НСтр("ru='Установлены настройки для агентов.';uk='Встановлено налаштування для агентів.'"));
		Иначе // настойки агентов не исправлились
			СтатусСтрокиОбновить(ШагСценария, 2, НСтр("ru='Исправить настройки агентов не удалось.';uk='Виправити налаштування агентів не вдалося.'"), стррСтатусАгенты.Описание);
		КонецЕсли;
		Этап = 99;		
	КонецЕсли;
	
	СтатусСтрокиУстановитьЭтап(ШагСценария, Этап + 1);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтатусыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТ = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТ.Информация) Тогда
		ПоказатьПредупреждение(, СтрокаТ.Информация);
	КонецЕсли; 
КонецПроцедуры

// СлужебныеПроцедурыИФункции
#КонецОбласти