
#Область Описание
	
/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// 
// *** Общая информация.
// Форма предназначена для настройки мобильного приложения (Агент Плюс: Мобильная торговля Базовая 2.0).
// 
// *** Выпадающий список выбора значений для объекта ДеревоЗначений.
// В платформе 1С:Предприятие (релиз 8.3.8.1784, более свежие не тестировались) есть недочет: если в колонке
// дерева отображать значения типа "СписокЗначений", то в колонке отображается внутреннее значение выбранного элемента списка, 
// а не представление выбранного значения.
// Для обхода этого недочета в этом модуле приняты меры (для реквизита ДеревоНастроек):
// 1. Кроме колонки "Значение" используется колонка "ВнутреннееЗначение" (не отображается).
//    В колонке "ВнутреннееЗначение" всегда хранится внутреннее значение выбранного элемента списка значений.
// 2. В колонке "Значение" на момент до интерактивного выбора и после выбора хранится представление выбранного значения списка.
// 3. Перед началом выбора значения из списка (событие ДеревоНастроекВыбор()):
// 	  3.1 Заполняется СписокВыбора у редактируемой строки дерева: 
// 		  - Свойства "Значение" - внутренними значениями элементов списка;
// 		  - Свойства "Представление" - представлениями значений элементов списка (процедура ЗаполнитьСписокВыбораПоКлючу()).
// 	  3.2 Чтобы в выпадающем списке выделилось текущее выбранное значение, свойству "Значение" текущей строки дерева
//	      присваивается свойство "ВнутреннееЗначение" этой же строки: СтрокаД.Значение = СтрокаД.ВнутреннееЗначение.
// 4. В момент выбора значения из списка (событие ДеревоНастроекЗначениеОбработкаВыбора()):
//	  4.1 Отключается стандартная обработка выбора.
//	  4.2 Для корректного отображения выбранного значения в дереве:
//	  	  - Очищается список выбора.
//	  	  - В список выбора добавляется выбранное пользователем значение, но добавляется только в виде представления.
//	  	  - Свойство "Значение" редактируемой строки получает представление выбранного значения.
//	  	  - Свойство "ВнутреннееЗначение" редактируемой строки получает выбранное значение.
//	  	  - Редактирование строки принудительно завершается.
// 5. При отмене выбора значения из списка (вызывается событие ДеревоНастроекПриОкончанииРедактирования()):
// 	  5.1 У редактируемой строки свойство "Значение" заполняется представлением выбранного ранее значения
// 	  	  (выбранное ранее значение содержится в свойстве "ВнутреннееЗначение").
// 
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти

#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ФормаОткрытаДляПолученияНастроекПоУмолчанию = Ложь;
	
	Если Параметры.Свойство("ПоУмолчанию") И Параметры.ПоУмолчанию Тогда
	    ФормаОткрытаДляПолученияНастроекПоУмолчанию = Истина;
	КонецЕсли;
	
	СтррКонтекст = Новый Структура;
	СтррКонтекст.Вставить("НастройкиВыгрузкиМаршрутов"); // Gri++ 19.07.17 настройки выгрузки маршрутов - для проверки конфликта настроек мобильного приложения и настроек модуля обмена.
	СтррКонтекст.Вставить("ИдСтрокДереваНастроек", Новый Соответствие); // СД_280617 Данное соответствие используется для быстрого доступа к строке дерева значений по ключу настройки.
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ТорговыйПредставитель,НастройкиМобильногоПриложения");
	
	ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
	
	Если Не ФормаОткрытаДляПолученияНастроекПоУмолчанию Тогда
		Если Параметры.НастройкиМобильногоПриложения <> Неопределено Тогда
			НастройкиМобильногоПриложения = Параметры.НастройкиМобильногоПриложения;
		КонецЕсли;
		Текст = СтрШаблон_(НСтр("ru='Настройки мобильного приложения (агент: %1)';uk='Налаштування мобільного застосування (агент: %1)'"),СокрЛП(Параметры.ТорговыйПредставитель));
		ЭтаФорма.Заголовок =Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ДеревоНастроекПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	ДеревоНастроекЗаполнить(Ложь);
	ЗаполнитьСоответствиеДереваНастроекРекурсивно(ДеревоНастроек.ПолучитьЭлементы());
	ОбновитьПредупреждениеОНастройкахОбмена();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПослеОтвета", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru='Настройки были изменены. Сохранить изменения?';uk='Налаштування були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьНастройки();
	Оповестить("АПНастройкиМобильногоПриложенияИзмененияЗаписаны", НастройкиМобильногоПриложения);
	Закрыть();	

КонецПроцедуры

&НаКлиенте
Процедура СохранитьПослеОтвета(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаСохранить(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернуть(Команда)
	
	ЭлементДеревоНатсроек = Элементы.ДеревоНастроек;
	Для Каждого СтрокаД Из ДеревоНастроек.ПолучитьЭлементы() Цикл 
		ЭлементДеревоНатсроек.Развернуть(СтрокаД.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернуть(Команда)
	
	ЭлементДеревоНатсроек = Элементы.ДеревоНастроек;
	Для Каждого СтрокаД Из ДеревоНастроек.ПолучитьЭлементы() Цикл 
		ЭлементДеревоНатсроек.Свернуть(СтрокаД.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчаниюДляВсех(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюДляВсехПослеОтвета", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru='Заполнить все настройки значениями по умолчанию?';uk='Заповнити всі налаштування значеннями за замовчуванням?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДляВсехПослеОтвета(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ДеревоНастроекЗаполнить(Истина);
		ЗаполнитьСоответствиеДереваНастроекРекурсивно(ДеревоНастроек.ПолучитьЭлементы());
		ОбновитьПредупреждениеОНастройкахОбмена();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение значений по умолянию для выбранных строк дерева
&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчаниюВыбранные(Команда)
	
	Если Элементы.ДеревоНастроек.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Элементы.ДеревоНастроек.ВыделенныеСтроки);
	
	Для Каждого ИдСтроки Из Массив Цикл
		СтрокаД = ДеревоНастроек.НайтиПоИдентификатору(ИдСтроки);
		Если Не ПустаяСтрока(СтрокаД.Ключ) Тогда
			Если ЭтоКлючВыпадающегоСписка(СтрокаД.Ключ) Тогда // для ключей выпадающего списка в колонке "Значение" показываем представление значения
				СтрокаД.ВнутреннееЗначение = СтрокаД.ЗначениеПоУмолчанию;
				СтрокаД.Значение = ПолучитьПредставлениеЗначенияСпискаПоКлючу(СтрокаД.Ключ, СтрокаД.ВнутреннееЗначение, КэшВыпадающихСписков);
			Иначе
				СтрокаД.ВнутреннееЗначение = Неопределено;				
				СтрокаД.Значение = СтрокаД.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	ОбновитьПредупреждениеОНастройкахОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)

	Массив = Новый Массив;
	Массив.Добавить(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеПоУмолчанию));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	Элемент.ТекущийЭлемент.ОграничениеТипа = ОписаниеТипов;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииЯчейки(Элемент)

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
		ПодготовитьПолеНастройкиКИзменению(Элемент);
	КонецЕсли;
	
	Подсказка = ТекДанные.Подсказка;
	
	Если Не ПустаяСтрока(ТекДанные.ПодсказкаДополнение) Тогда
		Подсказка = Подсказка + Символы.ПС + ТекДанные.ПодсказкаДополнение;
	КонецЕсли;
	
	ОписаниеНастройки = Подсказка;

КонецПроцедуры

// Событие вызывается после завершения интерактивных изменений в строке.
&НаКлиенте
Процедура ДеревоНастроекПриИзменении(Элемент)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Или Элемент.ТекущийЭлемент.Имя <> "ДеревоНастроекЗначение" Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = СтрокаД.Ключ;
	Значение = СтрокаД.Значение;
	БылиИзменения = Ложь;
	
	Если Ключ = "СписокБазДанных" Тогда // проверяем - верно ли указаны пользователем названия БД
		
		Если ТипЗнч(Значение) <> Тип("СписокЗначений") Или Значение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИсключаемыеСимволы = " .,;:?!-+\/*=%<>{}@'""|"; // запрещенные символы в названии БД
		ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
		
		НовоеЗначение = СписокЗначенийСОграничениемПоТипуЗначений();
		
		Для Каждого ЭлементБД Из Значение Цикл
			
			ИмяБДПрежнее = ЭлементБД.Значение;
			ИмяБД = СокрЛП(ИмяБДПрежнее);
			
			Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
				ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
				ИмяБД = СтрЗаменить(ИмяБД, ИсключитьСимвол, "");
			КонецЦикла;
			
			Если ИмяБД <> ИмяБДПрежнее Тогда
				БылиИзменения = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(ИмяБД) Тогда // имя сократилось до пустой строки
				БылиИзменения = Истина;
			Иначе
				НовоеЗначение.Добавить(ИмяБД);				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Ключ = "КаталогХраненияРезервныхКопий" Или Ключ = "КаталогБазыДанных" Или Ключ = "КаталогКартинок" Тогда
		
		НовоеЗначение = СокрЛП(Значение);
		Если Не ПустаяСтрока(НовоеЗначение) И Прав(НовоеЗначение, 1) <> "/" Тогда
			НовоеЗначение = НовоеЗначение + "/";
		КонецЕсли;
		БылиИзменения = НовоеЗначение <> Значение;
		
	КонецЕсли;
	
	Если БылиИзменения Тогда
		СтрокаД.Значение = НовоеЗначение;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	ОбновитьПредупреждениеОНастройкахОбмена();
	
КонецПроцедуры

// Событие вызывается перед началом изменения строки по двойному клику или по нажатию клавиши "Enter".
&НаКлиенте
Процедура ДеревоНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтрокаД = Элемент.ТекущиеДанные;
	Если Поле.Имя <> "ДеревоНастроекЗначение" Или СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = СтрокаД.Ключ;
		
	Если Ключ = "РасписаниеВеденияТрека" Тогда
		
		СтандартнаяОбработка = Ложь;
		// значения расписания хранятся в параметре ВнутреннееЗначение
		ПараметрыФормы = Новый Структура("Расписание", СтрокаД.ВнутреннееЗначение);
		ОткрытьФорму(СтррКонтекст.ПутьКФорме + "РасписаниеТрекинга", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Ключ = "СписокЗакладокЖурнала" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокВыбранныхЗакладок = СтрокаД.Значение; // список выбранных закладок из настроек
		СписокДляПометки = СтрокаД.ЗначениеПоУмолчанию.Скопировать(); // в списке ЗначениеПоУмолчанию представлен полный список закладок
			
		Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
			ЭлементСписка.Пометка = (Неопределено <> СписокВыбранныхЗакладок.НайтиПоЗначению(ЭлементСписка.Значение)); 
		КонецЦикла;
			
		Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиЭлементовСписка", ЭтотОбъект, Ключ);
		СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru='Выберите закладки журнала документов';uk='Виберіть закладки журналу документів'"));
		
	ИначеЕсли ЭтоКлючВыпадающегоСписка(Ключ) Тогда // подготавливаем выпадающий список для выбора значений
		
		ЗаполнитьСписокВыбораПоКлючу(Элемент.ТекущийЭлемент.СписокВыбора, Ключ); 
		СтрокаД.Значение = СтрокаД.ВнутреннееЗначение; // чтобы в выпадающем списке выделилось текущее значение
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаД = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ЭтоКлючВыпадающегоСписка(СтрокаД.Ключ) Тогда
		СтандартнаяОбработка = Ложь;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Представление);
		СтрокаД.Значение = ЭлементСписка.Представление;	// чтобы визуально пользователь видел представление выбранного значения	
		СтрокаД.ВнутреннееЗначение = ВыбранноеЗначение;
		Элементы.ДеревоНастроек.ЗакончитьРедактированиеСтроки(Ложь); 
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиЭлементовСписка(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "СписокЗакладокЖурнала" Тогда
	
		СписокВыбранныхЗакладок = Новый СписокЗначений;
		Для Каждого Элемент из Список Цикл
			Если Элемент.Пометка Тогда					
				СписокВыбранныхЗакладок.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;   			
		
		Если СписокВыбранныхЗакладок.Количество() > 0 Тогда
			Элементы.ДеревоНастроек.ТекущиеДанные.Значение = СписокВыбранныхЗакладок;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СтрокаД = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ИмяСобытия = "АПИзменениеРасписанияВеденияТрека" Тогда
		Если СтрокаД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаД.ВнутреннееЗначение = Параметр; 
		СтрокаД.Значение = ВернутьПредставлениеРасписанияТрекинга(Параметр);
		
	ИначеЕсли ИмяСобытия = "АПНастройкиПараметровОбменаИзмененияЗаписаны" Тогда
		
		ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
		ОбновитьПредупреждениеОНастройкахОбмена();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если (СтрокаД <> Неопределено) И ЭтоКлючВыпадающегоСписка(СтрокаД.Ключ) Тогда
		// Нужно обновить представление выбранного значения в поле "Значение", т.к. в случае отмены редактирования 
		// или клике за пределами выпадающего списка в поле "Значение" показывается внутреннее значение выбранного элемента.
		СтрокаД.Значение = ПолучитьПредставлениеЗначенияСпискаПоКлючу(СтрокаД.Ключ, СтрокаД.ВнутреннееЗначение, КэшВыпадающихСписков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	МодульК().ОткрытьФормуОбработки("НастройкиМодуля");
	Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "ВыбратьВыгружатьМаршруты"));

КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции 

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

&НаСервере
Процедура ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища()
	
	СтррКонтекст.НастройкиВыгрузкиМаршрутов	= РеквизитФормыВЗначение("Объект").ПрочитатьЗначенияНастроек("ВыгружатьМаршруты,ИнтервалВыгрузкиМаршрутов");
	
КонецПроцедуры

// Добавляет настройку в таблицу всех настроек мобильного приложения.
// Перед вызовом параметр СтррНастройка заполнен всеми значениями, кроме свойства Значение.
// Значение ключа считывается в самой процедуре.
&НаСервере
Процедура ДобавитьНастройкуВТаблицу(Ветка, СтррНастройка, ЭтоГруппа, ТолькоПросмотр, ЗаполнитьПоУмолчанию)

	СтрокаД = Ветка.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаД, СтррНастройка);
	СтрокаД.ИндексКартинки = ?(ЭтоГруппа, 1, 0);

	Если ЗаполнитьПоУмолчанию Тогда // СтрокаД.Значение уже заполнено значением по умолчанию
		
		Значение = СтрокаД.ЗначениеПоУмолчанию;
		
	Иначе // читаем значение из сохраненных настроек
		
		Значение = СохраненноеЗначениеНастройки(СтррНастройка.Ключ);
		Если Значение = Неопределено Тогда
			Значение = СтрокаД.ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКлючВыпадающегоСписка(СтрокаД.Ключ) Тогда // нужно обновить представление значения списка
		СтрокаД.ВнутреннееЗначение = Значение;
		СтрокаД.Значение = ПолучитьПредставлениеЗначенияСпискаПоКлючу(СтрокаД.Ключ, СтрокаД.ВнутреннееЗначение, КэшВыпадающихСписков);
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда // Для значений типа "Структура" должно быть свое представление
		СтрокаД.ВнутреннееЗначение = Значение;
		СтрокаД.Значение = ПредставлениеСтруктурыНастройки(СтрокаД.Ключ, СтрокаД.ВнутреннееЗначение);
	Иначе
		СтрокаД.Значение = Значение;
	КонецЕсли;
	
	// СД_280617 Не совсем понял, зачем здесь запоминаем ИдСтрокиИспользоватьМаршруты, всегда принимает нулевое значение.
	//Если СтрокаД.Ключ = "ИспользоватьМаршруты" Тогда // запоминаем идентификатор строки, отвечающей за использование маршрутов 
	//	СтррКонтекст.ИдСтрокиИспользоватьМаршруты = Ветка.Индекс(СтрокаД); // значение используется для проверки включения выгрузки маршрутов в настройках обмена
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	ДеревоНастроекАгента = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	НастройкиМобильногоПриложения = Новый Структура;
	Для Каждого СтрокаД Из ДеревоНастроекАгента.Строки Цикл
		ДобавитьНастройки(СтрокаД, НастройкиМобильногоПриложения);
	КонецЦикла;
	ЭтаФорма.Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройки(СтрокаДереваНастроек, НастройкиМобильногоПриложения)

	Если СтрокаДереваНастроек.Строки.Количество() = 0 Тогда
		Если Не НастройкиМобильногоПриложения.Свойство(СтрокаДереваНастроек.Ключ) Тогда
			СтррНастройки = Новый Структура("Идентификатор,Значение"); 
			СтррНастройки.Идентификатор = СтрокаДереваНастроек.Идентификатор;
			СтррНастройки.Значение = ?(СтрокаДереваНастроек.ВнутреннееЗначение <> Неопределено, 
				СтрокаДереваНастроек.ВнутреннееЗначение, СтрокаДереваНастроек.Значение);
			НастройкиМобильногоПриложения.Вставить(СтрокаДереваНастроек.Ключ, СтррНастройки);
		КонецЕсли;
	Иначе
		Для Каждого СтрокаНастроек Из СтрокаДереваНастроек.Строки Цикл
			ДобавитьНастройки(СтрокаНастроек, НастройкиМобильногоПриложения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Формирует дерево настроек мобильного приложения.
// 
&НаСервере
Функция ДеревоНастроекЗаполнить(ЗаполнитьПоУмолчанию)

	ДеревоНастроекАгента = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	ДеревоНастроекАгента.Строки.Очистить();

	МакетНастроек = РеквизитФормыВЗначение("Объект").ПолучитьМакетОбработки("НастройкиМобильногоПриложения");
	НомерСтроки = 2;
	
	Пока НомерСтроки <= МакетНастроек.ВысотаТаблицы Цикл
		
		ГруппаНастроекКлюч1 = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 1).ТекущаяОбласть.Текст);
		ГруппаНастроекКлюч2 = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 2).ТекущаяОбласть.Текст);
		ГруппаНастроекКлюч3 = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 3).ТекущаяОбласть.Текст);
		ЭтоГруппа = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки,10).ТекущаяОбласть.Текст);
		
		стррНастройка = Новый Структура("Идентификатор,Ключ,Настройка,ЗначениеПоУмолчанию,Подсказка,ПодсказкаДополнение,ТолькоПросмотр");
		стррНастройка.Идентификатор = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 4).ТекущаяОбласть.Текст);
		стррНастройка.Ключ = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 5).ТекущаяОбласть.Текст);
		стррНастройка.Настройка = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 6).ТекущаяОбласть.Текст);
		стррНастройка.Подсказка = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 7).ТекущаяОбласть.Текст);
		стррНастройка.ПодсказкаДополнение = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 8).ТекущаяОбласть.Текст);
		стррНастройка.ЗначениеПоУмолчанию = ЗначениеНастройкиПоУмолчанию(СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки, 9).ТекущаяОбласть.Текст));
		стррНастройка.ТолькоПросмотр = СокрЛП(МакетНастроек.ПолучитьОбласть(НомерСтроки,11).ТекущаяОбласть.Текст);
		
		// При добавлении нового типа настроек (например, новый справочник),
		// нужно добавить этот тип для колонок реквизитов "Значение" и "ЗначениеПоУмолчанию" для деревьев настроек на форме.
		
		Если Не ЗначениеЗаполнено(ЭтоГруппа) Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;

		Если Не ПустаяСтрока(ГруппаНастроекКлюч1) Тогда
			ТекРодитель = ДеревоНастроекАгента.Строки.Найти(ГруппаНастроекКлюч1, "Ключ");
			Если ТекРодитель = Неопределено Тогда
				Текст = СтрШаблон_(НСтр("ru = 'Ошибка при вставке элемента ""%1"" в дерево настроек. 
                                         |Причина: не найден в макете элемент 1-го уровня со значением Ключ = ""%2""!'; uk = 'Помилка при вставці елемента ""%1"" в дерево налаштувань. 
                                         |Причина: не знайдений в макеті елемент 1-го рівня зі значенням Ключ = ""%2""!'"), 
					стррНастройка.Настройка, ГруппаНастроекКлюч1);
				ВызватьИсключение(Текст);
			КонецЕсли; 
			
			МестоВставки = ТекРодитель.Строки;
			
			Если Не ПустаяСтрока(ГруппаНастроекКлюч2) Тогда
				ТекРодитель = МестоВставки.Найти(ГруппаНастроекКлюч2, "Ключ");
				Если ТекРодитель = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Ошибка при вставке элемента ""%1"" в дерево настроек. 
                                             |Причина: не найден в макете элемент 2-го уровня со значением Ключ = ""%2""!'; uk = 'Помилка при вставці елемента ""%1"" в дерево налаштувань. 
                                             |Причина: не знайдений в макеті елемент 2-го рівня зі значенням Ключ = ""%2""!'"), 
						стррНастройка.Настройка, ГруппаНастроекКлюч2);
					ВызватьИсключение(Текст);
				КонецЕсли; 
				МестоВставки = ТекРодитель.Строки;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ГруппаНастроекКлюч3) Тогда
				ТекРодитель = МестоВставки.Найти(ГруппаНастроекКлюч3, "Ключ");
				Если ТекРодитель = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Ошибка при вставке элемента ""%1"" в дерево настроек. 
                                             |Причина: не найден в макете элемент 2-го уровня со значением Ключ = ""%2""!'; uk = 'Помилка при вставці елемента ""%1"" в дерево налаштувань. 
                                             |Причина: не знайдений в макеті елемент 2-го рівня зі значенням Ключ = ""%2""!'"), 
						стррНастройка.Настройка, ГруппаНастроекКлюч3);
					ВызватьИсключение(Текст);
				КонецЕсли; 
				МестоВставки = ТекРодитель.Строки;
			КонецЕсли;
		Иначе // добавление элемента на самый верхний уровень
			МестоВставки = ДеревоНастроекАгента.Строки;
		КонецЕсли;
		
		ДобавитьНастройкуВТаблицу(МестоВставки, стррНастройка, ЭтоГруппа, стррНастройка.ТолькоПросмотр, ЗаполнитьПоУмолчанию);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоНастроекАгента, "ДеревоНастроек");

	Возврат Истина;
	
КонецФункции

// Функция конвертирует строковое обозначение значения "по умолчанию" в значение платформы 1С:Предприятие
&НаСервере
Функция ЗначениеНастройкиПоУмолчанию(Значение)

	Если Значение = "Истина" Тогда
		Результат = Истина;
	ИначеЕсли Значение = "Ложь" Тогда
		Результат = Ложь;
	ИначеЕсли Значение = "Агент" Тогда 
		Результат = Объект.ВыбАгент;
	ИначеЕсли Значение = "ПапкаРезервныхКопийПоУмолчаниюВМУ" Тогда
		Результат = "/data/data/ru.agentplus.agentp2/backup/";
	ИначеЕсли Значение = "КаталогКартинок" Тогда
		Результат = КаталогКартинок;
	ИначеЕсли Лев(Значение, 6) = "Число_" Тогда
		Результат = Число(СтрЗаменить(Значение, "Число_", ""));
	ИначеЕсли Значение = "Структура" Тогда
		Результат = Новый Структура;
	ИначеЕсли Значение = "СписокЗакладокЖурнала" Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		Результат = ТекОбъект.ПолучитьВсеЗакладкиЖурналаДокументовДляМУ();
	ИначеЕсли Значение = "СписокБазДанных" Тогда
		Результат = СписокЗначенийСОграничениемПоТипуЗначений(); // заранее типизируем значения в списке для простого интерактивного редактирования
	ИначеЕсли Значение = "РасписаниеВеденияТрека" Тогда
		Результат = ""; // пустая строка - признак пустого значения расписания
	ИначеЕсли Значение = "ИспользоватьМаршруты" Или Значение = "ПриоритетПоМаршрутам" Тогда
		Результат = (СтррКонтекст.НастройкиВыгрузкиМаршрутов.ВыгружатьМаршруты = Истина);
	Иначе
		Результат = Значение;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ЗначениеНастройкиПоУмолчанию()

&НаСервере 
Функция ПредставлениеСтруктурыНастройки(Ключ, СтррЗначение)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Ключ = "РасписаниеВеденияТрека" Тогда
		Результат = ТекОбъект.ПредставлениеРасписанияТрекинга(СтррЗначение);
	Иначе
		Результат = ТекОбъект.СтруктураПредставление(СтррЗначение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение сохраненной настройки по ключу.
// Если настройка не была сохранена, то возвращает Неопределено.
&НаСервере
Функция СохраненноеЗначениеНастройки(Ключ)

	Результат = Неопределено;
	
	Если ТипЗнч(НастройкиМобильногоПриложения) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтррНастройка = Неопределено;
	НастройкиМобильногоПриложения.Свойство(Ключ, СтррНастройка);
	Если ТипЗнч(СтррНастройка) = Тип("Структура") Тогда // значит настройка была сохранена
		СтррНастройка.Свойство("Значение", Результат); // у сохраненной настройки должно быть свойство Значение
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ФормированиеСписков

// Функция создает и возвращает пустой список значений с заранее типизированными значениями.
// Типизация требуется для интерактивного редактирования списка без уточнения типа значений у пользователя.
&НаКлиентеНаСервереБезКонтекста
Функция СписокЗначенийСОграничениемПоТипуЗначений(ТипСтр = "Строка")
	
	Список = Новый СписокЗначений;
	Список.ТипЗначения = Новый ОписаниеТипов(ТипСтр); // заранее типизируем значения в списке для простого интерактивного редактирования
	
	Возврат Список;
	
КонецФункции

// Функция возвращает Истина, если значение для ключа настройки должно выбираться из списка значений.
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКлючВыпадающегоСписка(Ключ)

	Стр = ",РежимОпределенияКоординат,ПоведениеДокументаБезКоординат,РежимСортировкиНоменклатуры,РежимЗаписиДокументаУдаленноОтКлиента"; 
	Возврат 0 <> Найти(Стр+",", ","+Ключ+",");

КонецФункции

// Процедура заполняет список выбора значений для соответствующего ключа (если для ключа предусмотрен выбор из списка).
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораПоКлючу(Список, Ключ)

	Список.Очистить();
	Если Ключ = "РежимОпределенияКоординат" Тогда
		Список.Добавить("GPS", "GPS");
		Список.Добавить("МобильныеCети", 				НСтр("ru='Мобильные сети';uk='Мобільні мережі'"));
		Список.Добавить("GPSИМобильныеCети", 			НСтр("ru='GPS и мобильные сети';uk='GPS і мобільні мережі'"));
	ИначеЕсли Ключ = "ПоведениеДокументаБезКоординат" Тогда
		Список.Добавить("ЗапросПовторнойПопытки", 		НСтр("ru='Выводить запрос о повторной попытке';uk='Виводити запит про повторну спробу'"));
		Список.Добавить("ПроводитьБезКоординат", 		НСтр("ru='Проводить документ без координат';uk='Проводити документ без координат'"));
		Список.Добавить("ЗапрещатьПроводить", 			НСтр("ru='Запрещать проводить документ';uk='Забороняти проводити документ'"));
		Список.Добавить("ЗапрещатьПроводитьИСохранять", НСтр("ru='Запрещать проводить и сохранять документ';uk='Забороняти проводити і зберігати документ'"));
	ИначеЕсли Ключ = "РежимСортировкиНоменклатуры" Тогда
		Список.Добавить("Код", 							НСтр("ru='По коду';uk='За кодом'"));
		Список.Добавить("Наименование", 				НСтр("ru='По наименованию';uk='За назвою'"));
		Список.Добавить("Остаток", 						НСтр("ru='По остатку';uk='За залишком'"));
		Список.Добавить("ПорядокВФайлеВыгрузки", 		НСтр("ru='По порядку в файле выгрузки';uk='Один по одному в файлі вивантаження'"));
	ИначеЕсли Ключ = "РежимЗаписиДокументаУдаленноОтКлиента" Тогда
		Список.Добавить("НеЗаписывать", 				НСтр("ru='Не записывать';uk='Не записувати'"));
		Список.Добавить("НеПроводить", 					НСтр("ru='Не проводить';uk='Не проводити'"));
	Иначе 
		ВызватьИсключение(НСтр("ru = 'Для заполнения списка выбора передан неизвестный ключ: '; uk = 'Для заповнення списку вибору переданий невідомий ключ: '") + Ключ);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗначенияСпискаПоКлючу(Ключ, Значение, Кэш)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если Не Кэш.Свойство(Ключ) Тогда
		Список = Новый СписокЗначений;
		ЗаполнитьСписокВыбораПоКлючу(Список, Ключ);		
		Кэш.Вставить(Ключ, Список);
	Иначе
		Список = Кэш[Ключ];	
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	Если ЭлементСписка <> Неопределено Тогда
		Возврат ЭлементСписка.Представление;
	Иначе
		Возврат "<" + Строка(Значение) + ">";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонстантыПолучитьЗначение(ИмяКонстанты) 

	Возврат Константы[ИмяКонстанты].Получить();	
	
КонецФункции

// ФормированиеСписков.СлужебныеПроцедурыИФункции
#КонецОбласти

&НаКлиенте
Процедура ПодготовитьПолеНастройкиКИзменению(Элемент)

	СтрокаД = Элемент.ТекущиеДанные;
	
	ПолеФормы = Элемент.ПодчиненныеЭлементы.ДеревоНастроекЗначение;
	ПолеФормы.ТолькоПросмотр = СтрокаД.ТолькоПросмотр;
	Если ПолеФормы.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = Новый Структура(
		"КнопкаРегулирования,КнопкаСпискаВыбора,КнопкаВыпадающегоСписка,КнопкаВыбора,КнопкаОчистки,КнопкаОткрытия,РедактированиеТекста,РежимВыбораИзСписка");
	Для Каждого Свойство Из Свойства Цикл
		Свойства[Свойство.Ключ] = Ложь;
	КонецЦикла;
	
	ТипЗначения = ТипЗнч(СтрокаД.ЗначениеПоУмолчанию);
	
	ПолеФормы.СписокВыбора.Очистить();

	Если ЭтоКлючВыпадающегоСписка(СтрокаД.Ключ) Тогда
		Свойства.КнопкаВыпадающегоСписка = Истина;
		Свойства.РежимВыбораИзСписка 	 = Истина;  // не работает как описано в документации (релиз 8.3.8.1784) - выбранное значение списка показывается в дереве как значение, а не как представлениее
	ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
		Свойства.КнопкаВыбора 			= Истина;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Свойства.КнопкаОчистки 			= Истина;
		Свойства.РедактированиеТекста	= Истина;
	ИначеЕсли ТипЗначения = Тип("Число") Или ТипЗначения = Тип("Дата") Тогда 
		Свойства.КнопкаОчистки 			= Истина;		
		Свойства.РедактированиеТекста	= Истина;
		Свойства.КнопкаВыбора 			= Истина;
		ПолеФормы.МинимальноеЗначение = 0;
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Свойства.КнопкаВыбора 			= Истина;
	Иначе
		Свойства.КнопкаОчистки 			= Истина;		
		Свойства.КнопкаВыбора 			= Истина;
		Свойства.КнопкаОткрытия 		= Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПолеФормы, Свойства);
	
КонецПроцедуры

// Возвращает строковое представление расписания ведения трекинга
&НаСервере
Функция ВернутьПредставлениеРасписанияТрекинга(СтррРасписание)
	
	Возврат РеквизитФормыВЗначение("Объект").ПредставлениеРасписанияТрекинга(СтррРасписание);
	
КонецФункции

// Процедура заполняет соответствие СтррКонтекст.ИдСтрокДереваНастроек парами <КлючНастройки, ИдентификаторСтроки>, где:
//  	КлючНастройки - свойство Ключ строки дерева значений;
//  	ИдентификаторСтрки - идетификатор строки дерева значений.
// Данное соответствие используется для быстрого доступа к строке дерева значений по ключу настройки.
&НаКлиенте
Процедура ЗаполнитьСоответствиеДереваНастроекРекурсивно(ЭлементыДерева)
	
	Для Каждого ТекЭлемент Из ЭлементыДерева Цикл 
		СтррКонтекст.ИдСтрокДереваНастроек.Вставить(ТекЭлемент.Ключ, ТекЭлемент.ПолучитьИдентификатор());
		ЗаполнитьСоответствиеДереваНастроекРекурсивно(ТекЭлемент.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеОНастройкахОбмена()
	
	СтрокаД = ДеревоНастроек.НайтиПоИдентификатору(СтррКонтекст.ИдСтрокДереваНастроек.Получить("ИспользоватьМаршруты"));
	Если СтрокаД = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'Не найдена строка дерева с ключом ИспользоватьМаршруты'; uk = 'Не знайдена рядок дерева з ключем ИспользоватьМаршруты'"));
	КонецЕсли;
	
	ВидимостьПредупреждения = Ложь;
	
	стрЗамечания = "";
	Если СтрокаД.Значение = Истина Тогда
		стррЗначения = СтррКонтекст.НастройкиВыгрузкиМаршрутов; // структура со свойствами: ВыгружатьМаршруты, ИнтервалВыгрузкиМаршрутов
		Если стррЗначения.ВыгружатьМаршруты <> Истина Тогда
			стрЗамечания = стрЗамечания + НСтр("ru='выключен режим выгрузки маршрутов';uk='вимкнений режим вивантаження маршрутів'");
		ИначеЕсли стррЗначения.ИнтервалВыгрузкиМаршрутов = Неопределено Или стррЗначения.ИнтервалВыгрузкиМаршрутов = 0 Тогда
			стрЗамечания = стрЗамечания + НСтр("ru='не задан интервал выгрузки маршрутов';uk='не заданий інтервал вивантаження маршрутів'");
		КонецЕсли; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(стрЗамечания) Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Заголовок = СтрШаблон_(НСтр("ru='В настройках обмена %1.';uk='В налаштуваннях обміну %1.'"), стрЗамечания);
		ВидимостьПредупреждения = Истина;
	КонецЕсли; 
	
	Если Элементы.НадписьГотовностьНастроекОбмена.Видимость <> ВидимостьПредупреждения Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = ВидимостьПредупреждения;
	КонецЕсли;

	СтрокаД = ДеревоНастроек.НайтиПоИдентификатору(СтррКонтекст.ИдСтрокДереваНастроек.Получить("ИспользоватьСкладыВТабличнойЧасти"));
	Если СтрокаД = Неопределено Тогда
		ВызватьИсключение(НСтр("ru='Не найдена строка дерева с ключом ИспользоватьСкладыВТабличнойЧасти';uk='Не знайдена рядок дерева з ключем ИспользоватьСкладыВТабличнойЧасти'"));
	КонецЕсли;
	
	Если СтрокаД.Значение = Истина Тогда
		ИспользоватьСкладыВТЧДокументовПродажи = КонстантыПолучитьЗначение("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");
		Если Не ИспользоватьСкладыВТЧДокументовПродажи Тогда 
			Сообщить(НСтр("ru='В системе отключена функциональная опция ""Реализация товаров с нескольких складов"". Возможность использования складов в табличной части документа продажи находится в разделе ""НСИ и Администрирование - Продажи"".';uk='В системі відключена функціональна опція ""Реалізація товарів з декількох складів"". Можливість використання складів в табличній частині документа продажу знаходиться в розділі ""НДІ і Адміністрація - Продажі"".'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает настройки мобильного приложения "по умолчанию".
&НаСервере
Функция ВнешнийВызовСоздатьНастройкиПоУмолчанию() Экспорт
	
	ДеревоНастроекЗаполнить(Истина);
	СохранитьНастройки();
	
	Возврат НастройкиМобильногоПриложения;
	
КонецФункции

// СлужебныеПроцедурыИФункции 
#КонецОбласти
