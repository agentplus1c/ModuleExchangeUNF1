
#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем гстррЦвета; // цвета для использования в диалоговой форме
&НаКлиенте
Перем гМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтррКонтекст = Новый Структура("ВОВсеСвойства");
	СтррКонтекст.Вставить("СпрТоргТочки"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	// Константа "ПоказыватьАдресКоординат" - признак: при выводе GPS-координат на формах получать из геосервиса адрес координат или нет?
	СтррКонтекст.Вставить("ПоказыватьАдресКоординат", Неопределено); 
	//унф не используем соглашения и договоры
	//СтррКонтекст.Вставить("ИспользоватьСоглашенияСКлиентами", Константы.ИспользоватьСоглашенияСКлиентами.Получить());
	//СтррКонтекст.Вставить("ИспользоватьДоговорыСКлиентами",   Константы.ИспользоватьДоговорыСКлиентами.Получить());
	
	СтррКонтекст.Вставить("СтатусыДокумента", СтрРазделить_("СтатусЗаписать,СтатусПровести,СтатусУдалить", ","));
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы_СобытияФормМодуля
// События форм модуля

// Функция возвращает Истина, если обработала событие.
// Используется для сокращения кода обработки общих событий для форм модуля обмена.
&НаКлиенте
Функция ОбработкаОповещенияФормы(Модуль, ИмяСобытия, Параметр, Источник) Экспорт

	Результат = Истина;
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		Модуль.ЭтаФорма.Модифицированность = Ложь;
		Модуль.ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> Модуль.СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ОбработчикиСобытийФормы_СобытияФормМодуля
#КонецОбласти 

// ОбработчикиСобытийФормы
#КонецОбласти


#Область РеквизитыМТНаФорме

&НаКлиенте
Процедура ФормаОбновитьАдресКонтрагента(Модуль) Экспорт
	
	стррКоординаты = Новый Структура("Адрес,Широта,Долгота,Широта2,Долгота2,Расстояние,МаксРасстояние", 
		Модуль.АдресОбъекта, Модуль.ШиротаОбъекта, Модуль.ДолготаОбъекта, Модуль.Широта, Модуль.Долгота); // последние 4 свойства используются при расчете расстояния между двумя точками
	ОбновитьАдресКонтрагентаСервер(Модуль.Контрагент, стррКоординаты);
	Модуль.АдресОбъекта  	= стррКоординаты.Адрес;
	Модуль.ШиротаОбъекта	= стррКоординаты.Широта;
	Модуль.ДолготаОбъекта	= стррКоординаты.Долгота;
	
	Если МодульКарты().ЗначенияРасстояния(стррКоординаты) Тогда
		Модуль.Элементы.ДекорацияРасстояние.ЦветТекста = ВернутьЦвет("Авто");
		Модуль.Элементы.ДекорацияВнимание.Видимость = Ложь;
	Иначе
		Модуль.Элементы.ДекорацияРасстояние.ЦветТекста = ВернутьЦвет("Ошибка");
		Модуль.Элементы.ДекорацияВнимание.Видимость = Истина;
	КонецЕсли; 
	
	Расстояние = ?(ЗначениеЗаполнено(стррКоординаты.Расстояние), Окр(стррКоординаты.Расстояние, 0), 0);
	ПоказатьРасстояние = ЗначениеЗаполнено(Расстояние);
	Если ПоказатьРасстояние Тогда
		Если Расстояние > 10000 Тогда
			стрРасстояние = Строка(Окр(Расстояние / 1000, 0)) + НСтр("ru = ' км'; uk = ' км'");
		ИначеЕсли Расстояние > 100 Тогда
			стрРасстояние = Строка(Окр(Расстояние / 1000, 1)) +НСтр("ru=' км'; uk = ' км'");
		Иначе
			стрРасстояние = Строка(Окр(Расстояние, 0)) + НСтр("ru=' м'; uk = ' м'");
		КонецЕсли; 
	Иначе
		стрРасстояние = "?";
	КонецЕсли; 
	
	Модуль.Элементы.ДекорацияРасстояние.Заголовок = стрРасстояние;
	
	Модуль.Элементы.ИнфоМТАдресКлиента.Заголовок  = ?(ЗначениеЗаполнено(Модуль.АдресОбъекта), Модуль.АдресОбъекта, НСтр("ru='не задан';uk='не заданий'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресКонтрагентаСервер(Контрагент, стррАдрес)
	
	стррАдрес.Широта  = 0;
	стррАдрес.Долгота = 0;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		стррАдрес.Адрес = "";
		Возврат;
	КонецЕсли; 
	
	АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.АдресКонтрагента);	
	
	Если РеквизитФормыВЗначение("Объект").ПолучитьКоординатыКонтрагента(Контрагент, стррАдрес) Тогда
		Если ЗначениеЗаполнено(АдресКонтрагента) Тогда
			стррАдрес.Адрес = АдресКонтрагента;
		Иначе
			стррАдрес.Адрес = СтрШаблон_(НСтр("ru='(ш/д: %1; %2)';uk='(ш/д: %1; %2)'"), стррАдрес.Широта, стррАдрес.Долгота);
		КонецЕсли; 
	Иначе
		стррАдрес.Адрес = АдресКонтрагента;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаСведенияИзМТОбновить(Модуль) Экспорт 
	
	ПустаяДата = Дата('00010101');
	Если Модуль.ВремяНачала = ПустаяДата И Модуль.ВремяОкончания = ПустаяДата Тогда
		Модуль.ИнфоВремяСоздания = НСтр("ru='Не задано.';uk='Не задано'");
	Иначе
		ВремяНачала 	= Модуль.ВремяНачала;
		ВремяОкончания	= Модуль.ВремяОкончания;
		Если НачалоДня(ВремяНачала) = НачалоДня(ВремяОкончания) Тогда
			Если НачалоДня(ВремяНачала) = НачалоДня(ТекущаяДата()) Тогда
				СтрДата = НСтр("ru='Сегодня';uk='Сьогодні'");
			Иначе
				СтрДата = Формат(ВремяНачала, "ДФ=dd.MM.yy");
			КонецЕсли; 
			СтрПериод = Формат(ВремяНачала, "ДФ=HH:mm") + " - " + Формат(ВремяОкончания, "ДФ=HH:mm");
			Модуль.ИнфоВремяСоздания = СтрШаблон_("%1 %2", СтрДата, СтрПериод);
		Иначе
			Модуль.ИнфоВремяСоздания = Формат(ВремяНачала, "ДФ='dd.MM.yy HH:mm'") + " - " + Формат(ВремяОкончания, "ДФ='dd.MM.yy HH:mm'");
		КонецЕсли; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Модуль.Широта) И Не ЗначениеЗаполнено(Модуль.Долгота) Тогда
		Модуль.ИнфоКоординатыМестаСоздания = НСтр("ru='Координаты не указаны.';uk='Координати не вказані.'");
	Иначе
		
		Если СтррКонтекст.ПоказыватьАдресКоординат = Неопределено Тогда
			ПрочестьНастройкиИзХранилища();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Модуль.АдресПоГеокодеру) И СтррКонтекст.ПоказыватьАдресКоординат Тогда
			стррКоординаты = Новый Структура("Широта,Долгота", Модуль.Широта, Модуль.Долгота);
			Модуль.АдресПоГеокодеру = МодульКарты().ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты, Истина, Истина);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Модуль.АдресПоГеокодеру) Тогда
			Модуль.ИнфоКоординатыМестаСоздания = Модуль.АдресПоГеокодеру;
		Иначе
			Модуль.ИнфоКоординатыМестаСоздания = СтрШаблон_(НСтр("ru='(ш/д: %1; %2)';uk='(ш/д: %1; %2)'"), Модуль.Широта, Модуль.Долгота);
		КонецЕсли;
		
	КонецЕсли;
	
	Модуль.Элементы.ИнфоМТМестоСоздания.Заголовок = Модуль.ИнфоКоординатыМестаСоздания;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСведенияИзМТРежимРедактированияОбновить(Модуль) Экспорт 
	
	РежимРедактирования = Модуль.СтррКонтекст.Свойство("РедактироватьРеквизитыМТ") И Модуль.СтррКонтекст.РедактироватьРеквизитыМТ = Истина;
	
	Модуль.Элементы.ИнфоМТВремяСоздания.Гиперссылка  = РежимРедактирования; // отладочный режим - можем изменять время создания документа
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитМТПриНажатииСсылки(Модуль, Элемент, СтандартнаяОбработка = Неопределено) Экспорт 
	
	Результат = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	Период = Новый СтандартныйПериод; 
	Период.ДатаНачала 	 = Модуль.ВремяНачала;
	Период.ДатаОкончания = Модуль.ВремяОкончания;
	
	Если Элемент.Имя = "ИнфоМТВремяСоздания" Тогда // запрашиваем время создания
		
		стррПараметры = Новый Структура("ДатаНачала,ДатаОкончания", Модуль.ВремяНачала, Модуль.ВремяОкончания);
		Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Модуль);
		МодульК().ОткрытьФормуОбработки("ВыборПериода", стррПараметры,, Оповещение);
		
	ИначеЕсли Элемент.Имя = "ИнфоМТМестоСоздания" Тогда // показываем объект на карте, но если включено еще и редактирование
		
		РежимРедактирования = Модуль.СтррКонтекст.Свойство("РедактироватьРеквизитыМТ") И Модуль.СтррКонтекст.РедактироватьРеквизитыМТ = Истина;
		
		Если РежимРедактирования Тогда // предложить выбор - показать объект на карте или изменить координаты
			
			// нужно вернуть структуру, которая будет задействована в исходном модуле для выбора значения из меню			
			Меню = Новый СписокЗначений;
			Меню.Добавить("ПоказатьНаКарте",   НСтр("ru='Показать на карте';uk='Показати на карті'"));			
			Меню.Добавить("УказатьКоординаты", НСтр("ru='Указать координаты';uk='Вказати координати'"));
			Оповещение = Новый ОписаниеОповещения("ВыборВариантаРаботыСКоординатамиЗавершение", ЭтотОбъект, Модуль);
			Результат = Новый Структура("Меню,Оповещение", Меню, Оповещение); 
			
		Иначе // показываем объект на карте
			
			ПоказатьНаКарте(Модуль, "Документ");
			
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ИнфоМТАдресКлиента" Тогда // показываем объект на карте, но если включено еще и редактирование		
		
		ПоказатьНаКарте(Модуль, "Контрагент");
		
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Процедура РеквизитМТПриНажатииСсылки(): передано событие от неизвестного элемента формы (%1).'; uk = 'Процедура РеквизитМТПриНажатииСсылки(): передано подія від невідомого елемента форми (%1).'"),
								Элемент.Имя);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(стррРезультат, ДополнительныеПараметры) Экспорт

	Модуль = ДополнительныеПараметры;
	
	Если ТипЗнч(СтррРезультат) = Тип("Структура") И СтррРезультат.КодВозвратаДиалога = КодВозвратаДиалога.ОК Тогда
		Модуль.ВремяНачала 	  = стррРезультат.ДатаНачала;
		Модуль.ВремяОкончания = стррРезультат.ДатаОкончания;
		ФормаСведенияИзМТОбновить(Модуль);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаРаботыСКоординатамиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Модуль = ДополнительныеПараметры;
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "УказатьКоординаты" Тогда
			
			стррПараметры = Новый Структура("Широта,Долгота", Модуль.Широта, Модуль.Долгота);
			Оповещение = Новый ОписаниеОповещения("ВыборКоординатЗавершение", ЭтотОбъект, Модуль);
			МодульК().ОткрытьФормуОбработки("ВыборКоординат", Новый Структура("Значения", стррПараметры),, Оповещение);
			
		ИначеЕсли Результат.Значение = "ПоказатьНаКарте" Тогда
			ПоказатьНаКарте(Модуль, "Документ");
		Иначе
			ВызватьИсключение(НСтр("ru = 'Неизвестное значение пункта меню для выбора: '; uk = 'Невідоме значення пункту меню для вибору: '") + Результат.Значение);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКоординатЗавершение(стррРезультат, ДополнительныеПараметры) Экспорт
	
	Модуль = ДополнительныеПараметры;
	
	Если ТипЗнч(стррРезультат) = Тип("Структура") Тогда
		Модуль.Широта  = стррРезультат.Широта;
		Модуль.Долгота = стррРезультат.Долгота;
		Модуль.АдресПоГеокодеру = "";		
		ФормаСведенияИзМТОбновить(Модуль);
	КонецЕсли;

КонецПроцедуры

// Процедура показывает на карте два объекта (если это возможно): место создания документа и расположение Контрагента (торговой точки)
&НаКлиенте
Процедура ПоказатьНаКарте(Модуль, ВидОбъекта)
	
	мМаркеры = Новый Массив;
	стррМаркер1 = ПолучитьМаркер(Модуль, ВидОбъекта);
	Если стррМаркер1 = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Координаты не заполнены.';uk='Координати незаповнені.'"));
		Возврат;
	КонецЕсли;
	
	мМаркеры.Добавить(стррМаркер1);
	
	стррМаркер2 = ПолучитьМаркер(Модуль, ?(ВидОбъекта = "Документ", "Контрагент", "Документ"));
	Если стррМаркер2 <> Неопределено Тогда
		мМаркеры.Добавить(стррМаркер2);
	КонецЕсли; 
	
	стррПараметры = Новый Структура("ПоказатьТолькоКарту,Маркеры", Истина, мМаркеры);
	Форма = МодульК().ОткрытьФормуОбработки("ПросмотрНаКарте", стррПараметры, "АППоказатьНаКарте");
	Если Форма.СтррКонтекст.Повторно = Истина Тогда // значит форма карты была до этого открыта
		Форма.ВнешнийВызовДобавитьИПоказатьМаркеры(стррПараметры);
	КонецЕсли; 
	
КонецПроцедуры

#Область РеквизитыМТНаФорме_ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Модуль, Элемент) Экспорт
	
	//унф все переделано
	
	//Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
		ПроверитьИОчиститьРеквизиты(Модуль, "Договор", "Организация", Модуль.Организация);
	//КонецЕсли;
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Модуль, Элемент) Экспорт
	
	ОбновитьОрганизациюПоРеквизиту(Модуль, "Договор");
	
КонецПроцедуры

//унф
//&НаКлиенте
//Процедура СоглашениеПриИзменении(Модуль, Элемент) Экспорт
//	
//	ОбновитьОрганизациюПоРеквизиту(Модуль, "Соглашение");
//	
//КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Модуль, Элемент) Экспорт
	
	//унф все переделано
	
	ФормаОбновитьАдресКонтрагента(Модуль);
	
	стрРеквизиты = "Контрагент";
	Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
		стрРеквизиты = стрРеквизиты + ",Договор";
	КонецЕсли; 
	
	ПроверитьИОчиститьРеквизиты(Модуль, стрРеквизиты, "Контрагент", Модуль.Контрагент);
	
	Модуль.УстановитьМодифицированостьФормы();
	
	/////////////////////Тут не понятно
	
	ЗначениеПроверки = ЗначениеРеквизитаОбъекта(Модуль.Контрагент, "Контрагент");
	Если ЗначениеПроверки <> Модуль.Контрагент Тогда
		Модуль.Контрагент 	  = ЗначениеПроверки;
		Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда			
			//Модуль.Соглашение = Неопределено; //унф
			Модуль.Договор 	  = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(Модуль, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
	
		Модуль.Контрагент = Результат;
		КонтрагентПриИзменении(Модуль, Неопределено);
		
	КонецЕсли; 
	
КонецПроцедуры

//унф соглашения не используются
//&НаКлиенте
//Процедура СоглашениеНачалоВыбора(Модуль, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
//	
//	//унф соглашения не используются
//	
//	//СтандартнаяОбработка = Ложь;
//	//Если Не ЗначениеЗаполнено(Модуль.Партнер) Тогда
//	//	ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала выберите клиента.';uk='Спочатку виберіть клієнта.'"));
//	//	Возврат;
//	//КонецЕсли;
//	//	
//	//стррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
//	//
//	//стррПараметры.Элемент              = Элемент;
//	//стррПараметры.Партнер              = Модуль.Партнер;
//	//стррПараметры.Документ             = Модуль.Соглашение;
//	//стррПараметры.ДатаДокумента        = Модуль.Дата;
//	//стррПараметры.ДанныеФормыСтруктура = Модуль.Объект;
//	//
//	//ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(стррПараметры, СтандартнаяОбработка);
//	
//КонецПроцедуры
//унф соглашения не используются


// РеквизитыМТНаФорме_ОбработчикиСобытийЭлементовФормы
#КонецОбласти 

// РеквизитыМТНаФорме
#КонецОбласти 


#Область ФормаДокумента

&НаСервере
Функция ПолучитьЗначенияПоУмолчанию() 
	
	//унф переделана на сотрудников 
		
	//стррРезультат = Новый Структура("Пользователь,Валюта,Организация");
	//стррРезультат.Пользователь = Пользователи.ТекущийПользователь();
	//стррРезультат.Валюта       = Константы.ВалютаРегламентированногоУчета.Получить(); // Не поддерживается в УТ 11.1: ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//стррРезультат.Организация  = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	//
	стррРезультат = Новый Структура("Сотрудник, Валюта, Организация");
	
	стррРезультат.Сотрудник    = РеквизитФормыВЗначение("Объект").ПолучитьСотрудникаПоПользователю(Пользователи.ТекущийПользователь());
	стррРезультат.Валюта       = Константы.ВалютаУчета.Получить(); 
	стррРезультат.Организация  = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.ОсновнаяОрганизация");
	
	
	
	Возврат стррРезультат;
	
КонецФункции

// Процедура возвращает в одном из параметров: или код статуса документа, или имя команды (соответствующей статусу документа).
// Параметры:
// 		КодСтатуса - Число - код статуса документа, в соответствии с которым вернуть имя команды в параметре ИмяКоманды, соответствующей коду статуса.
// 		ИмяКоманды - Строка, Неопределено - имя команды документа, в соответствии с которым вернуть в параметре КодСтатуса код статуса документа.
//				Если Неопределено, то в параметре ИмяКоманды возвращается имя команды, соответствующей коду статуса документа из параметра КодСтатуса.
&НаКлиенте
Процедура СтатусДокумента(КодСтатуса, ИмяКоманды)
	
	Если ИмяКоманды = Неопределено Тогда // нужно определить имя команды по статусу документа
		Если КодСтатуса > СтррКонтекст.СтатусыДокумента.ВГраница() Тогда
			ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Процедура СтатусДокумента(): значение параметра КодСтатуса (%1) превышает лимит (%2)'; uk = 'Процедура СтатусДокумента(): значення параметра КодСтатуса(%1) перевищує ліміт (%2)'"), КодСтатуса, СтррКонтекст.СтатусыДокумента.ВГраница()));
		Иначе
			ИмяКоманды = СтррКонтекст.СтатусыДокумента[КодСтатуса];
		КонецЕсли; 
	Иначе // нужно изменить статус документа по имени команды
		КодСтатуса = СтррКонтекст.СтатусыДокумента.Найти(ИмяКоманды);
		Если КодСтатуса = Неопределено Тогда
			ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Процедура СтатусДокумента(): не предусмотренное значение параметра ИмяКоманды = ""%1""!'; uk = 'Процедура СтатусДокумента(): не передбачену значення параметра ИмяКоманды = ""%1""!'"), ИмяКоманды));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// ФормаДокумента
#КонецОбласти 


#Область ВиртуальныеОбъекты
// Виртуальные объекты (ВО)  - это виртуальные документы и виртуальные справочники

// Процедура обновляет статус документа на форме документа.
// Параметры:
// 		Модуль - МодульФормы - модуль формы документа.
// 		ИмяКоманды - Строка, Неопределено - имя команды документа, в соответствии с которым установить на форме код статуса документа (и обновить иконку статуса документа).
//				Если Неопределено, то на форме просто обновляется иконка статуса документа.
&НаКлиенте
Процедура ВОСтатусОбновитьНаФорме(Модуль, ИмяКоманды = Неопределено) Экспорт
	
	Если Модуль.СтррКонтекст.ВО.КорневойВид <> "Документ" Тогда
		Возврат; // визуализация статусов на форме элемента (записан, удален, проведен) поддерживается только для документов
	КонецЕсли; 
	
	Если ИмяКоманды <> Неопределено Тогда // процедура вызвана для интерактивного изменения статуса документа
		Модуль.УстановитьМодифицированостьФормы();	
	КонецЕсли;
	СтатусДокумента(Модуль.Статус, ИмяКоманды); // если ИмяКоманды = Неопределено, то после вызова процедуры ИмяКоманды установится в соответствующее значение по статусу документа
	МодульЭлементы = Модуль.Элементы;
	МодульЭлементы.ГруппаМенюСтатусовДокумента.Картинка = МодульЭлементы[ИмяКоманды].Картинка;
	Для Каждого ИмяЭлементаМеню Из СтррКонтекст.СтатусыДокумента Цикл // обновляем пометки меню
		МодульЭлементы[ИмяЭлементаМеню].Пометка = (ИмяЭлементаМеню = ИмяКоманды);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВООткрытьФормуИзФормыСписка(Модуль, СозданиеНового = Ложь, Копирование = Ложь) Экспорт
	
	СтатусОбъекта = Неопределено; // статус объекта (помечен на удаление, записан и т.д.)		
	ID 			  = Неопределено; // идентификатор объекта
	
	Если Не СозданиеНового Или Копирование Тогда // если не создаем новый объект (т.е. открываем существующий) или копируем существующий объект, то надо прочесть свойства текущего объекта
		стррСвойства = ВОЭлементыСвойстваТекущего(Модуль);
		Если стррСвойства = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		СтатусОбъекта = стррСвойства.Статус;
		ID = стррСвойства.ID;
	КонецЕсли; 
	
	Ключ = ?(СозданиеНового Или Копирование, Новый УникальныйИдентификатор, ID); // ключ уникальности формы
	стррПараметры = Новый Структура("ID,Статус,Копирование,ВызовИзФормыСписка", ID, СтатусОбъекта, Копирование, Истина);
	МодульК().ОткрытьФормуОбработки(Модуль.СтррКонтекст.ВО.ФормаЭлемента, стррПараметры, Ключ);
	
КонецПроцедуры

// Процедура открывает форму элемента виртуального объекта (справочника, документа).
//  Параметры:
//		Параметр - Структура, Строка - системные свойства виртуального объекта (Структура) или вид виртульного объекта (Строка)
//		ID 		 - УникальныйИдентификатор - идентификатор виртуального объекта.
&НаКлиенте
Процедура ВООткрытьФорму(Параметр, ID = Неопределено) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если Параметр.Свойство("ВидДокумента") Тогда
			ВидОбъекта = Параметр.ВидДокумента;
		Иначе
			ВидОбъекта = Параметр.ВидОбъекта;
		КонецЕсли; 
		стррПараметры = Параметр; // должны быть свойства: ID, Статус (необязательный), Проведен и ПометкаУдаления (необязателеньны)
		Ключ = Параметр.ID;
	Иначе
		ВидОбъекта = Параметр;
		стррПараметры = Новый Структура("ID,ВызовИзФормыСписка", ID, Ложь);
		Ключ = ID;
	КонецЕсли; 
	
	стррВОВсеСвойства = ВОПолучитьВсеСвойстваКлиент();
	стррВО = стррВОВсеСвойства[ВидОбъекта];
	
	МодульК().ОткрытьФормуОбработки(стррВО.ФормаЭлемента, стррПараметры, Ключ);
	
КонецПроцедуры

&НаКлиенте
Функция ВОПолучитьВсеСвойстваКлиент()
	
	Если Не ЗначениеЗаполнено(СтррКонтекст.ВОВсеСвойства) Тогда
		СтррКонтекст.ВОВсеСвойства = ВОПолучитьВсеСвойстваСервер();
	КонецЕсли; 
	
	Возврат СтррКонтекст.ВОВсеСвойства;	

КонецФункции

&НаСервере
Функция ВОПолучитьВсеСвойстваСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").ВОПолучитьВсеСвойства();

КонецФункции

// Вызывается при открытии формы списка элементов или формы элемента
&НаКлиенте
Процедура ВОПриОткрытии(Модуль) Экспорт
	
	стррМКонтекст = Модуль.СтррКонтекст;	
	
	Модуль.Элементы.ГруппаКоманднаяПанель.ЦветФона = стррМКонтекст.Цвета.ФонРаздела;	
	Модуль.ЭтаФорма.Модифицированность = Ложь;
	
	Если стррМКонтекст.ЭтоФормаСписка И стррМКонтекст.ДляВыбора = Истина Тогда
		
		Модуль.Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		
		мСтроки = Модуль.Объект[стррМКонтекст.ВО.РеквизитОбработки].НайтиСтроки(Новый Структура("ID", стррМКонтекст.ID));
		Если мСтроки.Количество() <> 0 Тогда
			Модуль.Элементы.ТПЭлементы.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
		
	ИначеЕсли Не стррМКонтекст.ЭтоФормаСписка И стррМКонтекст.ВО.КорневойВид = "Документ" Тогда
		
		ВОИнициализироватьДокумент(Модуль);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВОИнициализироватьДокумент(Модуль)
	//Переделана на сотрудников
	
	Модуль.СтррКонтекст.IDNew = Модуль.ЭтаФорма.КлючУникальности; // идентификатор для создания нового документа	
	
	Если Не ЗначениеЗаполнено(Модуль.ID) Тогда // открыт новый документ
		Модуль.Дата = ТекущаяДата();
		стррЗначения = ПолучитьЗначенияПоУмолчанию() ;
		Модуль.Организация  = стррЗначения.Организация;
		Модуль.Сотрудник 	= стррЗначения.Сотрудник;
	КонецЕсли; 
	
	ФормаСведенияИзМТРежимРедактированияОбновить(Модуль);
	ВОСтатусОбновитьНаФорме(Модуль);
	
	ФормаОбновитьАдресКонтрагента(Модуль);
	
	МодульЭлементы = Модуль.Элементы;
	
	//унф
	//Если МодульЭлементы.Найти("Соглашение") <> Неопределено И Не СтррКонтекст.ИспользоватьСоглашенияСКлиентами Тогда
	//	МодульЭлементы.Соглашение.Видимость = Ложь;
	//КонецЕсли; 
	
	Если МодульЭлементы.Найти("Договор") <> Неопределено И Не СтррКонтекст.ИспользоватьДоговорыСКлиентами Тогда
		МодульЭлементы.Договор.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВОПередЗаписьюЭлемента(Модуль, НовыйСтатус = Неопределено) Экспорт
	
	Если НовыйСтатус <> Неопределено Тогда
	    Модуль.Статус = НовыйСтатус;
		ВОСтатусОбновитьНаФорме(Модуль); // обновляем визуальный статус элемента на форме
	КонецЕсли; 
	
	Если Строка(Модуль.ID) = "00000000-0000-0000-0000-000000000000" Тогда // новый объект
		Модуль.ID = ?(ТипЗнч(Модуль.СтррКонтекст.IDNew) = Тип("УникальныйИдентификатор"), Модуль.СтррКонтекст.IDNew, Новый УникальныйИдентификатор());
	КонецЕсли; 
	
	Если Модуль.СтррКонтекст.ВО.КорневойВид = "Справочник" Тогда
		// для сохраняемого элемента справочника всегда назначаем статус - "Записан"
		Модуль.Статус = Модуль.СтррКонтекст.КодыИконок.Записан;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередПометкойУдаления(Модуль, Элемент, Отказ) Экспорт
	
	Отказ = Истина;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	стррИконки = Модуль.СтррКонтекст.КодыИконок;
	СтатусПомечен = стррИконки.Помечен; 
	СтатусЗаписан = стррИконки.Записан;
	
	ЭлементПомечен = (СтрокаТ.Статус = СтатусПомечен);
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Если ЭлементПомечен Тогда
		    ТекстШ = НСтр("ru='Снять пометку на удаление с выбранных элементов (выбрано: %1)?';uk='Зняти позначку на видалення з обраних елементів (вибрано:%1)?'");
		Иначе
			ТекстШ = НСтр("ru='Пометить на удаление выбранные элементы (выбрано: %1)?';uk='Помітити на видалення вибрані елементи (вибрано:%1)?'");
		КонецЕсли; 
		Текст = СтрШаблон_(ТекстШ, Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Если ЭлементПомечен Тогда
		    Текст = НСтр("ru='Снять пометку на удаление с выбранного элемента?';uk='Зняти позначку на видалення вибраного елемента?'");
		Иначе
			Текст = НСтр("ru='Пометить на удаление выбранный элемент?';uk='Помітити на видалення обраний елемент?'");
		КонецЕсли; 
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВОЭлементыПередПометкойУдаленияЗавершение", ЭтотОбъект, Модуль);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередПометкойУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Модуль = ДополнительныеПараметры;
		
		Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
		
		стррИконки = Модуль.СтррКонтекст.КодыИконок;
		СтатусПомечен = стррИконки.Помечен; // аналогичный алгоритм используется в других местах - искать тэг #ВДокПометкаУдалениеДокументов#
		СтатусЗаписан = стррИконки.Записан;

		мИдентификаторы = Новый Массив; // массив помечаемых на удаление идентификаторов документов
		тзСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];	
		Для Каждого ИдСтроки Из Массив Цикл
			СтрокаТ = тзСтроки.НайтиПоИдентификатору(ИдСтроки);
			Если СтрокаТ <> Неопределено Тогда
				мИдентификаторы.Добавить(СтрокаТ.ID);				
				СтрокаТ.Статус = ?(СтрокаТ.Статус <> СтатусПомечен, СтатусПомечен, СтатусЗаписан);
			КонецЕсли;
		КонецЦикла;
		
		ВОЭлементыУдалить(Модуль.СтррКонтекст.ВО, мИдентификаторы, Ложь);		
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме списка перед окончательным удалением элементов табличного поля.
&НаКлиенте
Процедура ВОЭлементыПередУдалением(Модуль, Элемент) Экспорт
	
	Если Модуль.СтррКонтекст.ДляВыбора Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Текст = СтрШаблон_(НСтр("ru='Удалить выбранные элементы (выбрано: %1)? Помеченные на удаление элементы будут окончательно удалены из БД без возможности восстановления!';uk='Видалити вибрані елементи (вибрано:%1)? Позначені на видалення елементи будуть остаточно видалені з БД без можливості відновлення!'"), 
					Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Текст = НСтр("ru='Удалить выбранный элемент? Элемент будет окончательно удален из БД без возможности восстановления.';uk='Видалити вибраний елемент? Елемент буде остаточно видалено з БД без можливості відновлення.'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВОЭлементыПередУдалениемЗавершение", ЭтотОбъект, Модуль);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Модуль = ДополнительныеПараметры;
		
		Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
		
		стррИконки = Модуль.СтррКонтекст.КодыИконок;
		СтатусПомечен = стррИконки.Помечен; 
		СтатусЗаписан = стррИконки.Записан;

		мИдентификаторы = Новый Массив; // массив удаленных идентификаторов элементов
		тзСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];	
		Для Каждого ИдСтроки Из Массив Цикл
			СтрокаТ = тзСтроки.НайтиПоИдентификатору(ИдСтроки);
			Если СтрокаТ.Статус = СтатусПомечен Тогда
				мИдентификаторы.Добавить(СтрокаТ.ID);
				тзСтроки.Удалить(тзСтроки.Индекс(СтрокаТ));
			КонецЕсли; 
		КонецЦикла;
		
		Если мИдентификаторы.Количество() = 0 Тогда
			Текст = НСтр("ru='Удаляются только помеченные на удаление элементы! Удаление не выполнено!';uk='Видаляються тільки помічені на видалення елементи! Видалення не виконана!'");
			ПоказатьПредупреждение(Неопределено, Текст);
		Иначе
			ВОЭлементыУдалить(Модуль.СтррКонтекст.ВО, мИдентификаторы, Истина);		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВОЭлементыУдалить(стррВО, мИдентификаторы, ОкончательноеУдаление)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ОкончательноеУдаление Тогда
		ТекОбъект.ВОУдалитьЭлементы(стррВО, мИдентификаторы, Истина);	
	Иначе
		ТекОбъект.ВОПометитьНаУдалениеЭлементы(стррВО, мИдентификаторы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыВыделить(Модуль, ID) Экспорт
	
	Если ТипЗнч(ID) = Тип("УникальныйИдентификатор") Тогда
		мСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки].НайтиСтроки(Новый Структура("ID", ID));
		Если мСтроки.Количество() <> 0 Тогда
			Модуль.Элементы.ТПЭлементы.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает ключевые свойства текущего элемента табличного поля списка.
// Или возвращает Неопределено, если нет текущего элемента (нет текущей строки) в табличном поле.
&НаКлиенте
Функция ВОЭлементыСвойстваТекущего(Модуль) Экспорт
	
	СтрокаТ = Модуль.Элементы.ТПЭлементы.ТекущиеДанные;	
	
	Если СтрокаТ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура("ID,Статус");	
	    ЗаполнитьЗначенияСвойств(Результат, СтрокаТ);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВОЭлементыВыбор(Модуль) Экспорт

	Если Модуль.СтррКонтекст.ДляВыбора = Истина Тогда
		ВОВыбратьИЗакрыть(Модуль, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
	Иначе
		ВООткрытьФормуИзФормыСписка(Модуль);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВОПолучитьВыбранные(Модуль, мСтроки) Экспорт

	Элемент = Модуль.Элементы.ТПЭлементы;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Значение не выбрано.';uk='Значення не вибрано.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	СтррРезультат = Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование);
	
	// учитываем, что может быть выбрано несколько значений
	Если ТипЗнч(мСтроки) = Тип("Массив") Тогда
		мЗначения = Новый Массив;
		тз = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];
		Для Каждого ИдСтроки Из мСтроки Цикл
			СтрокаТ = ТЗ.НайтиПоИдентификатору(ИдСтроки);
			мЗначения.Добавить(Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование));
		КонецЦикла;
		СтррРезультат.Вставить("мВыбранныеЗначения", мЗначения);
	КонецЕсли; 
	
	Возврат СтррРезультат;

КонецФункции

// Процедура выбирает текущую строку (строки) и закрывает форму. Используется при открытии формы в режиме выбора.
&НаКлиенте
Процедура ВОВыбратьИЗакрыть(Модуль, Значение) Экспорт
	
	СтррРезультат = ВОПолучитьВыбранные(Модуль, Значение);
	Модуль.ЭтаФорма.Закрыть(СтррРезультат);
	
КонецПроцедуры

// ВиртуальныеОбъекты
#КонецОбласти  


#Область ОбработчикиОбщихКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда, Модуль) Экспорт
	
	КомандаИмя = Команда.Имя;
	
	Если КомандаИмя = "УдалитьОкончательно" Тогда
		ВОЭлементыПередУдалением(Модуль, Модуль.Элементы.ТПЭлементы);
	ИначеЕсли КомандаИмя = "СтатусЗаписать" Или КомандаИмя = "СтатусПровести" Или КомандаИмя = "СтатусУдалить" Тогда
		ВОСтатусОбновитьНаФорме(Модуль, КомандаИмя);
	Иначе
		МодульК().КомандаВыполнить(Команда, Модуль);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// Функция открывает форму обработки. Обязательно открывать формы обработки только этой функцией!
&НаКлиенте
Функция ОткрытьФормуОбработки(ИмяФормы, стррПараметры = Неопределено, Уникальность = Неопределено, Оповещение = Неопределено) Экспорт
	
	Возврат МодульК().ОткрытьФормуОбработки(ИмяФормы, стррПараметры, Уникальность, Оповещение);
	
КонецФункции

// Процедура очищает реквизиты в Модуле, если свойство значения реквизита отличается от сверяемого значения.
&НаКлиенте
Процедура ПроверитьИОчиститьРеквизиты(Модуль, стрРеквизиты, ИмяСвойства, СверяемоеЗначение)
	
	Если ПустаяСтрока(стрРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	мРеквизиты = СтрРазделить_(стрРеквизиты, ",");
	Для Каждого ИмяРеквизита Из мРеквизиты Цикл
		Ссылка = Модуль[ИмяРеквизита];
		Если ЗначениеЗаполнено(Ссылка) И ЗначениеРеквизитаОбъекта(Ссылка, ИмяСвойства) <> СверяемоеЗначение Тогда
			Модуль[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОрганизациюПоРеквизиту(Модуль, ОсновнойРеквизит)
	
	НоваяОрганизация = ЗначениеРеквизитаОбъекта(Модуль[ОсновнойРеквизит], "Организация");
	Если НоваяОрганизация <> Модуль.Организация Тогда
		Модуль.Организация = НоваяОрганизация;
		Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
			ПроверитьИОчиститьРеквизиты(Модуль, "Договор", "Организация", НоваяОрганизация); //унф
		КонецЕсли;
	КонецЕсли; 
	
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

&НаКлиенте
Функция МодульКарты()
	
	Если гМодульКарты = Неопределено Тогда
		гМодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	КонецЕсли; 
	Возврат гМодульКарты;
	
КонецФункции

&НаКлиенте
Функция ВернутьЦвет(ИмяЦвета)
	
	Если гстррЦвета = Неопределено Тогда
		гстррЦвета = Новый Структура("Авто,Ошибка", Новый Цвет, Новый Цвет(255,0,0));
	КонецЕсли; 
	Возврат гстррЦвета[ИмяЦвета];
	
КонецФункции

// Процедура показывает на карте два объекта (если это возможно): место создания документа и расположение партнера (торговой точки)
&НаКлиенте
Функция ПолучитьМаркер(Модуль, ВидОбъекта)
	
	стррМаркер = Новый Структура("Широта,Долгота,Заголовок,Описание,ВидМаркера");
	стррМаркер.ВидМаркера = ВидОбъекта;
	
	Если ВидОбъекта = "Документ" Тогда
		Если ЗначениеЗаполнено(Модуль.Широта) И ЗначениеЗаполнено(Модуль.Долгота) Тогда
			стррМаркер.Широта  = СтрокуВЧисло(Модуль.Широта);
			стррМаркер.Долгота = СтрокуВЧисло(Модуль.Долгота);
			стррМаркер.Заголовок = НСтр("ru='Место создания документа';uk='Місце створення документа'");
			стррМаркер.Описание  = ?(ЗначениеЗаполнено(Модуль.АдресПоГеокодеру), Модуль.АдресПоГеокодеру, НСтр("ru='Адрес неизвестен.';uk='Адреса невідома.'"));
		Иначе		
			Возврат Неопределено;
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = "Контрагент" Тогда
		Если ЗначениеЗаполнено(Модуль.ШиротаОбъекта) И ЗначениеЗаполнено(Модуль.ДолготаОбъекта) Тогда
			стррМаркер.Широта  = СтрокуВЧисло(Модуль.ШиротаОбъекта);
			стррМаркер.Долгота = СтрокуВЧисло(Модуль.ДолготаОбъекта);
			стррМаркер.Заголовок = Модуль.Контрагент;
			стррМаркер.Описание  = ?(ЗначениеЗаполнено(Модуль.АдресОбъекта), Модуль.АдресОбъекта, НСтр("ru='Адрес неизвестен.';uk='Адреса невідома.'"));
		Иначе		
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Функция ПолучитьМаркер(): неизвестное значение параметра ВидОбъекта (%1).'; uk = 'Функція ПолучитьМаркер(): невідоме значення параметра ВидОбъекта (%1).'"),
								ВидОбъекта);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Возврат стррМаркер;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиИзХранилища()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СтррКонтекст.ПоказыватьАдресКоординат = ТекОбъект.ПрочитатьЗначениеНастройки("ПоказыватьАдресКоординат"); 
	
КонецПроцедуры
	
// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
