
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Повторно,ИнтерфейсТакси,КаталогИконок,КартаЦентр,СписокВсеВидыДокументов,"
		+ "СсылкаСписокТТ,Маркеры,МаксНомерИконки,КаталогДанных,ЦветаТреков");
	СтррКонтекст.Повторно = Ложь;
	СтррКонтекст.Маркеры  = Новый Массив;
	СтррКонтекст.МаксНомерИконки = 20; // максимальный номер пронумерованной иконки на карте
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.КаталогДанных = ТекОбъект.ПрочитатьЗначениеНастройки("КаталогДанных");
	
	СтррКонтекст.КартаЦентр = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	СтррКонтекст.КаталогИконок = ТекОбъект.ПолучитьВебКаталогИконок();
	СтррКонтекст.ЦветаТреков = СтрРазделить_("000080,FF0000,2D9900,B200FF,FF7F7F,00BAD9,B5030C,404040,007380,FF00E6,997B00,0034FF,A85454,00D935,786EC1");
	
	СтррКонтекст.ИнтерфейсТакси = ТекОбъект.КонфигурацияРазмерностьЭлементовФормыДляТакси() 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	СтррМаркер = Новый Структура("Широта,Долгота,Заголовок", 0, 0, "");
	
	ТаймингАктуальностиМестоположенияАгента = 15;
	ДопустимаяУдаленностьОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ");
	
	ЛегендаЗаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтррКонтекст.ИнтерфейсТакси Тогда
		Элементы.ГруппаЛеваяОбласть.Ширина = 40;
	КонецЕсли; 
	
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	Если Не ЗначениеЗаполнено(ИсточникКарты) Тогда
		ИсточникКарты = Элементы.ИсточникКарты.СписокВыбора[0].Значение;
	КонецЕсли; 
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	Элементы.ПланФакт.Отображение = ОтображениеТаблицы.Дерево;		
	
	Если СтррКонтекст.КартаЦентр = Неопределено Тогда
		СтррКонтекст.КартаЦентр = МодульКарты.ПолучитьКоординатыПользователя();
		МодульКарты.СохранитьЦентрКартыКлиент(СтррКонтекст.КартаЦентр);
	КонецЕсли;
	
	// { Корректируем восстановленные из настроек формы значения
	
	Если Перемещение.Количество() = 0 Тогда // если список пустой, заполняем его всеми видами документов
		Перемещение = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 	
	КонецЕсли; 

	Если ДатаОтчета = '00010101'  Тогда
		ДатаОтчета = ТекущаяДата();
	КонецЕсли; 
	
	Если ТаймингАктуальностиМестоположенияАгента = 0 Тогда
		ТаймингАктуальностиМестоположенияАгента = 15;
	КонецЕсли; 
	
	// }
	
	ЛегендаОбновитьТайминги();
	
	ФормаОбновитьПриСменеФлагаАдресОтдельнойСтрокой();
	ФормаДоступностьПериодаОтчета();
	
	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьОтчет(Команда)
	
	ФормаОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьДерево(Команда)
	
	ПланФакт.ПолучитьЭлементы().Очистить();
	Маркеры.Очистить();
	Треки.Очистить();
	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоФактуПосещения(Команда)
	
	ДеревоПланФактСортировать("ИндексФакта,ИндексПлана");
	ДеревоПланФактРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоПлануПосещения(Команда)
	
	ДеревоПланФактСортировать("ИндексПлана,ИндексФакта");
	ДеревоПланФактРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимПодробнойИнформацииВДеревеМаршрута(Команда)
	
	РежимДополнительнойИнфомации = Не РежимДополнительнойИнфомации;
	ФормаОбновитьПриСменеФлагаАдресОтдельнойСтрокой();
	ФормаОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьКоординаты(Команда)
	
	мКонтрагенты = Новый Массив;
	мСтроки = Элементы.ПланФакт.ВыделенныеСтроки;
	Для каждого идСтроки Из мСтроки Цикл
		СтрокаД = ПланФакт.НайтиПоИдентификатору(идСтроки);
		Если ЗначениеЗаполнено(СтрокаД.Контрагент) Тогда
			мКонтрагенты.Добавить(СтрокаД.Контрагент);
		КонецЕсли; 
	КонецЦикла; 
	
	Если мКонтрагенты.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выделите в таблице контрагентов для редактирования координат.';uk='Виділіть в таблиці контрагентів для редагування координат.'"));
	Иначе
		Форма = МодульК().ОткрытьФормуОбработки("РедакторМеток", СтррКонтекст);
		Форма.ВнешнийВызовДобавитьИПоказатьКонтрагентов(мКонтрагенты);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетВыполнениеПланаПосещений(Команда)
	
	Если ДатаОтчета = Дата('00010101') Тогда
		Текст = НСтр("ru='Укажите дату отчета.';uk='Вкажіть дату звіту.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаОтчета");
		Возврат;
	КонецЕсли;
	
	ВыбранныйАгент = ПланФактПолучитьТекущегоАгента(Истина);
	
	Если ВыбранныйАгент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррПараметры = Новый Структура("Агент,Период,СписокВидыДокументов,ТолькоПроведенныеДокументы,ВыделитьДень");
	стррПараметры.Агент  = ВыбранныйАгент;
	стррПараметры.Период = Новый СтандартныйПериод(НачалоМесяца(ДатаОтчета), КонецМесяца(ДатаОтчета));
	стррПараметры.СписокВидыДокументов 		 = Перемещение;
	стррПараметры.ТолькоПроведенныеДокументы = ТолькоПроведенныеДокументы;
	стррПараметры.ВыделитьДень 				 = ДатаОтчета;
	
	Форма = МодульК().ОткрытьФормуОбработки("ОтчетВыполнениеПланаПосещений", СтррКонтекст);
	Форма.ВнешнийВызовСформироватьОтчет(стррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	
	ФормаОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРеальногоВремениПриИзменении(Элемент)
	
	ФормаОбновитьОтчет(Новый Структура("РежимРеальногоВремени"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТрекТолькоПоСигналуGPSПриИзменении(Элемент)

	ФормаОбновитьОтчет(Новый Структура("ОбновитьПланФакт", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	//(( sk_190724 Пересоздаем ПолеБраузера, если не используем WebKit 
	Если Не МодульКарты.ИспользоватьWebKit() Тогда
		УдалитьПолеБраузера();
		СоздатьПолеБраузера();
	КонецЕсли;
	//)) sk_190724

	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Перемещение.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаВидовДокументов", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru='Выберите документы, включаемые в отчет';uk='Виберіть документи, що включаються до звіту'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиСпискаВидовДокументов(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолучатель = Перемещение;
	СписокПолучатель.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаПриИзменении(Элемент)
	
	Если ТаймингАктуальностиМестоположенияАгента < 1 Тогда
		ТаймингАктуальностиМестоположенияАгента = 1;
	КонецЕсли;
	
	ЛегендаОбновитьТайминги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//vd_180319 Доработка gi_180307
&НаКлиенте
Процедура ДекорацияУдаленностьРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбщиеНастройки_Основные" Тогда
		СтандартнаяОбработка = Ложь;
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "МаксимальноеРасстояниеОтТТ");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Источник = ДанныеСобытия.Button;
	
	Если Источник.id = "ClickEvent" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Источник.apObjectType = "polyline" Тогда
			
			Документ = Элемент.Document;
			
			ОкноБраузера = Документ.parentWindow; // IE
		    Если ОкноБраузера = Неопределено Тогда
		        ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
			
			Координаты = СтрРазделить_(Источник.apValue);
			
			Широта  = СтрокуВЧисло(Координаты[0]);
			Долгота = СтрокуВЧисло(Координаты[1]);
			стррЗначения = ТрекПолучитьДанныеДляКоординаты(Источник.apObjectID, КоординатаИзWGS84вNMEA(Широта), КоординатаИзWGS84вNMEA(Долгота));
			Если стррЗначения.КодОшибки <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стррЗначения.ТекстОшибки);
				Возврат;
			Иначе
				ОкноБраузера.setBalloon(Широта, Долгота, Строка(стррЗначения.Агент));
			КонецЕсли; 
			
		Иначе
			
			//...
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти

#Область ОбработчикиСобытийДереваПланФакт

&НаКлиенте
Функция ПланФактПолучитьТекущегоАгента(ПоказатьПредупреждение = Ложь)
	
	ВыбранныйАгент = Неопределено;
	
	СтрокаД = Элементы.ПланФакт.ТекущиеДанные;
	Пока СтрокаД <> Неопределено Цикл // в цикле поднимаемся вверх по ветке дерева до агента
		Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			ВыбранныйАгент = СтрокаД.Агент;
			Прервать;
		Иначе
	        СтрокаД = СтрокаД.ПолучитьРодителя();
		КонецЕсли;
	КонецЦикла; 
	
	Если ВыбранныйАгент = Неопределено И ПоказатьПредупреждение Тогда
		Если ПланФакт.ПолучитьЭлементы().Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Добавьте в таблицу нужного агента.';uk='Додайте в таблицю потрібного агента.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Выберите в таблице нужного агента.';uk='Виберіть в таблиці потрібного агента.'"));
		КонецЕсли; 	
	КонецЕсли; 
	
	Возврат ВыбранныйАгент;
	
КонецФункции

&НаКлиенте
Процедура ПланФактУстановитьТекущегоАгента(Агент)
	
	Если Не ЗначениеЗаполнено(Агент) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Агент = ПланФактПолучитьТекущегоАгента()  Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
		Если СтрокаД.Агент = Агент Тогда
			Элементы.ПланФакт.ТекущаяСтрока = СтрокаД.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Сотрудник,МножественныйВыбор", ПланФактПолучитьТекущегоАгента(), Истина));
	Оповещение = Новый ОписаниеОповещения("ПланФактДобавлениеЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборАгента", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактДобавлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	мАгенты = Результат;
	Если ТипЗнч(мАгенты) = Тип("Массив") Тогда
		ДеревоПланФактОбновить(мАгенты, Истина);
		КартаДобавитьМаркеры(Истина);
		ТрекиПрочитать(мАгенты);
		КартаДобавитьТреки(Истина);
		ДеревоПланФактРазвернуть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПриАктивизацииСтроки(Элемент)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		
		КартаПерейтиКТрекуТекущегоАгента();
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.Контрагент) Тогда
		
		КартаПерейтиКМаркеруТекущегоКонтрагента(Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПередУдалением(Элемент, Отказ)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		ПодключитьОбработчикОжидания("ФормаОбновитьПоТаймеру", 0.3, Истина);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МаршрутПредставление" Тогда
		Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			МодульК().ОткрытьФормуОбработки("НастройкиАгентов");
			Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Сотрудник", СтрокаД.Агент));
		ИначеЕсли ЗначениеЗаполнено(СтрокаД.Контрагент) Тогда
			ПоказатьЗначение(Неопределено, СтрокаД.Контрагент);
		ИначеЕсли ЗначениеЗаполнено(СтрокаД.Документ) Тогда
			Если ТипЗнч(СтрокаД.Документ) = Тип("Структура") Тогда // виртуальный документ
				стррДокумент = СтрокаД.Документ;
				МодульК().ВООткрытьФорму(стррДокумент);
			Иначе // обычный документ
				ПоказатьЗначение(Неопределено, СтрокаД.Документ);			
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийДереваПланФакт
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// Функция возвращает структуру наличия реквизитов у переданных видов документов.
&НаСервере
Функция ПолучитьПризнакиНаличияРеквизитов(списВидыДокументов, стрРеквизиты)
	
	стррРезультат = Новый Структура;
	мРеквизиты = СтрРазделить_(стрРеквизиты);

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого Элемент Из списВидыДокументов Цикл
		Если ТекОбъект.ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
		    Реквизиты = ТекОбъект.ВДокМассивРеквизитов(Элемент.Значение);
		Иначе	
			Реквизиты = Метаданные.Документы[Элемент.Значение].Реквизиты;
		КонецЕсли;
		стррРеквизиты = Новый Структура;
		Для Каждого ИмяРеквизита Из мРеквизиты Цикл
			Если Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				стррРеквизиты.Вставить(ИмяРеквизита);
			КонецЕсли; 
		КонецЦикла; 
		стррРезультат.Вставить(Элемент.Значение, стррРеквизиты);
	КонецЦикла; 
	
	Возврат стррРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура МассивИндексовИнициализировать(мИндексы, МаксИндекс)
	
	мИндексы = Новый Массив(МаксИндекс + 1);
	Для Индекс = 0 По МаксИндекс Цикл
		мИндексы[Индекс] = Индекс;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивИндексовПолучитьСвободный(мИндексы, МаксИндекс)

	Если мИндексы.Количество() = 0 Тогда
		МассивИндексовИнициализировать(мИндексы, МаксИндекс);
	КонецЕсли;
	
	Результат = мИндексы[0];
	мИндексы.Удалить(0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура МассивИндексовЗанятьЭлемент(мИндексы, Элемент)

	Индекс = мИндексы.Найти(Элемент);
	Если Индекс <> Неопределено Тогда
		мИндексы.Удалить(Индекс);
	КонецЕсли; 
	
КонецПроцедуры

// sk_191129 Процедура добавлена в рамках (MOD-977)
// Выполняет удаление ПолеБраузера
//
&НаСервере
Процедура УдалитьПолеБраузера()
	Элементы.Удалить(Элементы.ПолеБраузера);
КонецПроцедуры

// sk_191129 Процедура добавлена в рамках (MOD-977)
// Выполняет создание ПолеБраузера
//
&НаСервере
Процедура СоздатьПолеБраузера()
	
	Элемент = Элементы.Добавить("ПолеБраузера", Тип("ПолеФормы"), Элементы.ГруппаПраваяОбласть);
	Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	Элемент.ПутьКДанным = "ТекстСкрипта";
	Элемент.УстановитьДействие("ПолеБраузераПриНажатии");
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПреобразованиеЗначений

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПреобразованиеЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Легенда

&НаСервере
Процедура ЛегендаЗаполнить()
	
	Легенда.Очистить();
	
	СтрокаТ = Легенда.Добавить();
	СтрокаТ.Иконка 	 = 0;
	СтрокаТ.Описание = НСтр("ru='Не выполненное посещение по плану';uk='Не виконане відвідування за планом'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 1;
	СтрокаТ.Описание = НСтр("ru='Выполненное посещение по плану';uk='Виконане відвідування за планом'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 2;
	СтрокаТ.Описание = НСтр("ru='Посещение в незапланированный день';uk='Відвідування в незапланований день'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 3;
	СтрокаТ.Описание = НСтр("ru='Посещение отсутствующей в плане торговой точки';uk='Відвідування відсутньої в плані торгової точки'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 4;
	СтрокаТ.Описание = НСтр("ru='Начало трека';uk='Початок треку'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 5;
	СтрокаТ.Описание = НСтр("ru='Конец трека';uk='Кінець треку'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 6;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 7;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 8;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛегендаОписание(ЗначениеВМинутах, Шаг)

	СтрокаШаблон = ?(Шаг <> 3, НСтр("ru='Местоположение агента за %1 %2';uk='Місцезнаходження агента за %1 %2'"), НСтр("ru='Местоположение агента более %1 назад';uk='Місцезнаходження агента більш %1 тому'"));
	
	Если ЗначениеВМинутах % 60 = 0 Тогда
		Величина = ЗначениеВМинутах / 60;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru='часа';uk='години'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru='последний';uk='останній'"), НСтр("ru='час';uk='година'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru='часа,часов,часов';uk='години, годин, годин'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru='последние';uk='останні'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru='час,часа,часов';uk='годину, години, годин'")));
		КонецЕсли; 
	Иначе
		Величина = ЗначениеВМинутах;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru='минуты';uk='хвилини'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru='последнюю';uk='останню'"), НСтр("ru='минуту';uk='хвилину'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru='минуты,минут,минут';uk='хвилини, хвилин, хвилин'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru='последние';uk='останні'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru='минуту,минуты,минут';uk='хвилину, хвилини, хвилин'")));
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЛегендаОбновитьТайминги()
	
	стррПоиск = Новый Структура("Иконка");
	
	стррПоиск.Иконка = 6;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(ТаймингАктуальностиМестоположенияАгента, 1);
		
	стррПоиск.Иконка = 7;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 2);
		
	стррПоиск.Иконка = 8;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 3);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Легенда
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ФормаОбновитьОтчет(стррПараметры = Неопределено)

	ОчиститьСообщения();
	
	мАгенты = Неопределено;
	ОбновитьПланФакт = Истина;
	
	ТекущийАгент = ПланФактПолучитьТекущегоАгента(); // запоминаем текущего агента
	
	Если стррПараметры <> Неопределено Тогда
		
		Значение = Неопределено;
		Если стррПараметры.Свойство("РежимРеальногоВремени", Значение) Тогда
			Если Значение <> Неопределено Тогда
				РежимРеальногоВремени = Значение;
			КонецЕсли; 
			ФормаПриИзмененииРежимаРеальногоВремени();		
		КонецЕсли;
		
		Если стррПараметры.Свойство("Агент") Тогда
			мАгенты = Новый Массив;
			мАгенты.Добавить(стррПараметры.Агент);
		КонецЕсли;
		
		Если стррПараметры.Свойство("СписокВидыДокументов") Тогда
			Перемещение = стррПараметры.СписокВидыДокументов.Скопировать();
		КонецЕсли;
		
		Если стррПараметры.Свойство("ТолькоПроведенныеДокументы") Тогда
			ТолькоПроведенныеДокументы = стррПараметры.ТолькоПроведенныеДокументы;
		КонецЕсли;
		
		Если стррПараметры.Свойство("ОчиститьПередОбновлением") И стррПараметры.ОчиститьПередОбновлением = Истина Тогда
			ДеревоПланФактОчистить();
		КонецЕсли;
		
		Если стррПараметры.Свойство("Период") Тогда
			ДатаОтчета = стррПараметры.Период.ДатаНачала;		
		КонецЕсли; 
		
		Если стррПараметры.Свойство("ОбновитьПланФакт") И стррПараметры.ОбновитьПланФакт = Ложь Тогда
			ОбновитьПланФакт = Ложь;
		КонецЕсли; 
		
	КонецЕсли; 	
	
	Если ДатаОтчета = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьПланФакт Тогда
		ДеревоПланФактОбновить(мАгенты);
		ДеревоПланФактРазвернуть();
	КонецЕсли;
	
	ТрекиПрочитать();
	КартаДобавитьМаркеры(Истина);	
	КартаДобавитьТреки(Истина);
	
	ПланФактУстановитьТекущегоАгента(ТекущийАгент); // восстанавливаем выбор текущего агента

КонецПроцедуры
 
&НаКлиенте
Процедура ФормаДоступностьПериодаОтчета()
	
	Элементы.ДатаОтчета.Доступность = Не РежимРеальногоВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПриИзмененииРежимаРеальногоВремени()

	Если РежимРеальногоВремени Тогда
		ДатаОтчета = ТекущаяДата();
		ПодключитьОбработчикОжидания("ФормаОбновитьВРеальномВремени", 30);
	Иначе
		ОтключитьОбработчикОжидания("ФормаОбновитьВРеальномВремени");
	КонецЕсли; 
	
	ФормаДоступностьПериодаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОбновитьПриСменеФлагаАдресОтдельнойСтрокой()
	
	Элементы.МаршрутАдресКонтрагентаОтдельнойСтрокой.Пометка = РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаИнформация.Видимость = РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаВерх.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийВызовПоказатьТрек(стррПараметры) Экспорт
	
	стррПараметры.Вставить("РежимРеальногоВремени", Ложь);
	ФормаОбновитьОтчет(стррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОбновитьВРеальномВремени()
	
	ФормаОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОбновитьПоТаймеру()
	
	ФормаОбновитьОтчет(Новый Структура("ОбновитьПланФакт", Ложь));
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты

#Область СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

&НаКлиенте
Процедура КартаОбновитьТекущийМакет()
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объеткми?).
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);
	
	// sk_191129 Добавлено использование WebKit
	Если МодульКарты.ИспользоватьWebKit() Тогда
		ТекстСкрипта = ТекстМакета;
		//Параметр, показывающий, что файл скрипта используется для Редактора маршрута, переходит к области города.
		Элементы.ПолеБраузера.Документ.defaultView.name = КартаСформироватьПараметрРежимРедактора("Report", стррКонтекст.КартаЦентр);
	Иначе
		#Если Не ВебКлиент Тогда
			Документ = Элементы.ПолеБраузера.Document;	
			
			КартаЗагрузитьМакет(Документ, ТекстМакета);
			
			ОкноБраузера = Документ.parentWindow; // IE
			Если ОкноБраузера = Неопределено Тогда
				ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
			
			//передаем параметр, показывающий, что файл скрипта используется для Редактора маршрута		
			ОкноБраузера.name = КартаСформироватьПараметрРежимРедактора("Report", стррКонтекст.КартаЦентр);
		#Иначе
			ТекстСкрипта = ТекстМакета;
		#КонецЕсли
	КонецЕсли;
	
	ФормаОбновитьОтчет(Новый Структура("ОбновитьПланФакт", Ложь));
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   КартаСсылка    - СправочникСсылка.апОнлайнКарты - ссылка на карту
//   Широта 		- широта для позиционирования центра карты
//   Долгота    	- долгота для позиционирования центра карты
//  		Если параметры Широта и Долгота не указаны, 
//			то центр карты берется из атрибутов КартаСсылка.Широта и КартаСсылка.Долгота.
//
//  Возвращаемое значение:
//   РежимРедактора - Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, стррЦентр = Неопределено) Экспорт
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") И стррЦентр.Свойство("Широта") Тогда
		ШиротаСтр  = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Широта));
		ДолготаСтр = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Долгота));
	Иначе
		ШиротаСтр  = "0";
		ДолготаСтр = "0";
	КонецЕсли; 
	
	Возврат ШиротаСтр + "@" + ДолготаСтр + "@" + РежимРедактора;	
	
КонецФункции

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			ТекстСкрипта = ТекстМакета;
		КонецПопытки;
	КонецПопытки; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДеревоПланФакта

&НаКлиенте
Процедура ДеревоПланФактРазвернуть(мАгенты = Неопределено)
	
	ЭлементДерево = Элементы.ПланФакт;
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл 
		Если мАгенты = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
				ЭлементДерево.Развернуть(СтрокаД.ПолучитьИдентификатор(), Ложь);			
			КонецЕсли; 
		ИначеЕсли мАгенты.Найти(СтрокаД.Агент) <> Неопределено Тогда
			ЭлементДерево.Развернуть(СтрокаД.ПолучитьИдентификатор(), Ложь);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру с основными свойствами списка ТТ закрепленного за агентом - наименование, ссылку и описание ошибки.
&НаСервере
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент)

	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент);

КонецФункции

&НаКлиенте
Процедура ДеревоПланФактОчистить()
	
	ПланФакт.ПолучитьЭлементы().Очистить();
	Маркеры.Очистить();
	Треки.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ДеревоПланФактОбновить(мАгенты = Неопределено, ДобавлениеАгентов = Ложь)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	стррПараметры = Новый Структура("Агент,СсылкаСписокТТ");
	стррПараметры.Вставить("Период", Новый СтандартныйПериод(ДатаОтчета, ДатаОтчета));
	стррПараметры.Вставить("ТолькоПроведенныеДокументы", 	ТолькоПроведенныеДокументы);
	стррПараметры.Вставить("списокВидыДокументов", 			Перемещение);
	стррПараметры.Вставить("ДобавитьВремяПосещения", 		Истина);
	стррПараметры.Вставить("ДобавитьКоординатыКонтрагентов",Истина);
	стррПараметры.Вставить("ВернутьФактПосещений", 			Истина);
	стррПараметры.Вставить("ИгнорироватьОтсутствиеПлана", 	Истина);
	стррПараметры.Вставить("ПронумероватьФактыПосещений", 	Истина);
	стррПараметры.Вставить("ДопустимаяУдаленностьОтТТ", 	ДопустимаяУдаленностьОтТТ); //vd_180319 Доработка gi_180307
	
	ВнеПлана = ТекОбъект.ПланПосещенийНомерПунктаВнеПлана();
	
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
	
	стрРеквизитПодразделение = ТекОбъект.РеквизитОбъектаИзСписка(Метаданные.Справочники.Сотрудники, "Подразделение,ТекущееПодразделение");
	
	стррФлагиНаличияРеквизитовДокументов = ПолучитьПризнакиНаличияРеквизитов(Перемещение, "СуммаДокумента,Валюта,Комментарий");
	стррПоиск = Новый Структура("Контрагент"); // для поиска документов факта посещений
	
	Если мАгенты = Неопределено Тогда
		мАгенты = Новый Массив;
		Для каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
			мАгенты.Добавить(СтрокаД.Агент);
		КонецЦикла; 
	КонецЕсли; 
	
	Для Каждого ЭлементАгент Из мАгенты Цикл
		
		Родитель = Дерево.Строки;
		СтрокаД = Родитель.Найти(ЭлементАгент, "Агент");
		Если СтрокаД <> Неопределено Тогда
			Если ДобавлениеАгентов Тогда
				Текст = НСтр("ru='Агент ""%1"" уже добавлен в таблицу.';uk='Агент ""%1"" вже доданий в таблицю.'");	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, ЭлементАгент));
				Продолжить;
			Иначе
				СтрокаД.Строки.Очистить(); // очищаем строки плана и факта у агента, что делаем с маркерами, которые на карте???
			КонецЕсли; 
		КонецЕсли; 
		
		стррСвойстваСпискаТТ = ТекОбъект.ПрочитатьИПроверитьСписокТорговыхТочекАгента(ЭлементАгент, Ложь);
		Если ДобавлениеАгентов Тогда
			Если стррСвойстваСпискаТТ.КодОшибки <> Неопределено И стррСвойстваСпискаТТ.КодОшибки <> "ДетализацияСТТБезПланаГрафика" Тогда
				Текст = СтрШаблон_(НСтр("ru='Не включен план для агента ""%1"". %2';uk='Не включений план для агента ""%1"". %2'"), ЭлементАгент, стррСвойстваСпискаТТ.ТекстОшибки);	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаД = Неопределено Тогда
			
			СтрокаД = Родитель.Добавить();
			СтрокаД.Агент = ЭлементАгент;
			СтрокаД.Представление = СтрокаД.Агент;
			Если стрРеквизитПодразделение = Неопределено Тогда
				СтрокаД.Информация = "";
			ИначеЕсли ЗначениеЗаполнено(ЭлементАгент[стрРеквизитПодразделение]) Тогда
				СтрокаД.Информация = ЭлементАгент[стрРеквизитПодразделение];
			Иначе
				СтрокаД.Информация = НСтр("ru='Подразделение не указано.';uk='Підрозділ не вказано.'");
			КонецЕсли; 
			
		КонецЕсли; 
		СтрокаД.Иконка = 1; // иконка агента
		СтрокаД.КодЦвета = -1; // цвет не назначен
		Родитель = СтрокаД.Строки;
		
		стррПараметры.Агент 		 = ЭлементАгент;
		стррПараметры.СсылкаСписокТТ = стррСвойстваСпискаТТ.СсылкаСписокТТ;
		
		тзПланФактПосешений  = ТекОбъект.ПолучитьПланФактПосещений(стррПараметры);
		тзФактПосещений = стррПараметры.тзФактПосещений; // таблица документов посещений
		
		Если стррСвойстваСпискаТТ.ИспользоватьПорядокСписокТТ Тогда
			тзПланФактПосешений.Сортировать("П1");
		КонецЕсли; 
		
		ЕстьВиртуальныеДокументы = тзФактПосещений.Колонки.Найти("СсылкаВДок") <> Неопределено;
		
		Для каждого СтрокаТ Из тзПланФактПосешений Цикл
			
			ЕстьФакт = ЗначениеЗаполнено(СтрокаТ.Д1);
			Если СтрокаТ.П1 <> 0 Тогда
				Если ЕстьФакт Тогда
					Иконка = 3; // выполненное посещение по плану
				Иначе
					Иконка = 2; // не выполненное посещение
				КонецЕсли; 
			ИначеЕсли ЕстьФакт Тогда
				Если СтрокаТ.НомерВПлане < ВнеПлана Тогда
					Иконка = 4; // выполненное посещение вне плана для плановой ТТ
				Иначе
					Иконка = 5; // выполненное посещение вне плана для внеплановой ТТ
				КонецЕсли; 
			Иначе
				Продолжить; // ТТ есть в плане, но не на этот день
			КонецЕсли; 
			
			СтрокаД = Родитель.Добавить();
			СтрокаД.Контрагент = СтрокаТ.Контрагент;
			СтрокаД.Иконка  = Иконка;
			Если СтрокаТ.НФ1 <> 0 Тогда // номер факта
				СтрокаД.Время   	= Строка(СтрокаТ.НФ1) + ". " + СтрокаТ.Д1;
				СтрокаД.ИндексФакта = СтрокаТ.НФ1;
			Иначе
				СтрокаД.Время   	= "";
				СтрокаД.ИндексФакта = 99999; // чтобы после сортировки не посещенные ТТ были в конце
			КонецЕсли; 
			
			СтрокаД.Широта  = СтрокаТ.Широта;
			СтрокаД.Долгота = СтрокаТ.Долгота;
			Если СтрокаТ.П1 > 0 И СтрокаТ.П1 < 1000 Тогда // порядок по плану для отображения в дереве
				СтрокаД.ИндексПлана = СтрокаТ.П1;
				стрПорядок = Строка(СтрокаТ.П1) + ". ";
			Иначе
				СтрокаД.ИндексПлана = 1000;
				стрПорядок = "";
			КонецЕсли; 
			
			Если РежимДополнительнойИнфомации Тогда
				СтрокаД.Представление = стрПорядок + СтрокаТ.Контрагент;
				СтрокаД.Информация = СтрокаТ.Адрес;
				Если СтрокаД.Широта = 0 Тогда
					СтрокаД.Информация = НСтр("ru='Координаты не указаны.';uk='Координати не вказані.'");
				КонецЕсли; 
			ИначеЕсли ПустаяСтрока(СтрокаТ.Адрес) Тогда
				СтрокаД.Представление = стрПорядок + СтрокаТ.Контрагент;
			Иначе
				СтрокаД.Представление = стрПорядок + СтрокаТ.Контрагент + "  -  " + СтрокаТ.Адрес;
			КонецЕсли; 

			Если ЕстьФакт Тогда // добавляем документы
				стррПоиск.Контрагент = СтрокаТ.Контрагент;
				мСтроки = тзФактПосещений.НайтиСтроки(стррПоиск);
				Если мСтроки.Количество() <> 0 Тогда
					РодительДок = СтрокаД.Строки;
					
					Для каждого стзФакт Из мСтроки Цикл
						СтрокаД = РодительДок.Добавить();						
						ЭтоВиртуальныйДокумент = ЕстьВиртуальныеДокументы И ЗначениеЗаполнено(стзФакт.СсылкаВДок);
						Если ЭтоВиртуальныйДокумент Тогда
							СсылкаДок = стзФакт.СсылкаВДок;
							тзЖурнала = ТекОбъект.ВОЗагрузитьТЗ(СсылкаДок.ВидДокумента, Истина); // ТЗ загружается из кэша
							стзЖурнала = тзЖурнала.Найти(СсылкаДок.ID, "ID");
							СтрокаД.Представление = ТекОбъект.ВДокПредставление(СсылкаДок.ВидДокумента, стзЖурнала);
						Иначе
							СсылкаДок = стзФакт.Ссылка;
							СтрокаД.Представление = Строка(СсылкаДок);
						КонецЕсли;

						СтрокаД.Документ 	  = СсылкаДок;
						Если СсылкаДок.Проведен Тогда
							СтрокаД.Иконка = 7;
						ИначеЕсли СсылкаДок.ПометкаУдаления Тогда
							СтрокаД.Иконка = 8;
						Иначе
							СтрокаД.Иконка = 9;
						КонецЕсли;
						
						ЗнакВнеТТ = ?(стзФакт.ЕстьПосещение, "", "*"); //vd_180319 Доработка gi_180307 знак пусто или "*" для индикации создания документа вне ТТ или в ТТ 
						СтрокаД.Время = Формат(стзФакт.ВремяНачала, "ДФ=""HH:mm""") + ЗнакВнеТТ + " - " + Формат(стзФакт.ВремяОкончания, "ДФ=""HH:mm""") + ЗнакВнеТТ;
						
						Если РежимДополнительнойИнфомации Тогда
							Если ЭтоВиртуальныйДокумент Тогда
								ОбъектДок = стзЖурнала;
								стррРеквизиты = стррФлагиНаличияРеквизитовДокументов[СсылкаДок.ВидДокумента];
							Иначе
								ОбъектДок = СсылкаДок.ПолучитьОбъект();
								стррРеквизиты = стррФлагиНаличияРеквизитовДокументов[СсылкаДок.Метаданные().Имя];
							КонецЕсли; 
							стрИнформация = "";
							Если стррРеквизиты.Свойство("СуммаДокумента") Тогда
								стрИнформация = НСтр("ru='Сумма: ';uk='Сума:'") + Формат(ОбъектДок.СуммаДокумента, "ЧДЦ=2");
							КонецЕсли; 
							Если стррРеквизиты.Свойство("Валюта") Тогда
								стрИнформация = стрИнформация + " " + ОбъектДок.Валюта;
							КонецЕсли; 
							Если стррРеквизиты.Свойство("Комментарий") И Не ПустаяСтрока(ОбъектДок.Комментарий) Тогда
								стрИнформация = стрИнформация + ?(ПустаяСтрока(стрИнформация), "", "; ") 
									+ НСтр("ru='Комментарий: ';uk='Коментар:'") + ОбъектДок.Комментарий;
							КонецЕсли; 
							СтрокаД.Информация = стрИнформация;
						КонецЕсли; 
					КонецЦикла; 
					
				КонецЕсли; 
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	
	
	ТрекиДобавить(мАгенты);
	МаркерыОбновитьТЗ();	
	
КонецФункции // ДеревоПланФактОбновить()

&НаСервере
Процедура ДеревоПланФактСортировать(ИмяКолонки)
	
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
    Для каждого СтрокаД Из Дерево.Строки Цикл
		СтрокаД.Строки.Сортировать(ИмяКолонки, Ложь);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ДеревоПланФакта  
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Треки

&НаСервере
Процедура ТрекиДобавить(мАгенты)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗ = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов"); // ТЗ для чтения названий папок обмена
	
	стррПоиск = Новый Структура("Агент");
	
	Для Каждого ЭлементАгент Из мАгенты  Цикл
		
		стррПоиск.Агент = ЭлементАгент;
		мСтроки = Треки.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() <> 0 Тогда
			Продолжить; // агент уже есть в таблице Треки
		КонецЕсли; 
		СтрокаТ = ТЗ.Найти(ЭлементАгент, "Сотрудник");
		Если СтрокаТ <> Неопределено Тогда
			стзТреки = Треки.Добавить();
			стзТреки.Агент = ЭлементАгент;
			стзТреки.КаталогОбмена = ТекОбъект.ДополнитьСлешВПуть(СтрокаТ.КаталогОбмена);
		КонецЕсли; 

	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ТрекиПрочитать(мАгенты = Неопределено)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ОбщийКаталогТреков = ТекОбъект.ПодкаталогДанных("Треки", СтррКонтекст.КаталогДанных);
	
	стррПоиск = Новый Структура("Агент");	
	
	// нужно обновить цветные иконки маршрутов у агентов
	// Перед добавлением определяем какие цвета заняты
	МаксИндексЦвета = СтррКонтекст.ЦветаТреков.Количество() - 1;
	
	мИндексыЦветов = Неопределено;
	МассивИндексовИнициализировать(мИндексыЦветов, МаксИндексЦвета);
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаД.Агент) И СтрокаД.КодЦвета <> -1 Тогда
			МассивИндексовЗанятьЭлемент(мИндексыЦветов, СтрокаД.КодЦвета);
		КонецЕсли;
	КонецЦикла; 	

	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл 	

		Если Не ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			Продолжить;
		ИначеЕсли мАгенты <> Неопределено Тогда
			Если мАгенты.Найти(СтрокаД.Агент) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		стррПоиск.Агент = СтрокаД.Агент;
		мСтроки = Треки.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() = 0 Тогда
			СтрокаД.Время = "";
			Продолжить;	
		КонецЕсли;
		
		стзТреки = мСтроки[0];
		
		Если ПустаяСтрока(стзТреки.КаталогОбмена) Тогда
			
			Текст = НСтр("ru='У агента ""%1"" не указан каталог обмена данными. Чтение треков невозможно.';uk='У агента ""%1"" не вказано каталог обміну даними. Читання треків неможливо.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, стзТреки.Агент));
			
		Иначе
			
			тзТрек = стзТреки.Трек;
			тзТрек.Очистить();
			КаталогТрековАгента = ОбщийКаталогТреков + стзТреки.КаталогОбмена;
			стррДанные = ТекОбъект.ТрекОткрытьФайл(ДатаОтчета, КаталогТрековАгента);
			
			Если стррДанные.ВремяНачала <> '00010101' Тогда
				СтрокаД.Время = Формат(стррДанные.ВремяНачала, "ДФ='HH:mm'") + " - " + Формат(стррДанные.ВремяОкончания, "ДФ='HH:mm'");
			Иначе
				СтрокаД.Время = "";
			КонецЕсли; 
			
			тзФайлТрека = стррДанные.Трек;
			
			Если тзФайлТрека.Количество() = 0 Тогда // трека нет
				СтрокаД.Иконка = 1; // иконка агента - означает, что трека нет
				стзТреки.РегионТрека = Неопределено;
				Продолжить;
			ИначеЕсли СтрокаД.КодЦвета = -1 Тогда
				СтрокаД.КодЦвета = МассивИндексовПолучитьСвободный(мИндексыЦветов, МаксИндексЦвета);
				СтрокаД.Иконка = СтрокаД.КодЦвета + 10; // иконка цвета
			КонецЕсли; 
			
			Если ТрекТолькоПоСигналуGPS Тогда
				Для Каждого стзФайлТрека Из тзФайлТрека Цикл
					Если стзФайлТрека.ИсточникСигнала = 1 Тогда
						стзТрек = тзТрек.Добавить();
						ЗаполнитьЗначенияСвойств(стзТрек, стзФайлТрека);
					КонецЕсли; 
				КонецЦикла; 
			Иначе	
				Для Каждого стзФайлТрека Из тзФайлТрека Цикл
					стзТрек = тзТрек.Добавить();
					ЗаполнитьЗначенияСвойств(стзТрек, стзФайлТрека);
				КонецЦикла; 
			КонецЕсли; 
			
			// Определяем регион трека
			
			тзФайлТрека.Сортировать("Широта");
			минШирота   = тзФайлТрека[0].Широта;
			максШирота  = тзФайлТрека[тзФайлТрека.Количество()-1].Широта;
			
			тзФайлТрека.Сортировать("Долгота");
			минДолгота  = тзФайлТрека[0].Долгота;
			максДолгота = тзФайлТрека[тзФайлТрека.Количество()-1].Долгота;
			
			стзТреки.РегионТрека = Новый Структура("минШирота,минДолгота,максШирота,максДолгота", 
				минШирота, минДолгота, максШирота, максДолгота );
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура КартаДобавитьТреки(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	мЦвета 		= СтррКонтекст.ЦветаТреков;
	ПутьИконок 	= СтррКонтекст.КаталогИконок;
	Подвал = ""; Подсказка = ""; Порядок = "";
	
	стррПоиск = Новый Структура("Агент");
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		    Продолжить;
		КонецЕсли; 
		
		стррПоиск.Агент = СтрокаД.Агент;
		мСтроки = Треки.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		стрСписокШирота  = "";
		стрСписокДолгота = "";
		стрСписокВремя 	 = "";
		
		тзТрек = мСтроки[0].Трек;
		Для каждого стзТрек Из тзТрек Цикл
			стрСписокШирота	 = стрСписокШирота  + Формат(стзТрек.Широта,  "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
			стрСписокДолгота = стрСписокДолгота + Формат(стзТрек.Долгота, "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
			стрСписокВремя 	 = стрСписокВремя 	+ стзТрек.Время + ";"; // стзТрек.Время
		КонецЦикла; 
		
		Если ПустаяСтрока(стрСписокШирота) Тогда
			Продолжить;
		КонецЕсли; 
		
		стрСписокШирота  = Лев(стрСписокШирота, СтрДлина(стрСписокШирота)-1);
		стрСписокДолгота = Лев(стрСписокДолгота,СтрДлина(стрСписокДолгота)-1);	
		стрСписокВремя 	 = Лев(стрСписокВремя, 	СтрДлина(стрСписокВремя)-1);	
		
		ЦветМаршрута = "#" + мЦвета[СтрокаД.КодЦвета];// "000088";
		Стиль = "solid";
		Толщина = 3;
		НеПрозрачность = 80;
		
		СтрокаКоординатПолигона = ""; 
		СтрВремя = ""; 
		СтрРасстояние = "";
		идАгент = Строка(СтрокаД.Агент.УникальныйИдентификатор());
		
		Попытка
		
			Если ПривязыватьТрекКДорогам Тогда 
				//ОкноБраузера.setRoute(стрСписокШирота, стрСписокДолгота, СтрВремя, СтрРасстояние, 2, ЦветМаршрута, Объект.ТолщинаПлана, Стиль, Объект.ПрозрачностьПлана/100, СтрокаКоординатПолигона);
			Иначе
				ОкноБраузера.setPolyline(стрСписокШирота, стрСписокДолгота, стрСписокВремя, ЦветМаршрута, Толщина, Стиль, НеПрозрачность/100, СтрокаКоординатПолигона, СтрВремя, СтрРасстояние, Строка(СтрокаД.Агент), идАгент);
			КонецЕсли;
			
			// добавляем маркеры начала и конца трека
			МаркерСтарт = тзТрек[0];
			МаркерКонец = тзТрек[тзТрек.Количество()-1];
			
			Описание = НСтр("ru='Начало: ';uk='Початок:'") + Формат(МаркерСтарт.Время, "ДФ='HH:mm'");
			ОкноБраузера.setMarker(МаркерСтарт.Широта, МаркерСтарт.Долгота, ПутьИконок + "trackstart3.png", Строка(СтрокаД.Агент), Описание, Подвал, Подсказка, Порядок, Ложь);
			
			Если РежимРеальногоВремени Тогда // внешний вид маркера конца зависит от режима реального времени
				ВремяКонца = МаркерКонец.Время;
				ОтладкаДельта = 0; //900;
				РазницаВремени = (ТекущаяДата() - ВремяКонца + ОтладкаДельта) / 60;
				Если РазницаВремени > 2 * ТаймингАктуальностиМестоположенияАгента Тогда
					ИконкаКонца = "agent3.png";  // красный агент
				ИначеЕсли РазницаВремени > ТаймингАктуальностиМестоположенияАгента Тогда
					ИконкаКонца = "agent2.png";  // желтый агент
				Иначе
					ИконкаКонца = "agent1.png";  // зеленый агент
				КонецЕсли; 
				Описание = НСтр("ru='Время: ';uk='Час:'") + Формат(МаркерКонец.Время, "ДФ='HH:mm'");
			Иначе
				ИконкаКонца = "trackend3.png";				
				Описание = НСтр("ru='Конец: ';uk='Кінець:'") + Формат(МаркерКонец.Время, "ДФ='HH:mm'");
			КонецЕсли; 
			
			ОкноБраузера.setMarker(МаркерКонец.Широта, МаркерКонец.Долгота, ПутьИконок + ИконкаКонца, Строка(СтрокаД.Агент), Описание, Подвал, Подсказка, Порядок, Ложь);
			
		Исключение
			Если УстановитьТаймер Тогда
				Таймер_Включить("КартаДобавитьТреки");
			Иначе
				ПоказатьПредупреждение(, ОписаниеОшибки());
			КонецЕсли; 
			Прервать;
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПоказатьРегион(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Если Не УстановитьТаймер Тогда 
		ОкноБраузера.SetBounds(СтррРегион.МинШирота, СтррРегион.МинДолгота, СтррРегион.МаксШирота, СтррРегион.МаксДолгота);
	Иначе
		Попытка
			ОкноБраузера.SetBounds(СтррРегион.МинШирота, СтррРегион.МинДолгота, СтррРегион.МаксШирота, СтррРегион.МаксДолгота);
		Исключение
			Таймер_Включить("ПоказатьРегион");	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТрекПолучитьДанныеДляКоординаты(стрИдентификаторАгента, Широта, Долгота)

	стррРезультат = Новый Структура("КодОшибки,ТекстОшибки,Агент,Данные");
	
	Идентификатор = Новый УникальныйИдентификатор(стрИдентификаторАгента);
	
	Агент = Справочники.Сотрудники.ПолучитьСсылку(Идентификатор);
	Если Не ЗначениеЗаполнено(Агент) Тогда
		стррРезультат.КодОшибки   = "АгентНеНайден";
		стррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru='Не найден агент с идентификатором ""%1""!';uk='Не вдалося знайти агент з ідентифікатором ""%1""!'"), стрИдентификаторАгента);
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррПоиск = Новый Структура("Агент", Агент);
	мСтроки = Треки.НайтиСтроки(стррПоиск);
	Если мСтроки.Количество() = 0 Тогда
		стррРезультат.КодОшибки   = "ТрекНеНайден";
		стррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru='Не найден трек для агента ""%1""!';uk='Не вдалося знайти трек для агента ""%1""!'"), Агент);
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррРезультат.Агент  = Агент;
    стррРезультат.Данные = "";
	
	Возврат стррРезультат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_Треки
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карты_Маркеры

&НаСервере
Процедура МаркерыОбновитьТЗ()
	
	Маркеры.Очистить();
	
	МаксНомерИконки = СтррКонтекст.МаксНомерИконки;
	мИконкиКарты = Новый Массив(6);
	
	мИконкиКарты[2] = "tpnochek";  // не выполненное посещение	
	мИконкиКарты[3] = "tpcheck";   // выполненное посещение по плану
	мИконкиКарты[4] = "tpcheknp";  // выполненное посещение вне плана для плановой ТТ
	мИконкиКарты[5] = "tpcheknew"; // выполненное посещение вне плана для внеплановой ТТ
	
	ОдинАгент = (ПланФакт.ПолучитьЭлементы().Количество() = 1);
	
	стррПоиск = Новый Структура("Контрагент");
	
	Для каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
		
		Агент = СтрокаД.Агент;
		
		Для каждого сдзКонтрагент Из СтрокаД.ПолучитьЭлементы() Цикл
			ИконкаКонтрагента = сдзКонтрагент.Иконка;
			стррПоиск.КОнтрагент = сдзКонтрагент.Контрагент;		
			мСтроки = Маркеры.НайтиСтроки(стррПоиск);
			
			Если мСтроки.Количество() = 0 Тогда // маркер добавляется впервые
				
				стзМаркеры = Маркеры.Добавить();
				ЗаполнитьЗначенияСвойств(стзМаркеры, сдзКонтрагент);
				Если ОдинАгент Тогда
					Если ИконкаКонтрагента = 2 Тогда // не посещенная ТТ по плану
						стзМаркеры.Иконка = мИконкиКарты[ИконкаКонтрагента] + ?(сдзКонтрагент.ИндексПлана <= МаксНомерИконки, Строка(сдзКонтрагент.ИндексПлана), "") + ".png";  // нумерованная иконка плана
					Иначе
						стзМаркеры.Иконка = мИконкиКарты[ИконкаКонтрагента] + ?(сдзКонтрагент.ИндексФакта <= МаксНомерИконки, Строка(сдзКонтрагент.ИндексФакта), "") + ".png";  // нумерованная иконка факта
					КонецЕсли;
				Иначе
					стзМаркеры.Иконка = мИконкиКарты[ИконкаКонтрагента] + ".png";  // ненумерованная иконка
				КонецЕсли;
				
				Если ИконкаКонтрагента <> 2 Тогда
					стзМаркеры.Описание = НСтр("ru = '<br>Посетил:<br>'; uk = '<br>Відвідав:<br>'") + ВыделитьИнтервалВремени(сдзКонтрагент.Время) + ", " + Строка(Агент);
				КонецЕсли; 
				
			ИначеЕсли ИконкаКонтрагента <> 2 Тогда // ТТ была посещена, обновляем маркер в этом случае
				
				стзМаркеры = мСтроки[0];
				стзМаркеры.Иконка = мИконкиКарты[ИконкаКонтрагента] + ".png";
				Если ПустаяСтрока(стзМаркеры.Описание) Тогда
					стзМаркеры.Описание = НСтр("ru = '<br>Посетил:<br>'; uk = '<br>Відвідав:<br>'") + ВыделитьИнтервалВремени(сдзКонтрагент.Время) + ", " + Строка(Агент);
				Иначе
					стзМаркеры.Описание = стзМаркеры.Описание + "<br>" + ВыделитьИнтервалВремени(сдзКонтрагент.Время) + ", " + Строка(Агент);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 

КонецПроцедуры

// Функция выделяет из строки вида "N. ЧЧ:ММ - ЧЧ:ММ" строку "ЧЧ:ММ - ЧЧ:ММ"
&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИнтервалВремени(стрВремя)

	Индекс = Найти(стрВремя, ".");
	Если Индекс = 0 Тогда
		Возврат стрВремя;
	Иначе
		Возврат Сред(стрВремя, Индекс + 1);
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура КартаПерейтиКТрекуТекущегоАгента()
	
	СтрокаД = Элементы.ПланФакт.ТекущиеДанные;
	Если СтрокаД = Неопределено Или Не ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		Возврат;
	ИначеЕсли СтрокаД.Иконка = 1 Тогда // иконка агента означает, что трека нет
		Возврат;
	КонецЕсли;
	
	стррПоиск = Новый Структура("Агент");
	
	стррПоиск.Агент = СтрокаД.Агент;
	мСтроки = Треки.НайтиСтроки(стррПоиск);
	Если мСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтррРегион = мСтроки[0].РегионТрека;
	
	КартаПоказатьРегион(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПерейтиКМаркеруТекущегоКонтрагента(Принудительно)
	
	СтрокаД = Элементы.ПланФакт.ТекущиеДанные;
	Если СтрокаД <> Неопределено И ЗначениеЗаполнено(СтрокаД.Контрагент) Тогда
		
		Если Не Принудительно И СтррМаркер.Широта = СтрокаД.Широта И СтрокаД.Долгота = СтрокаД.Долгота Тогда
			Возврат; // координаты маркера не менялись
		КонецЕсли; 
		
		СтррМаркер.Широта    = СтрокаД.Широта;
		СтррМаркер.Долгота   = СтрокаД.Долгота;
		СтррМаркер.Заголовок = Строка(СтрокаД.Контрагент);
		
		Если СтррМаркер.Широта <> 0 И СтррМаркер.Долгота <> 0 Тогда 
			КартаПерейтиКМаркеру(Истина);
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры		

&НаКлиенте
Процедура КартаПерейтиКМаркеру(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Широта 	= СтррМаркер.Широта;
	Долгота = СтррМаркер.Долгота;
	
	Если Не УстановитьТаймер Тогда 
		ОкноБраузера.GoToMarker(Широта, Долгота);
	Иначе
		Попытка
			ОкноБраузера.GoToMarker(Широта, Долгота);
		Исключение
			Таймер_Включить("ПерейтиКМаркеру");	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаДобавитьМаркеры(УстановитьТаймер = Ложь)
	
	Если Маркеры.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Описание 		= "";
	Подвал 			= "";
	Подсказка 		= "";
	Порядок  		= "";
	
	ИмяФайлаИконки = "tpnochek.png";
	
	//ОтображаемаяИконка = СтррКонтекст.КаталогИконок + ИмяФайлаИконки;
	ПутьИконок = СтррКонтекст.КаталогИконок;
	
	СтррМаркер.Удалить("НоваяШирота"); // удаляем признак редактирования маркера, чтобы карта центрировалась по координатам маркера, а не по отредактированным координатам
	СтррМаркер.Удалить("НоваяДолгота");
	
	Попытка 
		
		Документ 		= Элементы.ПолеБраузера.Document;		
		ОкноБраузера 	= Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		
		ОкноБраузера.ClearCollection();
		
		Для Каждого Маркер Из Маркеры Цикл
			ОкноБраузера.setMarker(Маркер.Широта, Маркер.Долгота, ПутьИконок + Маркер.Иконка, Строка(Маркер.Контрагент), Маркер.Описание, Подвал, Подсказка, Порядок, Ложь);			
		КонецЦикла; 
		
	Исключение
		
		Если УстановитьТаймер Тогда 
			Таймер_Включить("ДобавитьМаркеры");	
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При построении карты произошла ошибка. Возможно, карта не загружена.'; uk = 'При побудові карти сталася помилка. Можливо, карта не завантажена.'"));
		КонецЕсли;	
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаИзменитьКоординатыМаркера(стрКоординаты)
	
	мКоординаты = СтрРазделить_(стрКоординаты, ",");
	
	Если мКоординаты.Количество() <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяШирота  = СтрокуВЧисло(мКоординаты[0]);
	НоваяДолгота = СтрокуВЧисло(мКоординаты[1]);
	Если стррМаркер.Свойство("ПрежняяШирота") И стррМаркер.Свойство("ПрежняяДолгота") Тогда
		Если НоваяШирота = стррМаркер.ПрежняяШирота И НоваяДолгота = стррМаркер.ПрежняяДолгота Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	стррМаркер.Вставить("НоваяШирота",  	НоваяШирота);
	стррМаркер.Вставить("НоваяДолгота", 	НоваяДолгота);
	стррМаркер.Вставить("ПрежняяШирота",  	НоваяШирота);
	стррМаркер.Вставить("ПрежняяДолгота", 	НоваяДолгота);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Маркеры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты_Таймер

// Процедура включает таймер обработки очереди событий для поля браузера, 
// при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
// Также должен быть объявлен реквизит формы ТаймерОжидания.
// Реквизит формы "ТаймерОжидания" используется для организациии очереди передачи команд в поле браузера, 
// т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
&НаКлиенте
Процедура Таймер_Включить(Событие)
	Если ТипЗнч(ТаймерОжидания) <> Тип("Структура") Тогда // реквизит еще не инициализировался
		ТаймерОжидания = Новый Структура("Включен,Очередь,Время", Ложь);
		ТаймерОжидания.Очередь = Новый Массив; // стэк событий для взаимодействия с полем браузера (обрабатывается в порядке добавления событий) 
	КонецЕсли;
	Если ТаймерОжидания.Очередь.Найти(Событие) = Неопределено Тогда
		ТаймерОжидания.Очередь.Добавить(Событие);
		ТаймерОжидания.Время = ТекущаяДата();
	КонецЕсли;
	Если Не ТаймерОжидания.Включен Тогда
		ТаймерОжидания.Включен = Истина;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_Обработчик()
	
	Если ТекущаяДата() - ТаймерОжидания.Время > 5 Тогда // время с момента постановки события в очередь привысило 5 секунд - прекращаем обрабатывать все события
		Таймер_Выключить(Истина);
	КонецЕсли;
	Событие =  ТаймерОжидания.Очередь[0];
	Попытка
		Если Событие = "ДобавитьМаркеры" Тогда
			КартаДобавитьМаркеры();
		ИначеЕсли Событие = "ПерейтиКМаркеру" Тогда
			КартаПерейтиКМаркеру();
		ИначеЕсли Событие = "ПоказатьРегион" Тогда			
			КартаПоказатьРегион();
		ИначеЕсли Событие = "КартаОбновитьТекущийМакет" Тогда
			КартаОбновитьТекущийМакет();
		ИначеЕсли Событие = "КартаДобавитьТреки" Тогда
			КартаДобавитьТреки();
		ИначеЕсли Лев(Событие, 1) = "!" Тогда // событие - строка кода для выполнения
			Выполнить(Сред(Событие, 2) + ";");
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Таймер_Выключить(Ложь);
	
КонецПроцедуры

// Процедура выключает таймер обработки очереди событий для поля браузера, 
// или удаляет из очереди первое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
&НаКлиенте
Процедура Таймер_Выключить(Знач ВыключитьДляВсехСобытий)
	Если Не ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Очередь.Удалить(0);
		Если ТаймерОжидания.Очередь.Количество() = 0 Тогда
			ВыключитьДляВсехСобытий = Истина;
	    КонецЕсли;
	КонецЕсли;
	Если ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Включен = Ложь;
		ОтключитьОбработчикОжидания("Таймер_Обработчик");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	а= 0;
	//Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	а= 0;
	//Вставить содержимое обработчика
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Таймер
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти
