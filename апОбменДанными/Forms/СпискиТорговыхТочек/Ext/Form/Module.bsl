
#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("НастройкиАгентовРедактируются,ID,ДляВыбора", Ложь);	
	
	СтррКонтекст.Вставить("СпрТоргТочки");// KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		Элементы.СпискиТТ.РежимВыбора = Истина;
		Элементы.СпискиТТ.МножественныйВыбор = Истина;
		Элементы.СпискиТТ.ТолькоПросмотр = Истина;
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ПрочестьОбъектИзХранилища();
	
	КомандаФормы = Команды.Найти("ПоказатьКонтрагентов");
	КомандаФормы.Заголовок = СтррКонтекст.СпрТоргТочки.Синоним;
	КомандаФормы.Подсказка = СтрШаблон_(НСтр("ru = 'Показать ""%1""'; uk = 'Показати ""%1""'"),СтррКонтекст.СпрТоргТочки.Синоним);

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		мСтроки = Объект.СпискиТорговыхТочек.НайтиСтроки(Новый Структура("ID", СтррКонтекст.ID));
		Если мСтроки.Количество() <> 0 Тогда
			Элементы.СпискиТТ.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АПСписокТорговыхТочекЗаписан" Тогда // записан новый элемент списка ТТ или обновлен существующий элемент
		
		ПрочестьОбъектИзХранилища();
		ЭлементСпискаВыделить(Параметр);
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиТаблицыФормыСпискиТТ

&НаКлиенте
Процедура СпискиТТПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ID = ?(Копирование, ЭлементСпискаПолучитьIDТекущего(), Неопределено);
	ЭлементСпискаОткрытьФорму(ID, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиТТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		СпискиТТВыбратьЗначения(ВыбраннаяСтрока);
	ИначеЕсли Элемент.ТекущиеДанные <> Неопределено Тогда
		ЭлементСпискаОткрытьФорму(ЭлементСпискаПолучитьIDТекущего());
	КонецЕсли;
	
КонецПроцедуры

// Событие вызывается при нажатию на кнопку "Выбор", когда форма открыта в режиме выбора.
&НаКлиенте
Процедура СпискиТТВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СпискиТТВыбратьЗначения(Значение);

КонецПроцедуры

// Выбор значения и закрытие формы - когда форма открыта в режиме подбора.
&НаКлиенте
Процедура СпискиТТВыбратьЗначения(мСтроки)
	
	Элемент = Элементы.СпискиТТ;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	СтррРезультат = Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование);
	
	// учитываем, что может быть выбрано несколько значений
	Если ТипЗнч(мСтроки) = Тип("Массив") Тогда
		мЗначения = Новый Массив;
		ТЗ = Объект.СпискиТорговыхТочек;	
		Для Каждого ИдСтроки Из мСтроки Цикл
			СтрокаТ = ТЗ.НайтиПоИдентификатору(ИдСтроки);
			мЗначения.Добавить(Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование));
		КонецЦикла;
		СтррРезультат.Вставить("мВыбранныеЗначения", мЗначения);
	КонецЕсли; 
	
	ЭтаФорма.Закрыть(СтррРезультат);

КонецПроцедуры

&НаКлиенте
Процедура СпискиТТПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	// проверяем - редактируются ли сейчас настройки агентов?
	СтррКонтекст.НастройкиАгентовРедактируются = Ложь;
	Оповестить("АППроверкаРедактированияНастроекАгентов", СтррКонтекст);
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		Текст = НСтр("ru='Удалить выбранные списки торговых точек (выбрано: %1) ?';uk='Видалити обрані списки торгових точок (вибрано: %1)?'");
		Текст = СтрШаблон_(Текст, Элемент.ВыделенныеСтроки.Количество());
	Иначе
		Текст = НСтр("ru='Удалить список торговых точек?';uk='Видалити список торгових точок?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СпискиТТПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиТТПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если СтррКонтекст.НастройкиАгентовРедактируются Тогда
			Текст = НСтр("ru='Настройки агентов сейчас редактируются, сохраните настройки агентов и повторите попытку.';uk='Налаштування агентів зараз редагуються, збережіть налаштування агентів і спробуйте ще раз.'");
			ПоказатьПредупреждение(, Текст);
			Возврат;
		КонецЕсли; 

		мСтроки = Элементы.СпискиТТ.ВыделенныеСтроки;
		мУдаляемыеID = Новый Массив;
		
		ТЗ = Объект.СпискиТорговыхТочек;	
		Для Каждого ИдСтроки Из мСтроки Цикл
			СтрокаТ = ТЗ.НайтиПоИдентификатору(ИдСтроки);
			мУдаляемыеID.Добавить(СтрокаТ.ID);
		КонецЦикла;
		
		ОчиститьСообщения();
		ЭлементСпискаУдалить(мУдаляемыеID);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпискиТТПриИзменении(Элемент)
	
	// Внимание!!! На данной форме это событие происходит только при смене порядка строк. Если будет расширено поведение поля СпискаТТ
	// и это событие будет вызываться при других изменениях списка, то нужно сохранять объект в хранилище только после изменения порядка строк.
	СохранитьОбъектВХранилище(); 
	
КонецПроцедуры

// ОбработчикиТаблицыФормыСпискиТТ
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Хранилище

&НаСервере
Процедура ПрочестьОбъектИзХранилища()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	// проверяем - записывались ли вообще списки ТТ? если нет, записываем пустой список - чтобы в хранилище всегда была ТЗ правильной структуры.
	тзСТТ = ТекОбъект.ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
	Если ТипЗнч(тзСТТ) <> Тип("ТаблицаЗначений") Тогда
		ТекОбъект.СохранитьЗначениеНастройки("СпискиТорговыхТочек", Объект.СпискиТорговыхТочек.Выгрузить());
	КонецЕсли; 
	
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы());
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначениеНастройки("СпискиТорговыхТочек", Объект.СпискиТорговыхТочек.Выгрузить());

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиФормы()

	Возврат "СпискиТорговыхТочек";
	
КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЭлементыСписка

&НаКлиенте
Процедура ЭлементСпискаОткрытьФорму(ID = Неопределено, Копирование = Ложь)
	
	Ключ = ?(ID = Неопределено Или Копирование, Новый УникальныйИдентификатор, ID);
	стррПараметры = Новый Структура("ID,Копирование,ВызовИзФормыСписка", ID, Копирование, Истина);
	МодульК().ОткрытьФормуОбработки("СписокТорговыхТочек", стррПараметры, Ключ);
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементСпискаПолучитьIDТекущего()
	
	СтрокаТ = Элементы.СпискиТТ.ТекущиеДанные;
	Возврат ?(СтрокаТ <> Неопределено, СтрокаТ.ID, Неопределено);

КонецФункции
 
&НаКлиенте
Процедура ЭлементСпискаВыделить(ID)
	
	Если ТипЗнч(ID) = Тип("УникальныйИдентификатор") Тогда
		мСтроки = Объект.СпискиТорговыхТочек.НайтиСтроки(Новый Структура("ID", ID));
		Если мСтроки.Количество() <> 0 Тогда
			Элементы.СпискиТТ.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура удаляет списки торговых точек. Если список ТТ удалить нельзя, выводит сообщения.
// 
// Параметры:
//	мУдаляемыеID - Массив - массив идентификаторов ID удаляемых списков торговых точек.
//	
&НаСервере
Процедура ЭлементСпискаУдалить(мУдаляемыеID)
	
	стррПоискСТТ = Новый Структура("ID"); // структура для поиска списка торговых точек по реквизиту "ID"
	тзСТТ = Объект.СпискиТорговыхТочек;
	
	мУдаляемыеСтроки = Новый Массив; // массив удаляемых строк
	текОбъект = РеквизитФормыВЗначение("Объект");
	тзНА = текОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	
	Если ТипЗнч(тзНА) = Тип("ТаблицаЗначений") Тогда // проверяем - используются ли удаляемые списки ТТ в настройках агентов?
		
		стррПоискНА = Новый Структура("СсылкаСписокТТ"); // структура для поиска настроек агентов по реквизиту "СсылкаСписокТТ"
		
		Для каждого ID Из мУдаляемыеID Цикл
			стррПоискСТТ.ID 			= ID;
			стррПоискНА.СсылкаСписокТТ	= ID;			
			мСтрокиСТТ = тзСТТ.НайтиСтроки(стррПоискСТТ); // массив найденных строк списков торговых точек (состоит из одного элемента)
			мСтрокиНА  = тзНА.НайтиСтроки(стррПоискНА);   // массив найденных строк настроек агентов
			Если мСтрокиНА.Количество() = 0 Тогда // можно удалить список торговых точек
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мУдаляемыеСтроки, мСтрокиСТТ);
			ИначеЕсли мСтрокиНА.Количество() = 1 Тогда
				Текст = НСтр("ru='Нельзя удалить элемент ""%1"", т.к. он используется торговым агентом ""%2"".';uk='Не можна видалити елемент ""%1"", тому що він використовується торговим агентом ""%2"".'");
				Текст = СтрШаблон_(Текст, мСтрокиСТТ[0].Наименование, мСтрокиНА[0].Пользователь);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Иначе
				Текст = НСтр("ru='Нельзя удалить элемент ""%1"", т.к. он используется торговыми агентами:';uk='Не можна видалити елемент ""%1"", тому що він використовується торговими агентами:'");
				Текст = СтрШаблон_(Текст, мСтрокиСТТ[0].Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Для Индекс = 0 По мСтрокиНА.ВГраница() Цикл
					Текст = СтрШаблон_(НСтр("ru='    %1. %2';uk='    %1. %2'"), Индекс+1, мСтрокиНА[Индекс].Пользователь);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
	Иначе // настройки агентов отсутствуют, удаляем элементы без проверки использования
		
		Для каждого ID Из мУдаляемыеID Цикл
			стррПоискСТТ.ID = ID;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мУдаляемыеСтроки, тзСТТ.НайтиСтроки(стррПоискСТТ));
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если мУдаляемыеСтроки.Количество() > 0 Тогда
		Для каждого СтрокаТ Из мУдаляемыеСтроки Цикл
			текОбъект.УдалитьОбъектИзХранилища("СпрСТТ", СтрокаТ.ID); // удаляем элемент списка торговых точек из хранилища
			тзСТТ.Удалить(тзСТТ.Индекс(СтрокаТ));
		КонецЦикла; 
		// записываем списки ТЗ списка торговых точек в хранилище
		СохранитьОбъектВХранилище();
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ЭлементыСписка
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти