
#Область Описание

// Описание параметров открытия формы:
// 		График - Структура - структура со свойствами:
// 			"Пn" ... "Пm" - где 0 <= n <= m <= (МаксимумНедель * 7 - 1) - выбранные пункты графика. Не обязательно указывать пустые пункты.
// 				Значения свойств - Структура со свойствами:
// 					Выбран - Булево - выбран пункт графика
// 					Время - ДатаВремя (состав: Время) - время посещения
// 		МаксимумНедель 		- Число - максимально допустимое количество недель в графике.
// 		ПериодПоУмолчанию 	- Число - период графика по умолчанию.
// 		БлокироватьВремя 	- Булево - сделать недоступным на форме флажок "Время посещения".
// 		БлокироватьПериод 	- Булево - сделать недоступным на форме поле "Период графика".
// 		УбратьВсегоНедель	- Булево - в результате в свойстве ПредставлениеГрафика не выводить количество выбранных недель.

#КонецОбласти

#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("График,МаксимумНедель,ПериодПоУмолчанию,БлокироватьВремя,БлокироватьПериод,УбратьВсегоНедель,ИнтерфейсТакси");
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	ЭтаФорма.Заголовок = ?(Параметры.Свойство("Заголовок"), Параметры.Заголовок, НСтр("ru='График';uk='Графік'"));
	
	СтррКонтекст.ИнтерфейсТакси = ТекОбъект.КонфигурацияРазмерностьЭлементовФормыДляТакси() 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	Если СтррКонтекст.МаксимумНедель = Неопределено Тогда
		СтррКонтекст.МаксимумНедель = 4; // максимальное количество недель в графике
	КонецЕсли; 
	
	Если ПериодГрафика = 0 Тогда
		ПериодГрафика = ?(ЗначениеЗаполнено(СтррКонтекст.ПериодПоУмолчанию), СтррКонтекст.ПериодПоУмолчанию, 7);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СисИнфо = Новый СистемнаяИнформация;
	Элементы.УчитыватьВремяПосещения.Доступность = (СтррКонтекст.БлокироватьВремя <> Истина);
	Элементы.ПериодГрафика.Доступность 			 = (СтррКонтекст.БлокироватьПериод <> Истина);
	
	Список = Элементы.ПериодГрафика.СписокВыбора;
	Для Неделя = 1 По СтррКонтекст.МаксимумНедель Цикл
		ПредставлениеНедели = ЧислоЦифрамиПредметИсчисленияПрописью(Неделя, НСтр("ru='неделя, недели, недель';uk='тиждень, тижні, тижнів'"));	
		Список.Добавить(Неделя * 7,	ПредставлениеНедели);
	КонецЦикла;
	
	ГрафикЗаполнитьПункты();
	ГрафикОбновитьЭлементы();
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	СтррПараметры = Новый Структура("ПредставлениеГрафика,График");
	ЗаполнитьЗначенияСвойств(СтррПараметры, СтррКонтекст);
	стррПараметры.ПредставлениеГрафика 	= ГрафикПолучитьПредставление();
	стррПараметры.График 				= ГрафикПолучитьПункты();
	Закрыть(СтррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчистить(Команда)
	
	ЗначениеВремени = "00:00" + Символы.ПС + "00:00";
	
	Для каждого СтрокаТ Из ГрафикПосещений Цикл
		Для День = 1 По 7 Цикл
			СтрДень = Строка(День);
			СтрокаТ["Д"+СтрДень] 	 = Ложь;
			СтрокаТ["Время"+СтрДень] = ЗначениеВремени;
		КонецЦикла; 
	КонецЦикла; 
	
	ГрафикОбновитьЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВсе(Команда)
	
	Для каждого СтрокаТ Из ГрафикПосещений Цикл
		Для День = 1 По 7 Цикл
			СтрокаТ["Д"+Строка(День)] = Истина;
		КонецЦикла; 
	КонецЦикла; 
	
	ГрафикОбновитьЭлементы();

КонецПроцедуры

&НаКлиенте
Процедура УказатьОбщееВремяПосещения(Команда)
	
	Если ВсегоПосещений = 0 Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала выберите дни посещений.';uk='Спочатку виберіть дні відвідувань.'"));
		
	Иначе
		
		СтрИндекс = "00";
		СтрВремя  = ГрафикПолучитьВремяПервогоВыбранногоДня();
		
		ВремяНачала    = ПолучитьДатуИзСтрокиВремени(Лев(СтрВремя, 5));
		ВремяОкончания = ПолучитьДатуИзСтрокиВремени(Прав(СтрВремя, 5));

		СтррПараметры = Новый Структура("Ключ,ВремяНачала,ВремяОкончания", 
			СтрИндекс, ВремяНачала, ВремяОкончания);
		
		Оповещение = Новый ОписаниеОповещения("ВыборВремениЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборВремени", СтррПараметры,, Оповещение);
		
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодПосещенияПриИзменении(Элемент)
	ГрафикОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВремяПосещенияПриИзменении(Элемент)
	ГрафикОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКнопкиГрафика(Команда)
	
	ЭлементКнопка 	= ЭтаФорма.ТекущийЭлемент;
	ЭлементВремя = Элементы.Найти(СтрЗаменить(ЭлементКнопка.Имя, "Кнопка", "ЭлементВремя"));

	СтрИндекс 	= Прав(ЭлементКнопка.Имя, 2);
	СтрокаТ 	= ГрафикПосещений[Число(Лев(СтрИндекс, 1)) - 1];
	Поле 		= "Д" + Прав(СтрИндекс, 1);
	СтрокаТ[Поле] = Не СтрокаТ[Поле];
	
	ГрафикВыборДняКлиент(СтрокаТ[Поле], ЭлементКнопка, ЭлементВремя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКнопкиВремениГрафика(Команда)
	
	ЭлементКнопка 	= ЭтаФорма.ТекущийЭлемент;
	ПриНажатииНаВремяГрафика(ЭлементКнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииНаВремяГрафика(Элемент)
	
	СтрИндекс = Прав(Элемент.Имя, 2);
	СтрокаТ   = ГрафикПосещений[Число(Лев(СтрИндекс, 1)) - 1];
	СтрВремя  = СтрокаТ["Время" + Прав(СтрИндекс, 1)];
	
	ВремяНачала    = ПолучитьДатуИзСтрокиВремени(Лев(СтрВремя, 5));
	ВремяОкончания = ПолучитьДатуИзСтрокиВремени(Прав(СтрВремя, 5));

	СтррПараметры = Новый Структура("Ключ,ВремяНачала,ВремяОкончания", 
		СтрИндекс, ВремяНачала, ВремяОкончания);
	
	Оповещение = Новый ОписаниеОповещения("ВыборВремениЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборВремени", СтррПараметры,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВремениЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
    
	Если ТипЗнч(СтррРезультат) = Тип("Структура") И СтррРезультат.КодВозвратаДиалога = КодВозвратаДиалога.ОК Тогда
		
		СтрВремя = ПолучитьСтрокуВремениИзДаты(СтррРезультат.ВремяНачала) + Символы.ПС
			+ ПолучитьСтрокуВремениИзДаты(СтррРезультат.ВремяОкончания);
		СтрИндекс = СтррРезультат.Ключ;
		
		Если СтрИндекс <> "00" Тогда // указано время для конкретного дня
			
			СтрокаТ   = ГрафикПосещений[Число(Лев(СтрИндекс, 1)) - 1];
			СтрокаТ["Время" + Прав(СтрИндекс,1)] = СтрВремя;
			Если СтррКонтекст.ИнтерфейсТакси Тогда
				Элементы["ЭлементВремя"+СтрИндекс].Заголовок = СтрВремя;
			Иначе
				Элементы["ЭлементВремя"+СтрИндекс].ТекстНевыбраннойКартинки = СтрВремя;
			КонецЕсли; 
			
		Иначе // указано время для всех выбранных дней
			
			Для Каждого СтрокаТ Из ГрафикПосещений Цикл
				Для День = 1 По 7 Цикл
					СтрДень = Строка(День);
					Если СтрокаТ["Д"+СтрДень] Тогда
						СтрокаТ["Время"+СтрДень] = СтрВремя;
					КонецЕсли; 
				КонецЦикла; 		
			КонецЦикла; 
			
			ГрафикОбновитьЭлементы();
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

#Область СлужебныеПроцедурыИФункции_ПреобразованиеЗначений

&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(СтрЧисло)
	
	СтрРезультат = "0";
	
	Для Поз = 1 По СтрДлина(СтрЧисло) Цикл
		Символ = Сред(СтрЧисло, Поз, 1);
		Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			СтрРезультат = СтрРезультат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Число(СтрРезультат);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуИзСтрокиВремени(СтрВремя)
	
	Часы 	= СтрокуВЧисло(Лев(СтрВремя, 2))  % 60;
	Минуты 	= СтрокуВЧисло(Прав(СтрВремя, 2)) % 60;
	
	Возврат Дата(1, 1, 1, Часы, Минуты, 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуВремениИзДаты(Дата)
	
	Возврат Прав("0"+Строка(Час(Дата)), 2) + ":" + Прав("0"+Строка(Минута(Дата)), 2);
	
КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПреобразованиеЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_График

&НаСервере
Процедура ГрафикОбновитьЭлементы()
	
	ГруппаГрафик = Элементы.ГруппаГрафик;
	
	ВсегоНедель = ПериодГрафика / 7;
	
	ЭтаФормаЭлементы = ЭтаФорма.Элементы;	
	
	ЭтаФормаЭлементы.ФормаОбщееВремяПосещения.Видимость = УчитыватьВремяПосещения;
	
	Для Неделя = 1 По СтррКонтекст.МаксимумНедель Цикл
		Элемент = Элементы.Найти("ГруппаНеделя" + Неделя);
		Если Элемент <> Неопределено Тогда
			ЭтаФормаЭлементы.Удалить(Элемент);
		КонецЕсли; 
	КонецЦикла; 		

	ГрафикДобавитьСтроки();
	
	ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС';uk='пн, вт, ср, чт, пт, СБ, НД'");
	МассивДней = СтрРазделить_(ДниНеделиСтр, ",");
	
	ТипКнопка = Тип("КнопкаФормы");
	ТипГруппа = Тип("ГруппаФормы");
	ТипДекор  = Тип("ДекорацияФормы");
	
	ВсегоПосещений = 0;
	
	ЭлементВремя = Неопределено;
	стрПустоеЗначениеВремени = "00:00" + Символы.ПС + "00:00";
	
	ШиринаКолонкиДня = 5;
	
	ИнтерфейсТакси = СтррКонтекст.ИнтерфейсТакси;
	
	Для Неделя = 1 По ВсегоНедель Цикл
		
		СтрокаТ = ГрафикПосещений[Неделя-1];
		
		СтрНеделя = Строка(Неделя);
		
		Группа 		= ЭтаФормаЭлементы.Добавить("ГруппаНеделя" + СтрНеделя, ТипГруппа, ГруппаГрафик);
		Группа.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.ЦветФона = стррКонтекст.Цвета.ФонРаздела;
		Надпись 	= ЭтаФормаЭлементы.Добавить("Надпись" + СтрНеделя, ТипДекор, Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Заголовок = НСтр("ru='Неделя';uk='Тиждень'") + " " + СтрНеделя;
		
		Для День = 1 По 7 Цикл
			
			СтрДень 	= Строка(День);
			СтрИндекс 	= СтрНеделя + СтрДень;
			
			Если УчитыватьВремяПосещения Тогда // для каждого дня недели добавляем вертикальную групп
				ГруппаДень 		= ЭтаФормаЭлементы.Добавить("ГруппаДень" + СтрИндекс, ТипГруппа, Группа);
				ГруппаДень.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаДень.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ГруппаДень.ОтображатьЗаголовок = Ложь;
			Иначе
				ГруппаДень = Группа;
			КонецЕсли; 
			
			ЭлементКнопка 		= ЭтаФормаЭлементы.Добавить("Кнопка" + СтрИндекс, ТипКнопка, ГруппаДень);
			ЭлементКнопка.Вид 	= ВидКнопкиФормы.ОбычнаяКнопка;
			Если ИнтерфейсТакси Тогда
				ЭлементКнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;			
			КонецЕсли; 

			ЭлементКнопка.ИмяКоманды = "НажатиеКнопкиГрафика";
			ЭлементКнопка.Заголовок = МассивДней[День-1];
			ЭлементКнопка.Ширина = ШиринаКолонкиДня;
			
			Если День > 5 Тогда
				ЭлементКнопка.ЦветТекста = стррКонтекст.Цвета.ТекстВнимание;    
			КонецЕсли; 
			
			Если УчитыватьВремяПосещения Тогда
				
				стрВремя = СтрокаТ["Время"+СтрДень];
				Если ПустаяСтрока(стрВремя) Тогда
					стрВремя = стрПустоеЗначениеВремени;
				КонецЕсли; 
				
				ЭлементВремя 	  = ЭтаФормаЭлементы.Добавить("ЭлементВремя" + СтрИндекс, ТипДекор, ГруппаДень);				
				
				Если ИнтерфейсТакси Тогда
					ЭлементВремя.Вид  = ВидДекорацииФормы.Надпись;
					ЭлементВремя.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					ЭлементВремя.УстановитьДействие("Нажатие", "ПриНажатииНаВремяГрафика");
					ЭлементВремя.Заголовок = стрВремя;
				Иначе
					ЭлементВремя.Вид 	= ВидДекорацииФормы.Картинка;
					ЭлементВремя.УстановитьДействие("Нажатие", "ПриНажатииНаВремяГрафика");
					ЭлементВремя.ТекстНевыбраннойКартинки = стрВремя;
				КонецЕсли; 
				
				ЭлементВремя.Ширина = ШиринаКолонкиДня;				
				ЭлементВремя.Высота = 2;
					
			КонецЕсли; 
			
			ГрафикВыборДняСервер(СтрокаТ["Д"+СтрДень], ЭлементКнопка, ЭлементВремя);
			
		КонецЦикла; 
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ГрафикДобавитьСтроки()
	
	ВсегоНедель = ПериодГрафика / 7;
	
	Если ГрафикПосещений.Количество() >= ВсегоНедель Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначениеВремени = "00:00" + Символы.ПС + "00:00";	
	ДобавитьСтрок = ВсегоНедель - ГрафикПосещений.Количество();
	
	Для Номер = 1 По ДобавитьСтрок Цикл
		СтрокаТ = ГрафикПосещений.Добавить();
		Для День = 1 По 7 Цикл
		    СтрокаТ["Время"+Строка(День)] = ЗначениеВремени;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

// Интерактивный выбор дня графика
&НаКлиенте
Процедура ГрафикВыборДняКлиент(ДеньВыбран, ЭлементКнопка, ЭлементВремя)
	
	ЭлементКнопка.ЦветФона = ?(ДеньВыбран, СтррКонтекст.Цвета.ФонЗеленый, СтррКонтекст.Цвета.Авто);
	Если ЭлементВремя <> Неопределено Тогда
		ЭлементВремя.Гиперссылка = ДеньВыбран;
		ЭлементВремя.ЦветТекста  = ?(ДеньВыбран,  СтррКонтекст.Цвета.ТекстОбычный, СтррКонтекст.Цвета.Белый);		
	КонецЕсли;

	ВсегоПосещений = ВсегоПосещений + ?(ДеньВыбран, 1, -1);
	
КонецПроцедуры

&НаСервере
Процедура ГрафикВыборДняСервер(ДеньВыбран, ЭлементКнопка, ЭлементВремя)
	
	Цвета = СтррКонтекст.Цвета;
	ЭлементКнопка.ЦветФона = ?(ДеньВыбран, Цвета.ФонЗеленый, Цвета.Авто);
	Если ЭлементВремя <> Неопределено Тогда
		ЭлементВремя.Гиперссылка = ДеньВыбран;
		ЭлементВремя.ЦветТекста  = ?(ДеньВыбран,  Цвета.ТекстОбычный, Цвета.Белый);		
	КонецЕсли;
	
	Если ДеньВыбран Тогда
		ВсегоПосещений = ВсегоПосещений + 1;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ГрафикПолучитьВремяПервогоВыбранногоДня()
	
	Результат = Неопределено;
	
	Для каждого СтрокаТ Из ГрафикПосещений Цикл
		Для День = 1 По 7 Цикл
			Если СтрокаТ["Д"+Строка(День)] Тогда
				Результат = СтрокаТ["Время"+Строка(День)];
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ГрафикПолучитьПредставление()
	
	Если ВсегоПосещений = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	мДниНедели = СтрРазделить_(НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС';uk='пн, вт, ср, чт, пт, СБ, НД'"), ",");
	
	ВсегоНедель = Цел(ПериодГрафика / 7) + ?(ПериодГрафика % 7 <> 0, 1, 0);
	ПредыдущееПредставлениеНедели = Неопределено;
	ВыбраноНедель = 0;
	ВсеНеделиОдинаковы = Истина;
	ТекНеделя = -1;
	
	СтрРезультат = "";
	
	Для каждого СтрокаТ Из ГрафикПосещений Цикл
		ТекНеделя = ТекНеделя + 1; // недели нумеруются с 0
		СтрРабочиеДни = ""; РабочихДней = 0;
		СтрВыходные   = "";	Выходных 	= 0; 
		Для День = 1 По 7 Цикл
			Если СтрокаТ["Д"+Строка(День)] Тогда
				Если День < 6 Тогда
					СтрРабочиеДни = СтрРабочиеДни + мДниНедели[День-1] + ", ";
					РабочихДней   = РабочихДней + 1;
				Иначе
					СтрВыходные = СтрВыходные + мДниНедели[День-1] + ", ";
					Выходных 	= Выходных + 1;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если РабочихДней = 5 Тогда
			ПредставлениеНедели = ?(Выходных = 2, НСтр("ru='все дни';uk='всі дні'"),	НСтр("ru='по будням';uk='по буднях'") + ?(Выходных = 0, "", ", " + СтрВыходные));
		Иначе
			ПредставлениеНедели = СтрРабочиеДни + СтрВыходные;
		КонецЕсли;
		Если Прав(ПредставлениеНедели, 2) = ", " Тогда
			ПредставлениеНедели = Лев(ПредставлениеНедели, СтрДлина(ПредставлениеНедели)-2);
		КонецЕсли;
		Если ВсеНеделиОдинаковы И ТекНеделя > 0 Тогда
			ВсеНеделиОдинаковы = (ПредыдущееПредставлениеНедели = ПредставлениеНедели);
		КонецЕсли; 
		Если ПредставлениеНедели <> "" Тогда
			СтрРезультат = СтрРезультат + ?(СтрРезультат = "", "", "; ") + Строка(ТекНеделя+1) + ": " + ПредставлениеНедели;		
		КонецЕсли; 
		ПредыдущееПредставлениеНедели = ПредставлениеНедели;
		ВыбраноНедель = ВыбраноНедель + 1; 
	КонецЦикла;
	
	Если ВсеНеделиОдинаковы И ВыбраноНедель = ВсегоНедель Тогда
		СтрРезультат = ПредставлениеНедели;
	КонецЕсли; 
	
	Если СтрРезультат <> "" Тогда
		Концовка = ""; 
		Если СтррКонтекст.УбратьВсегоНедель <> Истина И ВсегоНедель > 1 Тогда
		    Концовка = Концовка + Строка(ВсегоНедель) + " " + НСтр("ru='нед.';uk='тижнів.'");
		КонецЕсли; 
		Если УчитыватьВремяПосещения Тогда
			Концовка = Концовка + ?(Концовка = "", "", ", ") + НСтр("ru='время';uk='час'");
		КонецЕсли; 
		Если Концовка <> "" Тогда
			СтрРезультат = СтрРезультат + ?(ВсеНеделиОдинаковы, "", ".") + " (" + Концовка + ")";	
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтрРезультат;

КонецФункции

&НаКлиенте
Функция ГрафикПолучитьПункты()
	
	стррРезультат = Новый Структура("ПериодГрафика,УчитыватьВремяПосещения,Пункты", ПериодГрафика, УчитыватьВремяПосещения);
	стррПункты = Новый Структура;
	
	Неделя = 0;
	Для каждого СтрокаТ Из ГрафикПосещений Цикл
		Неделя = Неделя + 1;
		Для День = 1 По 7 Цикл
			СтрДень = Строка(День);
			Если СтрокаТ["Д"+СтрДень] Тогда
				Значение = Новый Структура("Выбран", Истина);
				Если УчитыватьВремяПосещения Тогда
					Значение.Вставить("Время", СтрокаТ["Время"+СтрДень]);
				КонецЕсли; 
				стррПункты.Вставить("П" + Строка((Неделя-1)*7 + День - 1), Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	стррРезультат.Пункты = стррПункты;
	
	Возврат стррРезультат;

КонецФункции

&НаКлиенте
Процедура ГрафикЗаполнитьПункты()
	
	стррГрафик 		= СтррКонтекст.График;
	Если ТипЗнч(стррГрафик) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли Не стррГрафик.Свойство("ПериодГрафика") Или Не стррГрафик.Свойство("УчитыватьВремяПосещения") Тогда
		Возврат;
	КонецЕсли; 
	ПериодГрафика 	= стррГрафик.ПериодГрафика;
	УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;
	стррПункты 		= стррГрафик.Пункты;
	
	// добаляем в график пустые строки (недели)
	ВсегоНедель = ПериодГрафика / 7;
	Для Неделя = 1 По ВсегоНедель Цикл
		ГрафикПосещений.Добавить();	
	КонецЦикла; 
	
	// заполняем строки (недели) значениями
	Для каждого Пункт Из стррПункты Цикл
		Если Лев(Пункт.Ключ, 1) <> "П" Тогда
			Продолжить;
		КонецЕсли; 
		НомерПункта = Число(Сред(Пункт.Ключ, 2));
		Неделя = Цел(НомерПункта / 7) + 1;
		Если Неделя > ВсегоНедель Тогда
			Продолжить;
		КонецЕсли; 
		СтрДень = Строка(НомерПункта % 7 + 1);
		СтрокаТ = ГрафикПосещений[Неделя-1];
		стррЗначение = Пункт.Значение;
		СтрокаТ["Д"+СтрДень] = стррЗначение.Выбран;
		Если УчитыватьВремяПосещения Тогда
			СтрокаТ["Время"+СтрДень] = стррЗначение.Время;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_График
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти