#Область Описание 

/////////////////////////////////////////////////////////////////////////////
// Описание модуля объекта (обработки).
//                                            
// *** Префиксы в именах процедур и функций.
//	* ВО...   - виртуальные объекты (виртуальные справочники и документы). Виртуальные объекты - это имитация существования в конфигурации
//				справочников и документов, на самом деле отсутствующих в конфигурации. 
//				Примеры виртуальных объектов:
//				- Справочники: "_РезультатыПосещений", "_ШаблоныАнкеты";
//				- Документы: "_Мерчендайзинг", "_Посещение".
//	* МенеджерВТ... - создание временных таблиц запроса для выгрузки данных в МУ. Используется для отборов выгрузки данных в соответствии
//				с настройками торгового агента.
//	* СД...   - служебные данные - сохранение, чтение. Опционально служеюгые данные могут сохраняться в файлах или хранилище данных.
//				В служебных данных хранятся объекты в виде структур, например, треки передвижений агентов (это структура с одним из
//				свойств типа ТаблицаЗначений).
//	* СТЗ...  - служебные таблицы значений. Чтение из хранилища, изменение, сохранение. Служебные таблицы используются для 
//				сопоставления элементов справочников между УТ и МТ. В таблицах должны быть обязательные колонки "Идентификатор" (для МТ)
//				и "Ссылка" (ссылка на элемент сопоставляемого справочника в УТ). Применяется, когда требуется сопосавить один общий элемент
//				справочника в УТ с несколькими элементами справочника в МТ. Например, общую характеристику для вида номенклатуры.
//	* Структура...  - дополнительные процедуры и функции для работы с объектом типа "Структура".
// 
/////////////////////////////////////////////////////////////////////////////    

// Описание  
#КонецОбласти     

#Область ГлобальныеПеременные

	Перем гКонфигурация;
	Перем гБазоваяКонфигурация;                         // не используется, удалить.
	Перем гКонфигурацияВерсия;							// vd_181001 Добавлена. Версия конфигурации.
	Перем гНастройкиОбменаЗагружены;					// признак, что все настройки обмена загружены из хранилища (используется для загрузки и выгрузки данных в МУ / из МУ)
	Перем гТаблицыВидовОбъектов;						// структура с таблицами значений идентификаторов видов справочников и документов в МТ и соответствия им в УТ
	Перем гТаблицыПеречислений;							// структура с таблицами значений перечислений соответствий 
	Перем гСлужебныеДанныеВФайлах; 						// признак сохранения служебных данных модуля в файлах (если значение Истина) или в Хранилище (если Ложь)
	Перем гКэшЧтенияКонстант; 							// кэш для ускорения чтения констант из БД
	Перем гКэшСравненияКонфигураций;
	Перем гКэшРеквизитыОбъектов;
	Перем гКэшСпискиОбъектов;							// кэш списков объектов (для выгрузки и отборов, например, массив организаций)
	Перем гЭтоLinuxСервер; 								// для ускорения работы функции ЭтоLinuxСервер
	Перем гДанныеОДополнительныхСвойствахДокументаДляМУ;// для ускорения записи дополнительных свойств документов при загрузке документов из МУ
	Перем гВДокРеквизиты; 								// Соответствие - элементами соответствия являются массивы реквизитов виртуальных документов
	Перем гВДокКэшТЗЖурналов; 			
	Перем гВСпрКэшТЗСправочника;
	Перем гВОКэшСвойств; 								// кэш системных свойств виртуальных объектов (виртуальных справочников и документов)
	Перем гКэшСлужебныхТаблиц; 							// структура для служебных таблиц, используется при выгрузке служебных справочных данных в МУ
	Перем гмСкладыВыгрузки; 							// массив складов выгрузки для текущего торгового агента   ьлдоло
	
// ГлобальныеПеременные                                               
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ПрограммныйИнтерфейс

// Процедура используется для инициализации реквизита формы СтррКонтекст (вызывается в обработчике события ПриСозданииНаСервере() в модулях форм.
Процедура КонтекстФормыИнициализировать(СтррКонтекст, ПараметрыФормы, СтрОбязательныеСвойства = Неопределено) Экспорт
	
	Если СтррКонтекст = Неопределено Тогда
		СтррКонтекст = Новый Структура;
	КонецЕсли;
	
	стрНетСвойств = СтруктураОтсутствуютОбязательныеСвойства(ПараметрыФормы, стрОбязательныеСвойства);
	Если ЗначениеЗаполнено(стрНетСвойств) Тогда
		Если Найти(стрНетСвойств, ",") = 0 Тогда // отсуствует одно обязательное свойство в ПараметрыФормы
			Текст = СтрШаблон_(НСтр("ru = 'Отсутствует обязательное свойство ""Параметры.%1"" для открытия формы!'; uk = 'Відсутня обов''язкове властивість ""Параметры.%1"" для відкриття форми!'"), стрНетСвойств);
		Иначе // отсуствует несколько обязательных свойств в ПараметрыФормы
			Текст = СтрШаблон_(НСтр("ru = 'Отсутствуют обязательные свойства у объекта ""Параметры"" для открытия формы! Ожидаются свойства: %1.'; uk = 'Відсутні обов''язкові властивості у об''єкта ""Параметры"" для відкриття форми! Очікуються властивості: %1.'"), стрНетСвойств);
		КонецЕсли; 
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	СтррКонтекст.Вставить("ПутьКФорме", Метаданные().ПолноеИмя() + ".Форма.");
	СтррКонтекст.Вставить("Версия", 	ВерсияОбработки());
	СтррКонтекст.Вставить("Цвета", 		ВернутьЦветаОФормления());
	СтррКонтекст.Вставить("ВХОбщиеПараметры", Неопределено);
	
	//УНФ
	//Если СтррКонтекст.Свойство("РежимСовместимости") Тогда
	//	СтррКонтекст.РежимСовместимости = Метаданные.РежимСовместимости;
	//КонецЕсли;
	
	Если СтррКонтекст.Свойство("Конфигурация") Тогда
	    стррВерсия = ВерсияКонфигурации();
		СтррКонтекст.Конфигурация = стррВерсия.Конфигурация;
	КонецЕсли;
	//--УНФ
	
	ЗаполнитьЗначенияСвойств(СтррКонтекст, ПараметрыФормы);	
	
	//++ унф 20180116
	Если СтррКонтекст.Свойство("СпрТоргТочки") Тогда
		
		//унф все переделано
						
		стррТТ = Новый Структура("ВидСправочника, Синоним, Представление, тзИмяКолонки, тзИмяЭлемента, Адрес");
		
		стррТТ.ВидСправочника = "Контрагенты";
		стррТТ.Синоним 		  = "Контрагенты";
		стррТТ.Представление  = "Контрагент (Клиент)";
		стррТТ.тзИмяКолонки	  = "Контрагент";
		стррТТ.тзИмяЭлемента  = "СоставКонтрагент";
		
		//++ УНФ В унф как и в УТ есть ФактАдресКонтрагента, но в УНФ данный вид для отображения на форме включается опционально в регистре НастройкиВидовКонтактнойИнформации
		Отбор = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ВыборкаИзНастройкиВидовКонтактнойИнформации = РегистрыСведений.НастройкиВидовКонтактнойИнформации.Получить(Отбор);
		
		Если ВыборкаИзНастройкиВидовКонтактнойИнформации.Свойство("ВыводитьВФормеВсегда") Тогда
			Если ВыборкаИзНастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда = Истина Тогда
				стррТТ.Адрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Иначе
				стррТТ.Адрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			КонецЕсли;
		Конецесли;
		//-- УНФ
				
		СтррКонтекст.СпрТоргТочки = стррТТ;	
		
	КонецЕсли;
	//-- унф 20180116
	
КонецПроцедуры

Функция КонфигурацияРазмерностьЭлементовФормыДляТакси() Экспорт
	
	Возврат КонфигурацияРежимСовместимости(">=8.3.7");
	
КонецФункции

Функция КонфигурацияРежимСовместимости(строкаСравненияВерсии) Экспорт
	
	ТекущийРежим = Метаданные.РежимСовместимости;

	Если ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		СисИнфо = Новый СистемнаяИнформация;
		стрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	Иначе
		стрВерсияПлатформы = ПолучитьВерисиюИзСтроки(СтрЗаменить(Строка(ТекущийРежим), "_", "."));
	КонецЕсли; 
	
	строкаСравнения = СтрЗаменить(строкаСравненияВерсии, " ", "");
	Длина = стрДлина(строкаСравнения);
	ЗнакСравнения = "";
	Для Индекс = 1 По 2 Цикл
		Символ = Сред(строкаСравнения, Индекс, 1);
		Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда
			ЗнакСравнения = ЗнакСравнения + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗнакСравнения = "" Тогда
		ЗнакСравнения = "=";
	Иначе
		стрОперации = ",<,=,>,<>,<=,>=,";
		Если Найти(стрОперации, "," + ЗнакСравнения + ",") = 0 Тогда
			Текст = НСтр("ru='Функция КонфигурацияСравнитьРежимСовместимости(): неверное значение параметра ""строкаСравненияВерсии"" = ""%1""!"
				"Значение должно начинаться с операции сравнения (<, =, >, <>, <= или >=)!';uk='Функція КонфигурацияСравнитьРежимСовместимости(): невірне значення параметра ""строкаСравненияВерсии"" = ""%1""!"
				"Значення має починатися з операції порівняння (<, =,>, <>, <= або> =)!'");
			ВызватьИсключение(СтрШаблон_(Текст, строкаСравненияВерсии));
		КонецЕсли;
	КонецЕсли;
	
	Сравнение = СравнитьВерсии(стрВерсияПлатформы, Сред(строкаСравнения, СтрДлина(ЗнакСравнения)+1));
	
	Если ЗнакСравнения = ">=" Тогда
		Значение = (Сравнение >= 0);
	ИначеЕсли ЗнакСравнения = "<=" Тогда
		Значение = (Сравнение <= 0);
	ИначеЕсли ЗнакСравнения = "<" Тогда
		Значение = (Сравнение < 0);
	ИначеЕсли ЗнакСравнения = ">" Тогда
		Значение = (Сравнение > 0);
	ИначеЕсли ЗнакСравнения = "=" Тогда
		Значение = (Сравнение = 0);
	ИначеЕсли ЗнакСравнения = "<>" Тогда
		Значение = (Сравнение <> 0);
	Иначе
		ВызватьИсключение(НСтр("ru='Функция КонфигурацияСравнитьРежимСовместимости() - неизвестный оператор сравнения: ';uk='Функція КонфигурацияСравнитьРежимСовместимости() - невідомий оператор порівняння:'") + ЗнакСравнения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьВерисиюИзСтроки(Знач стрРежим) 
	
	стрВерсия = "";
	стрРежим = СтрЗаменить(стрРежим, "_", ".");
	Длина = СтрДлина(стрРежим);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(стрРежим, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код = 46 Или (Код >= 48 И Код <= 57) Тогда
		    стрВерсия = стрВерсия + Символ;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат стрВерсия;
	
КонецФункции

//vd_180508 В УНФ нет РасширенноеПредставлениеОбъекта
// Процедура  заполняет значения структуры в соответствии со свойствами структуры. В качестве свойств структуры
// указываются виды объектов метаданных, например, "ЗаказКлиента".
Процедура ПолучитьПредставленияВидовОбъектов(стррВидыДокументов, ВидМетаданных = "Документы") Экспорт
	
	стрПредставление = "";
	оМетоданные = "";
	Для Каждого Элемент Из СтррВидыДокументов Цикл
		оМетоданные = Метаданные[ВидМетаданных][Элемент.Ключ];
		стрПредставление = оМетоданные.РасширенноеПредставлениеОбъекта;
		Если ПустаяСтрока(стрПредставление) Тогда
			стрПредставление = оМетоданные.ПредставлениеОбъекта;
			Если ПустаяСтрока(стрПредставление) Тогда
				стрПредставление = оМетоданные.Синоним;	
				Если ПустаяСтрока(стрПредставление) Тогда
					стрПредставление = оМетоданные.Имя;		
				КонецЕсли;					
			КонецЕсли
		КонецЕсли;
		//стррВидыДокументов[Элемент.Ключ] = Метаданные[ВидМетаданных][Элемент.Ключ].РасширенноеПредставлениеОбъекта;
		стррВидыДокументов[Элемент.Ключ] = стрПредставление;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСтрокуНомерКопии(ИсхСтрока) Экспорт
	
	ИсхСтрока = СокрП(ИсхСтрока);
	ИндексН = СтрДлина(ИсхСтрока) + 1; // индекс начала
	Символ = Неопределено;
	Пока ИндексН > 0 И Символ <> "(" Цикл
		ИндексН = ИндексН - 1;		
		Символ = Сред(ИсхСтрока, ИндексН, 1);
	КонецЦикла; 
	
	СтрКопия = НСтр("ru='копия';uk='копія'");
	
	Если Символ = "(" И Сред(ИсхСтрока, ИндексН + 1, СтрДлина(СтрКопия)) = СтрКопия Тогда // есть в названии слово "(копия"
		СтрНомерКопии = "";
		ИндексК = СтрДлина(ИсхСтрока); // индекс конца
		Для Индекс = ИндексН По ИндексК Цикл
			Символ = Сред(ИсхСтрока, Индекс, 1);
			Код = КодСимвола(Символ);			
			Если Код = 41 Тогда // ")"
				Прервать;
			ИначеЕсли Код > 47 И Код < 58 Тогда
				СтрНомерКопии = СтрНомерКопии + Символ;
			КонецЕсли; 
		КонецЦикла;
		НомерКопии = ?(СтрНомерКопии <> "", Число(СтрНомерКопии), 1) + 1;
		ИсхСтрока = Лев(ИсхСтрока, ИндексН) + СтрКопия + " " + Строка(НомерКопии) + ")";
	Иначе
		ИсхСтрока = ИсхСтрока + " (" + СтрКопия + ")";
	КонецЕсли; 
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс_ОпределениеКонфигурации
// Аналогичные функции объявлены в клиентском модуле МодульОбщий (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурации).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// 	Параметры:
// 		СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// 		
Функция ПоколениеКонфигурации(СтрКонфигурация) 
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда
		гКэшСравненияКонфигураций = Новый Соответствие;
	КонецЕсли; 
	
	Значение = гКэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		Индекс1 = Найти(гБазоваяКонфигурация, "_");
		Индекс2 = Найти(СтрКонфигурация, "_");
		
		Если Индекс2 = 0 Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Функция ПоколениеКонфигурации(): указан параметр без префикса ""_""! Параметр = ""%1"".'; uk = 'Функція ПоколениеКонфигурации(): зазначений параметр без префікса ""_""! Параметр = ""%1"".'"),
						СтрКонфигурация);
			ВызватьИсключение(Текст);
		КонецЕсли; 
		
		Префикс1 = Лев(гБазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = "";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки "<=>"
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = "" Тогда
			ЗнакСравнения = "=";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			Значение = Ложь;
		Иначе
			Сравнение = СравнитьВерсии(Сред(гБазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			Если ЗнакСравнения = ">=" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = "<=" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = "=" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: %1'; uk = 'Функція ПоколениеКонфигурации() - невідомий оператор порівняння: %1'"),ЗнакСравнения));
			КонецЕсли;
		КонецЕсли;
		
		гКэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//vd_181001 доработана до УкраинскойУНФ и добавлено оприделение КонфигурацияВерсия
Функция ВерсияКонфигурации() Экспорт
	
	стррРезультат = Новый Структура("Конфигурация, БазоваяКонфигурация, КонфигурацияВерсия");
	
	Имя    = Метаданные.Имя;
	Версия = Метаданные.Версия;
	
	Если Имя = "УправлениеНебольшойФирмойДляУкраины" Тогда
		стррРезультат.Конфигурация  = "УНФ_UA";	
	Иначе
		стррРезультат.Конфигурация  = "УНФ";
	КонецЕсли;
	
	стррРезультат.БазоваяКонфигурация = "УНФ_" + Версия; //Не используется, удалить в дальнейшем
	стррРезультат.КонфигурацияВерсия  = Версия;

	
	Возврат стррРезультат;
	
КонецФункции

Процедура ОпределитьВерсиюКонфигурации()
	
	Если гБазоваяКонфигурация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррВерсияКонфигурации = ВерсияКонфигурации();
	
	гБазоваяКонфигурация = стррВерсияКонфигурации.БазоваяКонфигурация;
	гКонфигурация  		 = стррВерсияКонфигурации.Конфигурация;
	гКонфигурацияВерсия	 = стррВерсияКонфигурации.КонфигурацияВерсия;
	
КонецПроцедуры

Функция ОприделитьВерсиюУНФ() Экспорт
	
	стррВерсии = Новый Структура;
	стррВерсии.Вставить("Платформа");
	стррВерсии.Вставить("Конфигурация", СокрЛП(Метаданные.Версия));
	стррВерсии.Вставить("КонфигурацияВерсия", 0 );
	стррВерсии.Вставить("КонфигурацияПодВерсия", 0 );
	стррВерсии.Вставить("КонфигурацияПодВерсияПараметр1", 0 );
	стррВерсии.Вставить("КонфигурацияПодВерсияПараметр2", 0 );
	
	Конф = СтрЗаменить(стррВерсии.Конфигурация, ".", Символы.ПС);
	
	ЧислоСтрок = СтрЧислоСтрок(Конф);	 
	Для Индекс = 1 По ЧислоСтрок Цикл
		
		стрСтрока = СтрПолучитьСтроку(Конф, Индекс);
		
		Если Индекс = 1 Тогда
			стррВерсии.КонфигурацияВерсия = стрСтрока;
		ИначеЕсли Индекс = 2 Тогда
			стррВерсии.КонфигурацияВерсия = стррВерсии.КонфигурацияВерсия + "." + стрСтрока;
		ИначеЕсли Индекс = 3 Тогда	
			стррВерсии.КонфигурацияПодВерсия          = стрСтрока;
			стррВерсии.КонфигурацияПодВерсияПараметр1 = стрСтрока;
		ИначеЕсли Индекс = 4 Тогда
			стррВерсии.КонфигурацияПодВерсия          = стррВерсии.КонфигурацияПодВерсия + "." + стрСтрока;
			стррВерсии.КонфигурацияПодВерсияПараметр2 = стрСтрока;
		КонецЕСли;			

	КонецЦикла;
	
	СистемнаяИнформация  = Новый СистемнаяИнформация;
	ВерсияПлатформы      = СистемнаяИнформация.ВерсияПриложения;
	стррВерсии.Платформа = ВерсияПлатформы;
	
	Возврат стррВерсии;
	
КонецФункции

// ПрограммныйИнтерфейс_ОпределениеКонфигурации
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки

Функция ПользовательНастроек()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции // ПользовательНастроек()

Функция КлючНастроекОбмена()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции // ПользовательНастроек()

// В качестве параметра передается структура, где Ключ - имя настройки, Значение - значение настройки
Процедура СохранитьЗначенияНастроекИзСтруктуры(СтррНастройки) Экспорт

	Для Каждого Элемент Из СтррНастройки Цикл
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), Элемент.Ключ, Элемент.Значение, , ПользовательНастроек());
	КонецЦикла;

КонецПроцедуры

// В качестве параметра передается строка с именами настроек через запятую.
Функция СохранитьЗначенияНастроекОбработки(ИменаНастроек, СохранитьВВХ = Ложь) Экспорт

	Результат = Истина;
	
	МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	
	Если Не СохранитьВВХ Тогда // запись в хранилище
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, ЭтотОбъект[ИмяНастройки], , ПользовательНастроек());
		КонецЦикла;
		
	Иначе // запись в XML-файл с последующей записью во временное хранилище
		
		СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,АдресВХ", Ложь, Новый Массив);
		
		ИмяФайла = КаталогВременныхФайлов() + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".xml";
		
		ДокXML = Новый ЗаписьXML();
		
		Попытка
			ДокXML.ОткрытьФайл(ИмяФайла);
			ДокXML.ЗаписатьОбъявлениеXML();	
			ДокXML.ЗаписатьНачалоЭлемента("Settings");

			ДокXML.ЗаписатьАтрибут("Generator", 		"Module1C");
			
			ДокXML.ЗаписатьАтрибут("ModuleVersion", 	ВерсияОбработки());
			ДокXML.ЗаписатьАтрибут("ModuleName", 		"APMTBase");
			
			ДокXML.ЗаписатьАтрибут("ProductName", 		Метаданные.Имя);
			ДокXML.ЗаписатьАтрибут("ProductVer", 	 	Метаданные.Версия); 
			ДокXML.ЗаписатьАтрибут("Compatibility", 	Строка(Метаданные.РежимСовместимости));
			ДокXML.ЗаписатьАтрибут("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
			//ДокXML.ЗаписатьАтрибут("PlatformVersion",	СистемнаяИнформация.ВерсияПриложения);
			//ДокXML.ЗаписатьАтрибут("OSVersion",		СистемнаяИнформация.ВерсияОС);
			//ДокXML.ЗаписатьАтрибут("OSType",			СистемнаяИнформация.ТипПлатформы);
			
		Исключение
			Текст = СтрШаблон_(НСтр("ru='Ошибка создания файла настроек ""%1"". Причина: %2';uk='Помилка створення файлу налаштувань ""%1"". Причина: %2'"), ИмяФайла, ОписаниеОшибки());
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Возврат СтррРезультат;
		КонецПопытки;
		
		ДокXML.ЗаписатьНачалоЭлемента("Root");
		ДокXML.ЗаписатьНачалоЭлемента("Attributes");
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Item");
			ДобавитьПоле(ДокXML, "Name",  ИмяНастройки);
			ДобавитьПоле(ДокXML, "Value", ЗначениеВСтрокуДляXML(ЭтотОбъект[ИмяНастройки]));
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента(); // "Attributes"
		ДокXML.ЗаписатьКонецЭлемента(); // "Root"
		ДокXML.ЗаписатьКонецЭлемента(); // "Settings"
		
		ДокXML.Закрыть();
		
		СтррРезультат.АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
		
		Результат = СтррРезультат;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура загружает реквизиты обработки значениями из хранилища системных настроек.
// 
// Параметры:
//	ИменаНастроек - Строка - строка с именами настроек через запятую.
//	ПеренестиТаблицыВоВременныеТаблицы - Булево - если Истина, то загружать таблицы значений в структуру ВременныеТаблицы (реквизит обработки).
//
Процедура ВосстановитьЗначенияНастроекОбработки(ИменаНастроек, ПеренестиТаблицыВоВременныеТаблицы = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ИменаНастроек) Тогда
		Возврат;
	КонецЕсли; 
	
	Имена = СтрЗаменить(ИменаНастроек, ",ВременныеТаблицы", "");
	
	СтррНастройки = ПрочитатьЗначенияНастроек(Имена);
	
	ТипТЗ = Тип("ТаблицаЗначений");	
	
	ВременныеТаблицы = Новый Структура;		

	Для Каждого Элемент Из СтррНастройки Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		Если ТипЗнч(Значение) = ТипТЗ Тогда
			Если ПеренестиТаблицыВоВременныеТаблицы Тогда
				ВременныеТаблицы.Вставить(Ключ, Значение);
			Иначе
				ЭтотОбъект[Ключ] = Значение.Скопировать();
			КонецЕсли;
		Иначе
			ЭтотОбъект[Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция загружает реквизиты обработки значениями из XML-файла из временного хранилища.
// 
// Параметры:
//	ИменаНастроек 	- Строка - строка с именами настроек через запятую.
//	АдресВХ 		- Строка - адрес XML-файла настроек во временном хранилище.
//
Функция ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресВХ) Экспорт

	Имена = "," + ВРег(ИменаНастроек) + ",";
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,ВсегоИзменений", Ложь, Новый Массив, 0);
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru='В хранилище отсутствует XML-файл настроек.';uk='У сховищі відсутня XML-файл настройок.'"), Истина);
		Возврат СтррРезультат;
	КонецЕсли;
	
	ФайлНастроек = КаталогВременныхФайлов() + "apconfig.xml";
	Данные.Записать(ФайлНастроек);
	
	ДокXML = Новый ЧтениеXML;
    ДокXML.ОткрытьФайл(ФайлНастроек);
	
	ФайлКорректный 			 = Ложь;
	ЕстьТэгSettings 		 = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;		
 
    Пока ДокXML.Прочитать() Цикл
 
        Если ДокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
		 	ИмяУзла = ВРег(ДокXML.Name);
			
			Если ИмяУзла = "SETTINGS" Тогда
				
				ЕстьТэгSettings = Истина;
				
				ЦелевойМодуль = ДокXML.ЗначениеАтрибута("ModuleName");
				ЦелеваяВерсия = ДокXML.ЗначениеАтрибута("ModuleVersion");					
				
				Если ЦелевойМодуль = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru='Отсутствувет атрибут %1 узла ""Settings""!';uk='Отсутствувет атрибут %1 вузла ""Settings""!'"), "ModuleName");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелеваяВерсия = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru='Отсутствувет атрибут %1 узла ""Settings""!';uk='Отсутствувет атрибут %1 вузла ""Settings""!'"), "ModuleVersion");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелевойМодуль = Неопределено Или ЦелеваяВерсия = Неопределено Тогда 
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ВРег(ЦелевойМодуль) <> "APMTBASE" Тогда
					Текст = СтрШаблон_(НСтр("ru='Настройки предназначены для другого модуля (ModuleName = %1, ожидаемое значение: %2)!';uk='Налаштування призначені для іншого модуля (ModuleName = %1, очікуване значення: %2)!'"), 
						ЦелевойМодуль, "APMTBase");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Сравнение = СравнитьВерсии(ВерсияОбработки(), ЦелеваяВерсия);
				Если Сравнение <> 0 Тогда
					Разница = ?(Сравнение < 0, НСтр("ru='более новой';uk='новішій'"), НСтр("ru='более старой';uk='старішої'"));
					Текст = СтрШаблон_(НСтр("ru='Получены настройки для обработки %1 версии (%2)!';uk='Отримано налаштування для обробки %1 версії (%2)!'"), Разница, ЦелеваяВерсия);
					ВывестиСообщение(СтррРезультат, Текст);
				КонецЕсли;
				
				ФайлКорректный = Истина;
				
			ИначеЕсли ИмяУзла = "ITEM" И ФайлКорректный Тогда
				
				Если Не ВыведенЗаголовокЗагрузки Тогда
					ВывестиСообщение(СтррРезультат,  НСтр("ru='Чтение значений настроек...';uk='Читання значень налаштувань...'"));
					ВыведенЗаголовокЗагрузки = Истина;
				КонецЕсли;
				
				Имя = ДокXML.ЗначениеАтрибута("Name");
				Если 0 = Найти(Имена, "," + ВРег(Имя) + ",") Тогда
					// загружаем только реквизиты, указанные в параметре Имена
				ИначеЕсли Не ЕстьРеквизитОбъекта(Имя, ЭтотОбъект) Тогда
					Текст = СтрШаблон_(НСтр("ru='Пропущен параметр (отсутствует в обработке): ""%1"".';uk='Пропущений параметр (відсутній в обробці): ""%1"".'"), Имя);
					ВывестиСообщение(СтррРезультат, Текст);
				Иначе
					Значение = ЗначениеИзСтрокиXML(ДокXML.ЗначениеАтрибута("Value"), ТипЗнч(ЭтотОбъект[Имя]));
					Если ЭтотОбъект[Имя] <> Значение Тогда // изменилось значение реквизита, загружаем новое значение
						ЭтотОбъект[Имя] = Значение;
						Если СтррРезультат.ВсегоИзменений = 0 Тогда
							ВывестиСообщение(СтррРезультат, НСтр("ru='Получены новые значения параметров настройки:';uk='Отримано нові значення параметрів налаштувань:'"));
						КонецЕсли;
						СтррРезультат.ВсегоИзменений = СтррРезультат.ВсегоИзменений + 1;
						Текст = СтрШаблон_(НСтр("ru='%1. ""%2""';uk='%1. ""%2""'"), СтррРезультат.ВсегоИзменений, Имя);
						ВывестиСообщение(СтррРезультат, Текст);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;					
 
        КонецЕсли;
 
    КонецЦикла; 
 
    ДокXML.Закрыть();
	
	Если Не ЕстьТэгSettings Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru='Файл не является файлом настроек - ожидается тэг ""Settings"".';uk='Файл не є файлом налаштувань - очікується тег ""Settings"".'"), Истина);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

// Функция возвращает структуру с прочитанными настройками из хранилища системных настроек.
// Параметры:
//	 стрИменаНастроек - Строка - строка имен настроек, перечисленных через запятую.
//	 ЗначениеПоУмолчанию - любой тип - возвращаемое значение настройки, если исходное значение настройки оказалось равным Неопределено.
//
// Возвращаемое значение:
//  Структура - значения прочитанных настроек.
//
Функция ПрочитатьЗначенияНастроек(стрИменаНастроек, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	МассивИмен = СтрРазделить_(стрИменаНастроек, ",", Ложь);
	
	стррРезультат = Новый Структура(стрИменаНастроек);
	Ключ 		 = КлючНастроекОбмена();
	Пользователь = ПользовательНастроек();
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда // не проверяем прочитанные значения на Неопределено
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			стррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
		КонецЦикла;
		
	Иначе // проверяем прочитанные значение на Неопределено и заменяем такие значения на ЗначениеПоУмолчанию	
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			Если ЗначениеНастройки <> Неопределено Тогда
				стррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
			Иначе
				стррРезультат.Вставить(ИмяНастройки, ЗначениеПоУмолчанию);			
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции

// Удаляет настройки из хранилища.
// В качестве параметра передается строка с именами настроек через запятую или массив имен настроек.
Процедура УдалитьЗначенияНастроек(ИменаНастроек)
	
	ТипПараметра = ТипЗнч(ИменаНастроек);
	Если ТипПараметра = Тип("Строка") Тогда
		МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивИмен = ИменаНастроек;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Процедура УдалитьЗначенияНастроек() - неизвестный тип папаметра ИменаНастроек - '; uk = 'Процедура УдалитьЗначенияНастроек() - невідомий тип папаметра ИменаНастроек - '") + Строка(ТипПараметра));
	КонецЕсли;
	
	Для Каждого ИмяНастройки Из МассивИмен Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось удалить системную настройку: '; uk = 'Не вдалося видалити системну настройку: '") + ИмяНастройки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение настройки, прочитанной из хранилища настроек.
// В параметре передается имя настройки.
Функция ПрочитатьЗначениеНастройки(ИмяНастройки) Экспорт
	
	Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());

КонецФункции

// В качестве параметра передается имя настройки (строка).
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение) Экспорт

	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, Значение, , ПользовательНастроек());
	
КонецПроцедуры

Процедура УдалитьЗначениеНастройки(ИмяНастройки)
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
	
КонецПроцедуры	

// Функция возвращает заполненную структуру объекта, прочитанного из хранилища.
// В структуре проставлены значения свойств в соответствии с данными в хранилище БД, найденными по ключу ID.
//
Функция ПолучитьОбъектИзХранилища(Префикс, ID) Экспорт

	Если ID = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПрочитатьЗначениеНастройки(Префикс + Строка(ID));
	КонецЕсли; 

КонецФункции 

// Процедура сохраняет заполненную структуру объекта в хранилище.
Процедура СохранитьОбъектВХранилище(Префикс, ID, СтррОбъект) Экспорт

	СохранитьЗначениеНастройки(Префикс + Строка(ID), СтррОбъект);

КонецПроцедуры

// Процедура удаляет объект из хранилища.
Процедура УдалитьОбъектИзХранилища(Префикс, ID) Экспорт
	
	УдалитьЗначениеНастройки(Префикс + Строка(ID));
	
КонецПроцедуры

// Процедура удаляет объект из хранилища.
Процедура УдалитьОбъектыИзХранилища(Префикс, мИдентификаторы) Экспорт
	
	Для Каждого ID Из мИдентификаторы Цикл
		УдалитьОбъектИзХранилища(Префикс, ID)
	КонецЦикла; 
	
КонецПроцедуры

// Процедура полностью удаляет все настройки модуля.
// Параметры:
// 	СтррРезультат - Структура - структура для возвращения результата. Свойства:
// 		ОшибокНет - Булево - Истина, если ошибок нет и Ложь, если есть ошибки удаления (сбросить настройки не удалось).
// 		Описание  - Строка - описание ошибки.
// 	
Процедура СброситьВсеНастройкиМодуля(СтррРезультат) Экспорт
	
	СтррРезультат.ОшибокНет = Ложь;
	СтррРезультат.Описание  = НСтр("ru = 'Неизвестная ошибка.'; uk = 'Невідома помилка.'");
	
	Попытка
		ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), , ПользовательНастроек());
		Текст = СтрШаблон_(НСтр("ru = 'Настройки сброшены %1. 
                                 |Пользователь: %2.'; uk = 'Налаштування скинуті %1. 
                                 |Користувач: %2.'"), 
								ТекущаяДата(), Пользователи.ТекущийПользователь());
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), "НастройкиСброшены", Текст, , ПользовательНастроек());
		СтррРезультат.ОшибокНет = Истина;
	Исключение
		СтррРезультат.Описание = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Процедура загружает реквизиты объекта (модуля) с правильной обработкой значений типа ТаблицаЗначений
Процедура ЗаполнитьРеквизитыОбъектаИзСтруктуры(Модуль, СтррОбъект) Экспорт
	
	ТипТЗ = Тип("ТаблицаЗначений");
	стрРеквизитыТЗ = Неопределено;
	мРеквизитыТЗ = Новый Массив;
	Для Каждого Элемент Из СтррОбъект Цикл
		Если ТипЗнч(Элемент.Значение) = ТипТЗ Тогда
			стрРеквизитыТЗ = ?(стрРеквизитыТЗ = Неопределено, "", стрРеквизитыТЗ + ",") + Элемент.Ключ;
			мРеквизитыТЗ.Добавить(Элемент.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект,, стрРеквизитыТЗ);
	
	Стр1С = "";
	Для Каждого ИмяРеквизита Из мРеквизитыТЗ Цикл
		Стр1С = Стр1С + СтрЗаменить("Модуль.%1.Загрузить(СтррОбъект.%1); ", "%1", ИмяРеквизита);
	КонецЦикла;
	
	Если Стр1С <> "" Тогда
		Выполнить(Стр1С);
	КонецЕсли; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки
#КонецОбласти 

#Область ПрограммныйИнтерфейс_РасширениеСтруктуры

// Функция возвращает представление структуры в виде строки
Функция СтруктураПредставление(Структура, ОграничениеДлиныПредставления = 100) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Структура Цикл

			Тип = ТипЗнч(Элемент.Значение);
			Если Тип = Тип("Строка") Тогда
				ЗначениеСтр = "'" + СокрЛП(Элемент.Значение) + "'";
			ИначеЕсли Тип = Тип("СписокЗначений") Тогда
				ЗначениеСтр = НСтр("ru = '<Список N='; uk = '<Список N='") + Строка(Элемент.Значение.Количество()) + ">";
			ИначеЕсли Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив") Тогда
				ЗначениеСтр = НСтр("ru = '<Массив N='; uk = '<Массив N='") + Строка(Элемент.Значение.Количество()) + ">";
			Иначе
				ЗначениеСтр = Строка(Элемент.Значение);
			КонецЕсли;
			
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли; 
			Результат = Результат + Элемент.Ключ + ": " + ЗначениеСтр;
			Если СтрДлина(Результат) >= ОграничениеДлиныПредставления Тогда
				Результат = Лев(Результат, ОграничениеДлиныПредставления - 3) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает список отсутствующих обязательных свойств.
Функция СтруктураОтсутствуютОбязательныеСвойства(Структура, стрОбязательныеСвойства)
	
	стрРезультат = "";
	
	Если ЗначениеЗаполнено(стрОбязательныеСвойства) Тогда
		МассивСвойств = СтрРазделить_(стрОбязательныеСвойства, ",");
		Для Каждого стрСвойство Из МассивСвойств Цикл
			Если Не Структура.Свойство(стрСвойство) Тогда
				стрРезультат = стрРезультат + ?(ПустаяСтрока(стрРезультат), "", ",") + стрСвойство;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат стрРезультат;
	
КонецФункции

// Функция проверяет наличие всех свойств структуры, названия свойств передаются в виде строки с разделителем ",".
Функция СтруктураЕстьСвойства(Структура, СтрСвойства) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Результат = Ложь;
	Иначе
		МассивСвойств = СтрРазделить_(СтрСвойства, ",");
		Для Каждого Элемент Из МассивСвойств Цикл
			Если Не Структура.Свойство(Элемент) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЗначениеСвойства(Структура, СтрСвойство)
	
	Перем Результат;
	Структура.Свойство(СтрСвойство, Результат);
	Возврат Результат;
	
КонецФункции

// ПрограммныйИнтерфейс_РасширениеСтруктуры
#КонецОбласти 

#Область ПрограммныйИнтерфейс_РасширениеТаблицыЗначений

//vd_181002 Перенесена из УТ
// Функция сокращает количество строк в ТЗ до заданного количества строк.
// Если удалялись лишние строки, то возвращается Истина.
Функция тзСократитьДоКоличестваСтрок(тз, КоличествоСтрок)

	УдалитьСтрок = тз.Количество() - КоличествоСтрок;
	Если УдалитьСтрок > 0 Тогда
		Для Поз = 1 По УдалитьСтрок Цикл
			тз.Удалить(тз.Получить(0));
		КонецЦикла;
	КонецЕсли;
	
	Возврат (УдалитьСтрок > 0);

КонецФункции

//vd_181002 Перенесена из УТ
// Функция проверяет наличие колонок в таблице значений. Названия колонок передаются в виде строки с разделителем ",".
Функция тзЕстьКолонки(ТЗ, СтрКолонки)
	
	Результат = Истина;
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Тогда
		Результат = Ложь;
	Иначе
		мКолонки = СтрРазделить_(СтрКолонки, ",");
		Для Каждого ИмяКолонки Из мКолонки Цикл
			Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
// ПрограммныйИнтерфейс_РасширениеТаблицыЗначений
#КонецОбласти 


#Область ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм

Функция ВернутьЦветаОФормления() Экспорт
	
	стррРезультат = Новый Структура;
	стррРезультат.Вставить("Авто", 	 		 Новый Цвет);
	стррРезультат.Вставить("ТекстПояснение", Новый Цвет(70,130,180));
	стррРезультат.Вставить("ТекстВнимание",  Новый Цвет(255,0,0));
	стррРезультат.Вставить("ТекстОбычный", 	 ЦветаСтиля.ЦветТекстаФормы);
	стррРезультат.Вставить("ФонРаздела", 	 Новый Цвет(225, 222, 255));
	стррРезультат.Вставить("ПолеГлавноеОкно",Новый Цвет(249, 243, 209));
	стррРезультат.Вставить("ФонСостояние", 	 Новый Цвет(255, 250, 217));
	стррРезультат.Вставить("ФонЗеленый", 	 Новый Цвет(128, 255, 128));
	стррРезультат.Вставить("ФонВнимание",	 Новый Цвет(255, 255, 128));
	стррРезультат.Вставить("Белый", 	 	 Новый Цвет(255, 255, 255));
	
	Возврат стррРезультат;
	
КонецФункции

Процедура ЗаполнитьСпособыОбмена(Список) Экспорт

	Список.Очистить();
	Список.Добавить("КаталогОбмена", НСтр("ru='Каталог обмена';uk='Каталог обміну'"));
	Список.Добавить("АПСОД",  		 НСтр("ru='Агент Плюс: СОД (служба обмена данными)';uk='Агент Плюс: СОД (служба обміну даними)'"));
	Список.Добавить("FTP", 			 НСтр("ru='FTP-сервер';uk='FTP-сервер'"));

КонецПроцедуры

Функция ПолучитьВсеЗакладкиЖурналаДокументовДляМУ() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("Заказ", 		НСтр("ru='Заказы';uk='Замовлення'"));
	Список.Добавить("Долг", 		НСтр("ru='Долги';uk='Борги'"));
	Список.Добавить("Реализация", 	НСтр("ru='Реализация';uk='Реалізація'"));
	Список.Добавить("ПКО", 			НСтр("ru='Касса';uk='Каса'"));
	Список.Добавить("Поступление", 	НСтр("ru='Возврат';uk='Повернення'"));
	Список.Добавить("Перемещение", 	НСтр("ru='Перемещение';uk='Переміщення'")); 
	Список.Добавить("Мерчендайзинг",НСтр("ru='Мерчендайзинг';uk='мерчендайзинг'")); 
	
	Возврат Список;
	
КонецФункции

// Функция проверяет наличие колонок в таблице значений. Названия колонок передаются в виде строки с разделителем ",".
Функция ЕстьКолонкиТаблицыЗначений(ТЗ, СтрКолонки) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Тогда
		Результат = Ложь;
	Иначе
		мКолонки = СтрРазделить_(СтрКолонки, ",");
		Для Каждого ИмяКолонки Из мКолонки Цикл
			Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строковое представление расписания трекинга
Функция ПредставлениеРасписанияТрекинга(СтррРасписание) Экспорт
	
	Если Не СтруктураЕстьСвойства(СтррРасписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
		Возврат "";
	КонецЕсли;
	
	Дни = СтрЗаменить(СтррРасписание.ДниНедели, ",", "");
	Если Дни = ""  Тогда
		Возврат "";
	КонецЕсли;
	
	Если Дни = "1234567" Тогда
		СтрДни = НСтр("ru='все';uk='усе'");
	Иначе
		ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС';uk='пн, вт, ср, чт, пт, СБ, НД'");
		Если Лев(Дни, 5) = "12345" Тогда
			СтрДни = НСтр("ru='по будням';uk='по буднях'");
			Если Число(Прав(Дни, 1)) > 5 Тогда
				СтрДни = СтрДни + ", " + СтрРазделить_(ДниНеделиСтр, ",")[Число(Прав(Дни, 1))-1];
			КонецЕсли;
		Иначе
			МассивДней = СтрРазделить_(ДниНеделиСтр, ",");
			СтрДни = ""; 
			Для Поз = 1 По МассивДней.Количество() Цикл	
				Если Найти(Дни, Строка(Поз)) <> 0 Тогда
					СтрДни = СтрДни + ?(СтрДни = "", "", ", ") + МассивДней[Поз-1];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = НСтр("ru='Дни недели:';uk='Дні тижня:'") + " " + СтрДни + ". ";
	СтрВремя  = СтрШаблон_(НСтр("ru='Время с %1 по %2';uk='Час з %1 по %2'"), СтррРасписание.ВремяНачала, СтррРасписание.ВремяОкончания) + ". ";
	Результат = Результат + СтрВремя;
	СтрИнтервал = НСтр("ru='Интервал: каждые';uk='Інтервал: кожні'") + " ";
	Если СтррРасписание.ПериодЗаписи = 0 Или СтррРасписание.ПериодЗаписи % 60 <> 0 Тогда
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи) + " " + НСтр("ru='сек';uk='сек'");
	Иначе
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи / 60) + " " + НСтр("ru='мин';uk='хв'");
	КонецЕсли;
	Результат = Результат + СтрИнтервал + ".";

	Возврат Результат;

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет готовность справочника агентов к обмену данными.
//
// Параметры:
//  ОписаниеСтатуса - Строка - в параметре возвращается описание статуса готовности справочника.
//  КодСостояния - Строка - в параметре возвращается идентфикатор состояния справочника.
//
// Возвращаемое значение:
//   Истина - справочник готов к обмену данными, в параметре ОписаниеСтатуса возвращается пустая строка.
//   Ложь - не готов к обмену данными, в параметре ОписаниеСтатуса возвращается описание статуса.
//
Функция СправочникАгентовПроверитьГотовность(ТЗ)

	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание,Количество");
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Или ТЗ.Количество() = 0 Тогда
		
		СтррРезультат.Готов = Ложь;		
		СтррРезультат.Описание = НСтр("ru='Не заполнены настройки агентов.';uk='Не заповнені налаштування агентів.'");
		СтррРезультат.КодСостояния = "СправочникПустой";
		СтррРезультат.Количество = 0;
		
	Иначе
		
		СтррРезультат.Количество = ТЗ.Количество(); // общее количество агентов (готовых и не готовых)
		
		ГотовыеАгенты 		 = 0;
		КритичныеЗамечания 	 = 0;
		НеКритичныеЗамечания = 0;
		
		Для Каждого СтрокаТ Из ТЗ Цикл
			Если СтрокаТ.СтатусНастроек = 1 Тогда // зеленая галка статуса агента
				ГотовыеАгенты = ГотовыеАгенты + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 2 Тогда
				КритичныеЗамечания = КритичныеЗамечания + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 3 Тогда
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			Иначе // неизвестный статус!
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КритичныеЗамечания > 0 Тогда
			ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КритичныеЗамечания, НСтр("ru='агента, агентов, агентов';uk='агента, агентів, агентів'"));
			СтррРезультат.Готов = Ложь;			
			СтррРезультат.Описание = СтрШаблон_(НСтр("ru='Не заполнены настройки у %1.';uk='Не заповнені налаштування у %1.'"), ЧислоАгентов);
			СтррРезультат.КодСостояния = "НеУВсехЗаполненыНастройки";
		ИначеЕсли ГотовыеАгенты > 0 Тогда
			СтррРезультат.Готов = Истина;
			СтррРезультат.Описание = "";
			СтррРезультат.КодСостояния = ?(НеКритичныеЗамечания > 0, "НеКритичныеЗамечания", "ЕстьГотовыеАгенты");
		Иначе
			СтррРезультат.Готов = Ложь;
			СтррРезультат.Описание = НСтр("ru='Нет торговых агентов готовых к обмену данными.';uk='Немає торгових агентів готових до обміну даними.'");
			СтррРезультат.КодСостояния = "НетГотовыхАгентов";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность справочника МУ к обмену данными.
//
// Параметры:
//  ОписаниеСтатуса - Строка - в параметре возвращается описание статуса готовности справочника.
//  КодСостояния - Строка - в параметре возвращается идентфикатор состояния справочника.
//
// Возвращаемое значение:
//   Истина - справочник готов к обмену данными, в параметре ОписаниеСтатуса возвращается пустая строка.
//   Ложь - не готов к обмену данными, в параметре ОписаниеСтатуса возвращается описание статуса.
//
Функция СправочникМобильныхУстройствПроверитьГотовность(ТЗ)
	
	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание", Истина, "", "");
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Или ТЗ.Количество() = 0 Тогда
		
		СтррРезультат.Описание 	   = НСтр("ru='Не заполнен справочник мобильных устройств.';uk='Не заповнений довідник мобільних пристроїв.'");
		СтррРезультат.КодСостояния = "СправочникПустой";
		СтррРезультат.Готов 	   = Ложь;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность виртуальных справочников к обмену данными.
//
// Параметры:
//  ИменаСправочников - Строка - список названий виртуальных справочников через запятую.
//
// Возвращаемое значение:
//   Структура статусов в соответствии с переданным списком названий виртуальных справочников.
//   Если передано единственное название справочника, то возвращается структура статуса справочнкиа только для данного справочника.
//
Функция СправочникиГотовыКРаботе(ИменаСправочников) Экспорт

	СтррРезультат = Новый Структура(ИменаСправочников);
	СтррЗначения  = ПрочитатьЗначенияНастроек(ИменаСправочников);
	
	Для Каждого Элемент Из СтррЗначения Цикл
		ВидСправочника = Элемент.Ключ;
		Если ВидСправочника = "НастройкиАгентов" Тогда
			СтррРезультат[ВидСправочника] = СправочникАгентовПроверитьГотовность(Элемент.Значение);
		ИначеЕсли ВидСправочника = "МобильныеУстройства" Тогда
			СтррРезультат[ВидСправочника] = СправочникМобильныхУстройствПроверитьГотовность(Элемент.Значение);
		Иначе
			ВызватьИсключение(НСтр("ru = 'Передан неизвестный вид справочника для чтения из системных настроек: '; uk = 'Передано невідомий вид довідника для читання з установок системи: '") + ВидСправочника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтррРезультат.Количество() = 1, СтррРезультат[ВидСправочника], СтррРезультат);
	
КонецФункции

Функция НастройкиОбменаГотовыКРаботе() Экспорт

	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание", Истина, "", "");
	СтррЗначения  = ПрочитатьЗначенияНастроек("КаталогДанных,КаталогОбмена,СпособОбмена,СОДАдрес,СОДПорт,FTPАдрес,FTPПароль,FTPПользователь");
	
	Если Не ЗначениеЗаполнено(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = НСтр("ru='Не указан каталог данных.';uk='Не вказаний каталог даних.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогДанных";
		
	ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru='Каталог данных не существует (%1).';uk='Каталог даних не існує (%1).'"), СтррЗначения.КаталогДанных);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогДанных";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru='Не указан каталог обмена.';uk='Не вказаний каталог обміну.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогОбмена";
		
	ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru='Каталог обмена не существует (%1).';uk='Каталог обміну не існує (%1).'"), СтррЗначения.КаталогОбмена);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогОбмена";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.СпособОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru='Не указан способ обмена.';uk='Не вказаний спосіб обміну.'");
		СтррРезультат.КодСостояния = "НеВыбранСпособ";
		
	Иначе
		
		НазванияРеквизитов = "";		
		
		Если СтррЗначения.СпособОбмена = "КаталогОбмена" Тогда // ничего не проверяем
		
		ИначеЕсли СтррЗначения.СпособОбмена = "АПСОД" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Адрес СОД';uk='Адреса СОД'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДПорт) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Порт СОД';uk='Порт СОД'") + """";
			КонецЕсли;
			
		ИначеЕсли СтррЗначения.СпособОбмена = "FTP" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПользователь) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Пользователь FTP';uk='Користувач FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Адрес FTP';uk='Адреса FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПароль) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Пароль FTP';uk='Пароль FTP'") + """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазванияРеквизитов <> "" Тогда
			
			СтррРезультат.Описание = НСтр("ru='В настройках обмена не заполнены реквизиты:';uk='В налаштуваннях обміну незаповнені реквізити:'") + " "
				+ Прав(НазванияРеквизитов, СтрДлина(НазванияРеквизитов) - 2) + ".";
			СтррРезультат.КодСостояния = "НеЗаполненыРеквизиты";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтррРезультат.Готов = ПустаяСтрока(СтррРезультат.Описание); // если нет описания, то ошибок нет
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция возвращает последний элемент строки-списка с разделителями.
Функция ПоследнийЭлементСтроки(СтрВыражение, СимволРазделитель = ".") Экспорт

	Если Найти(СтрВыражение, СимволРазделитель) <> 0 Тогда 
		Результат = "";
		Индекс = СтрДлина(СтрВыражение);
		Символ = Сред(СтрВыражение, Индекс, 1);
		Пока Символ <> СимволРазделитель Цикл // в цикле ищем справа налево первый символ-разделительр
			Результат = Символ + Результат;
			Индекс = Индекс - 1;
			Символ = Сред(СтрВыражение, Индекс, 1);
		КонецЦикла;
	Иначе
		Результат = СтрВыражение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ГотовностьНастроекОбмена() Экспорт
	
	//унф
	
	стррРезультат = Новый Структура("Готово,КодСостояния,Описание", Истина, "", "");
	стррЗначения  = ПрочитатьЗначенияНастроек("КаталогДанных,КаталогОбмена,СпособОбмена,СОДАдрес,СОДПорт,FTPАдрес,FTPПароль,FTPПользователь");
	
	Если Не ЗначениеЗаполнено(стррЗначения.КаталогДанных) Тогда
		
		стррРезультат.Описание = НСтр("ru='Не указан каталог данных.';uk='Не вказаний каталог даних.'");
		стррРезультат.КодСостояния = "НеУказанКаталогДанных";
		
	ИначеЕсли Не КаталогСуществует(стррЗначения.КаталогДанных) Тогда
		
		стррРезультат.Описание = СтрШаблон_(НСтр("ru='Каталог данных не существует (%1).';uk='Каталог даних не існує (%1).'"), стррЗначения.КаталогДанных);
		стррРезультат.КодСостояния = "НеСуществуетКаталогДанных";
		
	ИначеЕсли Не ЗначениеЗаполнено(стррЗначения.КаталогОбмена) Тогда
		
		стррРезультат.Описание = НСтр("ru='Не указан каталог обмена.';uk='Не вказаний каталог обміну.'");
		стррРезультат.КодСостояния = "НеУказанКаталогОбмена";
		
	ИначеЕсли Не КаталогСуществует(стррЗначения.КаталогОбмена) Тогда
		
		стррРезультат.Описание = СтрШаблон_(НСтр("ru='Каталог обмена не существует (%1).';uk='Каталог обміну не існує (%1).'"), стррЗначения.КаталогОбмена);
		стррРезультат.КодСостояния = "НеСуществуетКаталогОбмена";
		
	ИначеЕсли Не ЗначениеЗаполнено(стррЗначения.СпособОбмена) Тогда
		
		стррРезультат.Описание = НСтр("ru='Не указан способ обмена.';uk='Не вказаний спосіб обміну.'");
		стррРезультат.КодСостояния = "НеВыбранСпособ";
		
	Иначе
		
		НазванияРеквизитов = "";		
		
		Если стррЗначения.СпособОбмена = "КаталогОбмена" Тогда // ничего не проверяем
		
		ИначеЕсли стррЗначения.СпособОбмена = "АПСОД" Тогда 
			
			Если Не ЗначениеЗаполнено(стррЗначения.СОДАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Адрес СОД';uk='Адреса СОД'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.СОДПорт) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Порт СОД';uk='Порт СОД'") + """";
			КонецЕсли;
			
		ИначеЕсли стррЗначения.СпособОбмена = "FTP" Тогда 
			
			Если Не ЗначениеЗаполнено(стррЗначения.FTPПользователь) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Пользователь FTP';uk='Користувач FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.FTPАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Адрес FTP';uk='Адреса FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.FTPПароль) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru='Пароль FTP';uk='Пароль FTP'") + """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазванияРеквизитов <> "" Тогда
			
			стррРезультат.Описание = НСтр("ru='В настройках обмена не заполнены реквизиты:';uk='В налаштуваннях обміну незаповнені реквізити:'") + " "
				+ Прав(НазванияРеквизитов, СтрДлина(НазванияРеквизитов) - 2) + ".";
			стррРезультат.КодСостояния = "НеЗаполненыРеквизиты";
			
		КонецЕсли;
		
	КонецЕсли;
	
	стррРезультат.Готово = ПустаяСтрока(стррРезультат.Описание); // если нет описания, то ошибок нет
	
	Возврат стррРезультат;
	
КонецФункции

// Функция проверяет регистрацию обработки в 1С:Предприятии как регламентного задания.
Функция ГотовностьФоновогоЗадания() Экспорт

	//унф
	
	стррРезультат = Новый Структура;
	стррРезультат.Вставить("КонстантаИспДопОбработки", 	СтатусГовоностиКонстантыИспДопОбработки());
	стррРезультат.Вставить("РегистрацияОбработки", 		СтатусГовоностиРегистрацииОбработки());
	стррРезультат.Вставить("РегламетноеЗадание", 		СтатусГовоностиРегламетногоЗадания());
	
	Возврат стррРезультат;

КонецФункции 

Функция СтатусГовоностиКонстантыИспДопОбработки()
	
	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка", Ложь);
	стррИконки 	  = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);
	
	КонстантаИспользоватьДопОтчеты  = Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить();		
	
	Если КонстантаИспользоватьДопОтчеты = Ложь Тогда 
		стррРезультат.КодСостояния = "КонстантаВыключена";
		стррРезультат.Описание = НСтр("ru = 'Константа ""Дополнительные отчеты и обработки"" отключена." + Символы.ПС + "Константа включается в учетной системе: Компания - Администрирование – Печатные формы, отчеты и обработки - Дополнительные отчеты и обработки.'");
		стррРезультат.Иконка = стррИконки.Внимание;		
	Иначе // замечаний нет
		стррРезультат.КодСостояния = "ОК";
		стррРезультат.Описание = НСтр("ru='Константа включена.';uk='Константа включена.'");
		стррРезультат.Иконка = стррИконки.ОК;		
		стррРезультат.Готово = Истина;
	КонецЕсли; 

	Возврат стррРезультат;

КОнецФункции

Функция СтатусГовоностиРегистрацииОбработки()
	
	//унф
	
	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка", Ложь);
	стррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка,
		|	ДополнительныеОтчетыИОбработки.ИмяФайла,
        |	ДополнительныеОтчетыИОбработки.Версия
        |ИЗ
        |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
        |ГДЕ
        |	ДополнительныеОтчетыИОбработки.ИмяФайла = &ИмяФайла
        |	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаОбработки());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		стррРезультат.КодСостояния = "ТребуетсяРегистрация";
		стррРезультат.Описание = НСтр("ru='Требуется регистрация текущей обработки для ее выполнения как регламентного задания.';uk='Потрібна реєстрація поточної обробки для її виконання як регламентного завдання.'");
		стррРезультат.Иконка   = стррИконки.Внимание;
	Иначе
		Выборка.Следующий();
		Если СравнитьВерсии(ВерсияОбработки(), Выборка.Версия) <= 0 Тогда // версия актуальная или зарегистрирована более новая версия обработки
			// перебираем строки в ТЧ "Команды" - ищем хотя бы одну команду, связанную с регламентным заданием
			ЕстьРегламентноеЗаданиеДляКоманды = Ложь;
			Для каждого СтрокаТ Из Выборка.Ссылка.Команды Цикл
				Если ЗначениеЗаполнено(СтрокаТ.РегламентноеЗаданиеGUID) Тогда
					ЕстьРегламентноеЗаданиеДляКоманды = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ЕстьРегламентноеЗаданиеДляКоманды Тогда
				стррРезультат.КодСостояния = "ОК";
				стррРезультат.Описание = НСтр("ru='Обработка зарегистрирована в справонике и задано расписание. Замечаний нет.';uk='Обробка зареєстрована в справоніке і задано розклад. Зауважень немає.'");
				стррРезультат.Иконка   = стррИконки.ОК;
				стррРезультат.Готово   = Истина;
			Иначе
				стррРезультат.КодСостояния = "НетРегламентногоЗадания";
				стррРезультат.Описание = НСтр("ru='Не указано расписание выполнения хотя бы для одной из команд обработки.';uk='Не вказано розклад виконання хоча б для однієї з команд обробки.'");
				стррРезультат.Иконка   = стррИконки.Внимание;
			КонецЕсли; 
			
		Иначе
			стррРезультат.КодСостояния = "ЗарегистрированаСтараяВерсия"; // зарегистрирована устаревшая версия обработки
			Текст = НСтр("ru='Зарегистрирована устаревшая версия обработки (открыта версия - %1, зарегистрирована версия - %2).';uk='Зареєстрована застаріла версія обробки (відкрита версія - %1, зареєстрована версія - %2).'");
			стррРезультат.Описание = СтрШаблон_(Текст, ВерсияОбработки(), Выборка.Версия);
			стррРезультат.Иконка   = стррИконки.Внимание;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат стррРезультат;
			
КонецФункции

Функция СтатусГовоностиРегламетногоЗадания()
	
	//унф
	
	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка,ИдентификаторЗадания", Ложь);
	стррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);

	стррОтбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	мТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(стррОтбор);
	
	ИмяФайла = ИмяФайлаОбработки();
	НайденноеЗадание = Неопределено;
	
	// ищем зарегистрированную обработку "апОбменДанными.epf" среди регламентных заданий
	Для каждого Задание Из мТекущиеЗадания Цикл
		Параметр0 = Задание.Параметры[0]; // первый параметр задания должен ссылаться на элемент справочника "ДополнительныеОтчетыИОбработки"
		Если ТипЗнч(Параметр0) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			Продолжить;
		КонецЕсли; 
		Если Параметр0.ИмяФайла = ИмяФайла Тогда
			Если НайденноеЗадание = Неопределено Тогда
				НайденноеЗадание = Задание;
				Если Задание.Использование Тогда // если задание не используется, продолжаем поиск
					Прервать; // нашли используемое задание, связанное с обработкой
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденноеЗадание <> Неопределено Тогда
		стррРезультат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли; 
	
	Если НайденноеЗадание = Неопределено Тогда // нет регламентного задания, связанного с обработкой
		стррРезультат.КодСостояния = "НетЗадания";
		Текст = НСтр("ru='Не найдено регламентного задания, связанного с текущей обработкой (""%1"").';uk='Не знайдено регламентного завдання, пов''язаного з поточною обробкою (""%1"").'");
		стррРезультат.Описание = СтрШаблон_(Текст, ИмяФайла);
		стррРезультат.Иконка = стррИконки.Внимание;
	ИначеЕсли Не НайденноеЗадание.Использование Тогда // нет регламентного задания, связанного с обработкой
		стррРезультат.КодСостояния = "ЗаданиеВыключено";
		стррРезультат.Описание = НСтр("ru='Регламентное задание выключено.';uk='Регламентне завдання вимкнено.'");
		стррРезультат.Иконка = стррИконки.Внимание;
	ИначеЕсли Не ЗначениеЗаполнено(НайденноеЗадание.ИмяПользователя) Тогда // не указан пользователь для регламентного задания
		стррРезультат.КодСостояния = "НеУказанПользователь";
		стррРезультат.Описание = НСтр("ru='Не указан пользователь, от имени которого запускать регламентное задание.';uk='Не вказаний користувач, від імені якого запускати регламентне завдання.'");
		стррРезультат.Иконка = стррИконки.Внимание;		
	Иначе // замечаний нет
		стррРезультат.КодСостояния = "ОК";
		стррРезультат.Описание = НСтр("ru='Обработка указана в регламентном задании. Замечаний нет.';uk='Обробка вказана в регламентному завданні. Зауважень немає.'");
		стррРезультат.Иконка = стррИконки.ОК;		
		стррРезультат.Готово = Истина;
	КонецЕсли; 

	Возврат стррРезультат;
	
КонецФункции


// ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм
#КонецОбласти 

#Область ПрограммныйИнтерфейс_СпискиТорговыхТочек

// Функция возвращает параметры детализации списка торговых точек
Функция ПолучитьСписокДетализацииСписковТорговыхТочек() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("Организация", 	НСтр("ru='Организация';uk='Организация'"));
	//Список.Добавить("Контрагент", 	НСтр("ru='Контрагент';uk='Контрагент'"));
	Список.Добавить("Договор", 		НСтр("ru='Договор';uk='Договір'"));
	Список.Добавить("График", 		НСтр("ru='График';uk='Графік'"));	
	Список.Добавить("ПланПосещений",НСтр("ru='План посещений';uk='План відвідувань'"));	
	
	Возврат Список;

КонецФункции

// Функция возвращает Истина, если список торговых точек используется для планирования посещений.
// В параметрах ИспользуетсяГрафик, ИспользуетсяПП возвращаются признаки - какой вариант планирования посещений задействован (через График или через ПланПосещений).
Функция СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик = Неопределено, ИспользуетсяПП  = Неопределено) Экспорт
	
	ИспользуетсяГрафик 	= стррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено;
	ИспользуетсяПП 	   	= стррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено;
	
	Возврат ИспользуетсяГрафик Или ИспользуетсяПП;
	
КонецФункции

// ПрограммныйИнтерфейс_СпискиТорговыхТочек
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными

Функция КонстантыПолучитьЗначение(ИмяКонстанты) 

	Перем Значение;
	
	Если Не гКэшЧтенияКонстант.Свойство(ИмяКонстанты, Значение) Тогда
		Значение = Константы[ИмяКонстанты].Получить();
		гКэшЧтенияКонстант.Вставить(ИмяКонстанты, Значение);
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции

Функция НужноПропуститьТекущегоАгента()
	
	Если ВыбНастройкиАгента.СтатусНастроек = 2 Тогда // для агента все настроено
		Текст = НСтр("ru='Пропущен агент по причине не заполненных настроек.';uk='Пропущений агент по причини не заповнених налаштувань.'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.СтатусНастроек <> 1 Тогда // нет статуса готовности
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выгрузка данных по переданному агенту или по всем агентам.
Процедура ВыгрузитьДанные(Агент) Экспорт

	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.';uk='Налаштування агентів не задані! Дані не вивантажені.'"), "ОшибкаНастройки");
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Агент) Тогда // выгрузка данных для одного агента
		
		ВыгрузитьДанныеДляАгента(Агент);
		
	Иначе // выгрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			ВыбАгент = СтрокаТ.Сотрудник; //vd_180530
			ВыгрузитьДанныеДляАгента(СтрокаТ.Сотрудник);
		КонецЦикла;
		
		ВыбАгент = Справочники.Сотрудники.ПустаяСсылка(); //vd_180530
		
	КонецЕсли;

КонецПроцедуры

// Формирование файла выгрузки для переданного агента.
Процедура ВыгрузитьДанныеДляАгента(Агент, ОтветныеДанные = Ложь) Экспорт
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда // используем переменную гКэшСравненияКонфигураций как признак, что нужно загрузить настройки обмена из хранилища
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
	//гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено); //vd_181003 Перемещен ниже в процедуре // списки организаций выгрузки от агента к агенту могут отличаться
	
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветныеДанные Тогда
	    ОповеститьОСобытии(НСтр("ru = 'Выгрузка ответных данных для агента: '; uk = 'Вивантаження відповідних даних для агента: '") + СокрЛП(Агент));
	Иначе
		ОповеститьОСобытии(НСтр("ru = 'Выгрузка для агента: '; uk = 'Вивантаження для агента: '") + СокрЛП(Агент));
	КонецЕсли;
	
	гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено); //vd_181003 
	
	ИмяФайлаВыгрузки = КаталогВременныхФайловАгента() + "FromCDB.xml";
	ДокОбмена = СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки);

	МенеджерВТ = МенеджерВТПолучить();
	
	ВыгрузитьКонстанты(ДокОбмена);
	
	тзКартинки = Неопределено;
	
	ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки);
	
	ВыгрузитьДокументы(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИзображения(ДокОбмена, тзКартинки); //vd
	
	ВыгрузитьПодтверждения(ДокОбмена);

	ЗакрытьФайлВыгрузки(ДокОбмена);
	
	СТЗСохранить("Все"); // сохраняем все измененные служебные таблицы значений
	
	ИмяФайлаАрхиваКартинок = СформироватьАрхивСКартинками(тзКартинки);
	
	ФайлОтправки = УпаковатьФайл(ИмяФайлаВыгрузки, ИмяФайлаАрхиваКартинок);
	
	ОтправитьФайлПоСпособуОбмена(ФайлОтправки);

КонецПроцедуры

// Загрузка данных по переданному агенту или по всем агентам.
// Функция возвращает количество агентов, по которым загружены данные.
Функция ЗагрузитьДанные(Агент) Экспорт

	Количество = 0;
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.';uk='Налаштування агентів не задані! Дані не вивантажені.'"), "ОшибкаНастройки");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Агент) Тогда // загрузка данных для одного агента
		
		Если ЗагрузитьДанныеДляАгента(Агент) Тогда
			Количество = Количество + 1
		КонецЕсли;
		
	Иначе // загрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			Если ЗагрузитьДанныеДляАгента(СтрокаТ.Сотрудник) Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

// Функция возвращает Истина, если данные от агента были успешно загружены.
Функция ЗагрузитьДанныеДляАгента(Агент)

	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьАвтообмен Или СпособОбмена = "АПСОД" Тогда
		ТекстСообщения = СтрШаблон_(НСтр("ru = 'Загрузка для агента: %1'; uk = 'Завантаження для агента: %1'"),
							 СокрЛП(Агент));
		ОповеститьОСобытии(ТекстСообщения);
	КонецЕсли;
	
	стррСведения = Новый Структура; //vd_181001  Cтруктура для возврата дополнительных данных по содержимому архива файла обмена
		
	Каталог = ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(стррСведения);
	Если Каталог = Неопределено Тогда // была ошибка копирования/скачивания 
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбмена = ФайлОбменаРаспакованный(Каталог);
	Если ФайлОбмена = Неопределено Тогда
		ОповеститьОСобытии(НСтр("ru='В zip-архиве не найден файл загрузки.';uk='У zip-архіві не знайдений файл завантаження.'"));
	Иначе
		ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла(стррСведения);
		Результат = ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты); //vd_181002 Добавлен параметр ЗагружаемыеОбъекты
		УдалитьФайлы(ФайлОбмена.ПолноеИмя);
		Если Не Результат Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	//{{vd_181002 	
	//ФайлТрека = ФайлОбменаТрек(Каталог);	
	//Если ФайлТрека <> Неопределено Тогда
	//	ЗагрузитьТрек(ФайлТрека, ВыбНастройкиАгента.СсылкаМУ);
	//	УдалитьФайлы(ФайлТрека.ПолноеИмя);
	//КонецЕсли;
	ЗагрузитьGPSФайлы(Каталог);
	//}}vd_181002
	
	Если ОтветнаяВыгрузка Тогда
		ВыгрузитьДанныеДляАгента(Агент, Истина);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//vd_181002 Переименована из ЗагрузитьФайлПоСпособуОбмена() и изменена логика, добавлен параметр стррСведения
// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
//
Функция ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(стррСведения)

	Если СпособОбмена = "АПСОД" Тогда
		ФайлАрхив = СОДЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "FTP" Тогда	
		ФайлАрхив = ФТПЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		ФайлАрхив = КОЗагрузитьФайл();		
	Иначе
		ВызватьИсключение(НСтр("ru = 'Неизвестный способ обмена: '; uk = 'Невідомий спосіб обміну: '") + СпособОбмена);
	КонецЕсли;
	
	Если ФайлАрхив <> Неопределено Тогда
		//СохранитьФайлДляУД(ФайлАрхив.ПолноеИмя, Истина); //vd_181002 Пока нет необходимости
		Каталог = КаталогВременныхФайловАгента();	
		Если РаспаковатьФайлОбменаВПапку(ФайлАрхив, Каталог, стррСведения) Тогда
			Возврат Каталог;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

//vd_181002 Перенесена из УТ
//vd_180319 Фоновая передача GPS. Добавил процедуру. Процедура загружает все файлы с треками из Каталога.
Процедура ЗагрузитьGPSФайлы (Каталог, Знач ИмяФайла = Неопределено)
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = "gps*.txt";
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(Каталог, ИмяФайла);
		
	Для Каждого ФайлТрека Из НайденныеФайлы Цикл 
		ЗагрузитьТрек(ФайлТрека, ВыбНастройкиАгента.СсылкаМУ);
		УдалитьФайлы(ФайлТрека.ПолноеИмя);
	КонецЦикла;
	
Конецпроцедуры

//vd_181002 Изменена логика
Функция РаспаковатьФайлОбменаВПапку(ФайлАрхив, КаталогНазначения, стррСведения)
	
		КаталогФотографийВременный = ДополнитьСлешВПуть(КаталогНазначения) + "Photos";
	
	Попытка
		УдалитьФайлы(КаталогНазначения, "To*.*");
		УдалитьФайлы(КаталогНазначения, "gpstrack.txt");
		//(( gi_180415 для загрузки фотографий
		УдалитьФайлы(КаталогНазначения, "PhotosToCDB.zip"); 
		УдалитьФайлы(КаталогФотографийВременный, "*.*"); 
		//)) gi_180415
	Исключение
	КонецПопытки;
	
	Если ФайлАрхив <> Неопределено Тогда
		
		ПарольАрхива = СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
		//(( gi_180420 учтен случай, когда архив поврежден (например, еще не был дозакачен из МУ на сервер)
		Попытка
			АрхивОбмена = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя, ПарольАрхива);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Ошибка чтения архива! %1'; uk = 'Помилка читання архіву! %1'")
								,ОписаниеОшибки()); 
		    ОповеститьОСобытии(Текст , "ОшибкаОбмен",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки; 
		//)) gi_180420
		АрхивОбмена.ИзвлечьВсе(КаталогНазначения);
		АрхивОбмена.Закрыть();
		Попытка
			УдалитьФайлы(ФайлАрхив.ПолноеИмя);
		Исключение
			Текст = СтрШаблон_(НСтр("ru='Не удалось удалить файл загрузки: %1 по причине: %2';uk='Неможливо видалити файл завантаження:%1 з причини:%2'"),
							 ФайлАрхив.ПолноеИмя, ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
		
		//(( gi_180415 для загрузки фотографий
		ФайлАрхиваФотографий = ДополнитьСлешВПуть(КаталогНазначения) +  "PhotosToCDB.zip";
		Если ФайлСуществует(ФайлАрхиваФотографий) Тогда
			ПроверитьИСоздатьКаталог(КаталогФотографийВременный);
			АрхивФото = Новый ЧтениеZipФайла(ФайлАрхиваФотографий);
			АрхивФото.ИзвлечьВсе(КаталогФотографийВременный);
			АрхивФото.Закрыть();
			//стррСведения.Вставить("КаталогФото", КаталогФотографийВременный); //vd_180712 // временный каталог фотографий, распакованных из файла обмена данными
		КонецЕсли;
		стррСведения.Вставить("КаталогФото", КаталогФотографийВременный); //vd_180712 // временный каталог фотографий, распакованных из файла обмена данными
		//)) gi_180415
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОтправитьФайлПоСпособуОбмена(ФайлОтправки)

	ИмяФайлаНаСервере = "From1C.zip";
	КаталогАгента = Неопределено;
	
	Если СпособОбмена = "АПСОД" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаАПС = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаАПС);
		КонецЕсли; 
		
	ИначеЕсли СпособОбмена = "FTP" Тогда
		
		ПодключениеFTP = ФТПСоздатьПодключение();
		Если ПодключениеFTP = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФТППапка = СтрЗаменить(ВыбНастройкиАгента.КаталогОбмена, "\", "/");
		
		ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
		Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
			Если ПодключениеFTP.НайтиФайлы(ФТППапкаСервера).Количество() = 0 Тогда
				ПодключениеFTP.СоздатьКаталог(ФТППапкаСервера);
			КонецЕсли;
			ПодключениеFTP.УстановитьТекущийКаталог(ФТППапкаСервера);
		КонецЕсли;
		
		Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
			ПодключениеFTP.СоздатьКаталог(ФТППапка);
		КонецЕсли;
		
		ИмяФайлаFTP = ФТППапка + "/" + ИмяФайлаНаСервере;
		
		Попытка
			ПодключениеFTP.Записать(ФайлОтправки, ИмяФайлаFTP);
			Текст = НСтр("ru = 'Данные для агента успешно выгружены на FTP-сервер.'; uk = 'Дані для агента успішно вивантажені на FTP-сервер.'");
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Исключение	
			Текст = НСтр("ru = 'Данные для агента не отправлены! Причина: '; uk = 'Дані для агентів не відправлені! Причина: '");
			Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
				Текст = Текст + НСтр("ru = 'не существует папка на FTP-сервере '; uk = 'не існує папка на FTP-сервері '") + ФТППапка;
			Иначе
				Текст = Текст + ОписаниеОшибки();				
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
		КонецПопытки;
		
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаКО = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаКО);
			Текст = СтрШаблон_(НСтр("ru = 'Данные для агента выгружены в файл ""%1"".'; uk = 'Дані для агента вивантажені в файл ""%1"". '"), ИмяФайлаКО);
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение(СтрШаблон_(НСтр("ru = 'Неизвестный способ обмена: %1'; uk = 'Невідомий спосіб обміну: %1'"),СпособОбмена));
		
	КонецЕсли;

	Попытка
		УдалитьФайлы(ФайлОтправки);
	Исключение
	КонецПопытки;

КонецПроцедуры

#Область ПрограммныйИнтерфейс_ОбменДанными_ФТП

Функция ФТПСоздатьПодключение()
	
	Если ПустаяСтрока(FTPАдрес) Или ПустаяСтрока(FTPПользователь) Тогда
		Текст = НСтр("ru = 'В настройках обмена заданы не все параметры соединения с FTP-сервером. Работа с FTP невозможна!'; uk = 'В налаштуваннях обміну задані не всі параметри з''єднання з FTP-сервером. Робота з FTP неможлива!'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(FTPАдрес,, FTPПользователь, FTPПароль,, FTPПассивныйРежим, 0);		
	Исключение
		ТекстСообщения = СтрШаблон_(НСтр("ru = 'Ошибка подключения. Причина: %1'; uk = 'Помилка підключення. Причина:%1'"),
							 ОписаниеОшибки());
		ОповеститьОСобытии(ТекстСообщения, "ОшибкаОбмен");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПодключениеКФТП;
	
КонецФункции //Функция СоздатьПодключениеКФТП()

//vd_181002 Изменена логика и возвращаемое значение
// Возвращает папку, куда скопирован и распакован файл обмена, 
// или Неопределено, если произошла ошибка.
// 
Функция ФТПЗагрузитьФайл()
	
	ПодключениеКФТП = ФТПСоздатьПодключение();	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяФайла = "To1C.zip";
	
	ФТППапка = ВыбНастройкиАгента.КаталогОбмена;
	Если ПустаяСтрока(ФТППапка) Тогда
		Текст = НСтр("ru = 'В ""Настройках агентов"" у агента не указана папка обмена!'; uk = 'В ""Налаштуваннях агентів"" у агента не зазначена папка обміну!'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;
	
	ФТППапка = ДополнитьСлешВПуть(ФТППапка, "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		ПодключениеКФТП.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли; 
	
	КаталогТ = КаталогВременныхФайловДляТранспорта(ВыбНастройкиАгента.КаталогОбмена);
	
	//{{ ЗАГРУЗКА фоновых GPS треков
	
	КаталогЛокальный = КаталогВременныхФайловАгента();
	
	ЗагрузитьGPSФайлы(КаталогЛокальный);  //Загружаем файлы с треками ,если таковые есть.
	
	//{{ vd_180404 Баг 38208. ПроверкаПапки. Добавил проверку.
	Если ПодключениеКФТП.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
		ПодключениеКФТП.СоздатьКаталог(ФТППапка);
		Текст = СтрШаблон_(НСтр("ru = 'На  FTP-сервере создана папка агента: %1'; uk = 'На FTP-сервері створена папка агента: %1'"),
								ФТППапка);
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
	КонецЕсли;
	//}} vd_180404 Баг 38208
	
	НайденныеФайлы = ПодключениеКФТП.НайтиФайлы(ФТППапка, "gps*.txt");
		
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//КОПИРОВАТЬ
		Попытка
			ПодключениеКФТП.Получить(ФайлТрек.ПолноеИмя, КаталогЛокальный + ФайлТрек.Имя);
		Исключение
			Текст = НСтр("ru = 'Ошибка при скачивании файла трека от СОД. Возможная причина: отсутсвует папка агента (%1). Трек от агента не загружен!'; uk = 'Помилка при скачуванні файлу треку від СОД. Можлива причина: відсутня папка агента (%1). Трек від агента не завантажено!'");
			ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//ЗАГРУЗКА
		Попытка
			ЗагрузитьGPSФайлы(КаталогЛокальный, ФайлТрек.Имя);  
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось Загрузить файл трека: %1 по причине: %2'; uk = 'Не вдалося Завантажити файл треку: %1 з причини: %2'"),
									ФайлТрек.ПолноеИмя, ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛЕНИЕ файла "gpstrack.txt" на ФТП-сервере
		Попытка
			ПодключениеКФТП.Удалить(ФайлТрек.ПолноеИмя);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось удалить файл ""gpstrack.txt"" на FTP-сервере. Причина: %1'; uk = 'Неможливо видалити файл ""gpstrack.txt"" на FTP-сервері. Причина: %1'"),
								ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЦикла;
	
	//}} ЗАГРУЗКА фоновых GPS треков

	// КОПИРОВАНИЕ файла "To1C.*" с данными с ФТП в каталоги временных файлов
	Попытка    		
		Если ПодключениеКФТП.НайтиФайлы(ФТППапка, "To1C.*").Количество() = 0 Тогда
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии(НСтр("ru = 'Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.'; uk = 'Завантажені тільки дані по фонової передачі GPS треку. Файл обміну даними відсутня.'"),,, "ТекущийАгентСообщить");
			Иначе
				ОповеститьОСобытии(НСтр("ru = 'Нет данных на FTP-сервере.'; uk = 'Немає даних на FTP-сервері.'"),,, "ТекущийАгентСообщить");
			КонецЕсли;
			Результат = Неопределено; 
		Иначе
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии(НСтр("ru = 'Загружены данные по фоновой передачи GPS трека.'; uk = 'Завантажені дані по фонової передачі GPS треку.'"),,, "ТекущийАгентСообщить");
			КонецЕсли;
			ИмяФайлаФТП   = ФТППапка + ИмяФайла;
			ФайлЛокальный = КаталогТ + ИмяФайла;
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);
			Результат = Новый Файл(ФайлЛокальный); 
		КонецЕсли;  
	Исключение             
		Текст = НСтр("ru = 'Ошибка при скачивании файла с FTP-сервера. Возможная причина: отсутсвует папка агента (%1) на FTP-сервере. Данные от агента не загружены!'; uk = 'Помилка при скачуванні файлу з FTP-сервера. Можлива причина: відсутня папка агента (%1) на FTP-сервері. Дані від агента незавантажені!'");
		ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
		Текст = НСтр("ru = 'Папка на FTP-сервере будет создана автоматически при выгрузке данных из 1С:Предприятия на FTP-сервер.'; uk = 'Папка на FTP-сервері буде створена автоматично при вивантаженні даних з 1С:Підприємства на FTP-сервер.'");
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Результат = Неопределено;			
	КонецПопытки;   	
	
	//УДАЛЕНИЕ файла "To1C.*" на ФТП-сервере
	Попытка
		Если Результат <> Неопределено Тогда
			ПодключениеКФТП.Удалить(ФТППапка, "To1C.*");
		КонецЕсли;
	Исключение
		Текст = СтрШаблон_(НСтр("ru = 'Не удалось удалить файл ""To1C.zip"" на FTP-сервере. Причина: %1'; uk = 'Неможливо видалити файл ""To1C.zip"" на FTP-сервері. Причина: %1'"),
								ОписаниеОшибки());
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьФайлСФТП() 

// ПрограммныйИнтерфейс_ОбменДанными_ФТП
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными_СОД

//vd_181002 изменена логика и возвращаемое значение
// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
// 
Функция СОДЗагрузитьФайл()

	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);    // Каталог СОД.
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	//{{ЗАГРУЗКА фоновых GPS треков
	
	КаталогОбменаАгентаПолучитьИПроверить(КаталогОбменаАгента); //vd_180404 Баг 38208. ПроверкаПапки

	НайденныеФайлы = НайтиФайлы(КаталогОбменаАгента, "gps*.txt");
	
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//ЗАГРУЗИТЬ
		Попытка
			ЗагрузитьGPSФайлы(КаталогОбменаАгента, ФайлТрек.Имя);  
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось Загрузить файл трека: %1 по причине: %2'; uk = 'Неможливо Завантажити файл треку: %1 з причини: %2'"),
							 ФайлТрек.ПолноеИмя,ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛИТЬ ИЗ СОД
		Попытка
			УдалитьФайлы(ФайлТрек.ПолноеИмя);   				
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось Удалить файл трека: %1 по причине: %2'; uk = 'Неможливо Видалити файл треку: %1 з причини: %2'"),
							 ФайлТрек.ПолноеИмя,ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки; 
	КонецЦикла;
	
	//}}ЗАГРУЗКА фоновых GPS треков

	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Если ФайлАрхив = Неопределено И НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии(НСтр("ru = 'Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.'; uk = 'Завантажені тільки дані по фонової передачі GPS треку. Файл обміну даними відсутній.'"),,, "ТекущийАгентСообщить");
	ИначеЕсли НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии(НСтр("ru = 'Загружены данные по фоновой передачи GPS трека.'; uk = 'Завантажені дані по фонової передачі GPS треку.'"),,, "ТекущийАгентСообщить");
	КонецЕсли;
	
	Возврат ФайлАрхив;

КонецФункции

//vd_181002 Изменена логика и возвращаемое значение.
Функция КОЗагрузитьФайл()
	
	Каталог = КаталогВременныхФайловАгента(); // функция всегда возвращает корректный результат
	
	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Возврат ФайлАрхив;
	
КонецФункции

// Функция возвращает путь к каталогу обмена для агента, указанного в реквизите обработки ВыбНастройкиАгента.
// Если настройки не заданы или если не удалось создать каталог, возращает Неопределено.
// 
// Параметры:
//	СоздаватьКаталог - Булево - Если Истина, то каталог будет создан (если его нет), иначе каталог будет только проверен на существование.
//
Функция КаталогОбменаАгента(СоздаватьКаталог)

	Если ПустаяСтрока(КаталогОбмена) Тогда
		
		ОповеститьОСобытии(НСтр("ru = 'Не указан каталог обмена в ""Настройках обмена"".'; uk = 'Не вказаний каталог обміну в ""Налаштуваннях обміну"".'"), "ОшибкаНастройки");
		Результат = Неопределено;
		
	ИначеЕсли ПустаяСтрока(ВыбНастройкиАгента.КаталогОбмена) Тогда
		
		Текст = СтрШаблон_(НСтр("ru = 'Не указан каталог обмена для агента в ""Настройках агентов"", агент: %1'; uk = 'Не вказаний каталог обміну для агента в ""Налаштуваннях агентів"", агент:%1'"),
							Строка(ВыбНастройкиАгента.Сотрудник));
		ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
		Результат = Неопределено;
		
	ИначеЕсли Не СоздаватьКаталог Тогда // проверяем каталог на существование
		
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = СтрШаблон_(НСтр("ru = 'Не существует каталог ""%1"", указанный в настройках агента. '; uk = 'Не існує каталог ""% 1"", зазначений в налаштуваннях агента.'"),
								КаталогАгента);
			Если СпособОбмена = "АПСОД" Тогда
				Текст = Текст + НСтр("ru = 'Обновите файл настроек службы СОД в ""Настройках обмена"".'; uk = 'Оновлення файл настройок служби СОД в ""Налаштуваннях обміну"".'"); 
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгентСообщить");
			Результат = Неопределено;			
		КонецЕсли;
		
	Иначе // пытаемся создать каталог, если его нет.
		
		ПроверитьИСоздатьКаталог(КаталогОбмена);
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		ПроверитьИСоздатьКаталог(КаталогАгента);
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось создать каталог обмена для агента, каталог: %1'; uk = 'Не вдалося створити каталог обміну для агента, каталог: %1'"),
									КаталогАгента); 
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
			Результат = Неопределено;
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Процедура пытается получить каталог обмена данными для агента.
// Если попытка неудачная, то выводистя сообщение.
// Каталог вовзращается в параметре Каталог.
Процедура КаталогОбменаАгентаПолучитьИПроверить(Каталог)
	
	Каталог = КаталогОбменаАгента(Истина);
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Текст = НСтр("ru = 'Данные для агента не выгружены - не задан каталог обмена агента.'; uk = 'Дані для агентів не вивантажені - не заданий каталог обміну агента.'");
		ОповеститьОСобытии(Текст,,, "ТекущийАгентСообщить");
	КонецЕсли; 
	
КонецПроцедуры

// Загружает данные из файла обмена по данным из внешнего события.
// Содержимое массива мПараметры:
//	0-й - идентификатор МУ
//	1-й - псевдоним торгвого агента (владельца КПК)
//	2-й - директория обмена данными 
//	3-й - имя полученного с КПК файла с директорией
//	4-й - время сеанса
//	5-й - контрольная сумма полученного файла
Функция СОДЗагрузитьДанныеПоВнешнемуСобытию(мПараметры, ЗагрузитьВсеНастройки = Ложь) Экспорт
	
	стрИдМУ 	= мПараметры[0];
	Псевдоним 	= мПараметры[1];
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения", Ложь, Новый Массив);
	
	Если ЗагрузитьВсеНастройки Тогда
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
#Область ПроверкаСправочников

	Если Не ВременныеТаблицы.Свойство("МобильныеУстройства") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru='Не заполнен справочник мобильных устройств.';uk='Не заповнений довідник мобільних пристроїв.'"), Истина);
	КонецЕсли;
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда 
		ВывестиСообщение(СтррРезультат, НСтр("ru='Не заполнены настройки торговых агентов.';uk='Не заповнені налаштуванння торгових агентів.'"), Истина);
	КонецЕсли;
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
	идМУ = Новый УникальныйИдентификатор(стрИдМУ);
	ЭлементМУ = ВременныеТаблицы.МобильныеУстройства.Найти(идМУ, "ИдентификаторМУ");
	Если ЭлементМУ = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru='Не найдено мобильное устройство с идентификатором ""%1"".';uk='Не знайдено мобільний пристрій з ідентифікатором ""%1"".'"), стрИдМУ);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru='Проверьте настройки агентов и обновите файл настроек обмена СОД.';uk='Перевірте налаштування агентів і обновіть файл настройок обміну СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	ЭлементАгент = ВременныеТаблицы.НастройкиАгентов.Найти(ЭлементМУ.ID, "СсылкаМУ");
	Если ЭлементАгент = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru='Не найден агент для мобильного устройства с идентификатором ""%1"" (%2).';uk='Не вдалося знайти агента для мобільного пристрою з ідентифікатором ""%1"" (% 2).'"), стрИдМУ, ЭлементМУ.Наименование);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru='Проверьте настройки агентов и обновите файл настроек обмена СОД.';uk='Перевірте налаштування агентів і обновіть файл настройок обміну СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	КаталогОбменаИзСпрАгентов = СокрЛП(ЭлементАгент.КаталогОбмена);
	КаталогОбменаИзСОД = СокрЛП(мПараметры[2]);
	Если НРег(КаталогОбменаИзСпрАгентов) <> НРег(КаталогОбменаИзСОД) Тогда
		Текст = СтрШаблон_(НСтр("ru='По сведениям из настроек СОД поступили данные от агента ""%1"", папка: ""%2"".';uk='За відомостями з налаштувань СОД надійшли дані від агента ""%1"", папка: ""%2"".'"), Псевдоним, КаталогОбменаИзСОД);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		Текст = СтрШаблон_(НСтр("ru='По сведениям из настроек агентов указаны другие данные (агент ""%1"", папка: ""%2"")!';uk='За відомостями з налаштувань агентів вказані інші дані (агент ""%1"", папка: ""%2"")!'"), ЭлементАгент.Сотрудник, КаталогОбменаИзСпрАгентов);
		ВывестиСообщение(СтррРезультат, Текст);
		ВывестиСообщение(СтррРезультат, НСтр("ru='Папки обмена отличаются! Проверьте настройки агентов и обновите файл настроек обмена СОД.';uk='Папки обміну відрізняються! Перевірте налаштування агентів і обновіть файл настройок обміну СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;

// ПроверкаСправочников
#КонецОбласти 

	ЗагрузитьДанныеДляАгента(ЭлементАгент.Сотрудник);
	
	Возврат СтррРезультат;
	
КонецФункции

Функция СОДПопыткаСгенерироватьФайлНастройки() Экспорт

	СпособОбмена = ПрочитатьЗначениеНастройки("СпособОбмена");
	
	Если СпособОбмена = "АПСОД" Тогда
		Возврат СОДСгенерироватьФайлНастройки();
	Иначе
		мЗамечания = Новый Массив;
		ДобавитьЗамечание(мЗамечания, НСтр("ru='В настройках выключен способ обмена через Агент Плюс СОД';uk='В налаштуваннях вимкнений спосіб обміну через Агент Плюс СОД'"), "СпособОбмена");
		Возврат Новый Структура("Замечания", мЗамечания);
	КонецЕсли;

КонецФункции

// Добавляет сообщение в массив сообщений для будущего вывода на Клиенте.
Процедура ДобавитьЗамечание(мЗамечания, Описание, Реквизит)
	СтррЗамечание = Новый Структура("Описание,Реквизит", Описание, Реквизит);
	мЗамечания.Добавить(СтррЗамечание);
КонецПроцедуры

// Функция генерирует и возвращает текст файла настройки СОД.
// Предварительно проверяет зависимые настройки СОД.
// Фукнкция не проверяет существование папки обмена, т.к. запускается на Сервере.
Функция СОДСгенерироватьФайлНастройки() Экспорт
	
	СтррРезультат = Новый Структура;
	
	СтррЗначения = ПрочитатьЗначенияНастроек("НастройкиАгентов,МобильныеУстройства,СОДПорт,КаталогОбмена");
	
	ТЗНастройкиАгентов = СтррЗначения.НастройкиАгентов;
	ТЗМУ 			   = СтррЗначения.МобильныеУстройства;
	
#Область ПроверкаРеквизитовИСправочников
	// Проверяем значения настроек СОД и зависимых настроек
	мЗамечания = Новый Массив;
	
	Если ПустаяСтрока(СтррЗначения.КаталогОбмена) Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указано значение настройки ""Каталог обмена""!';uk='Не вказано значення настройки ""Каталог обміну""!'"), "КаталогОбмена");
	КонецЕсли;
	
	Если СтррЗначения.СОДПорт = 0 Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указан порт службы Агент Плюс СОД';uk='Не вказаний порт служби Агент Плюс СОД'"), "СОДПорт");
	КонецЕсли;
	
	СтррСтатус = СправочникАгентовПроверитьГотовность(ТЗНастройкиАгентов);
	Если Не СтррСтатус.Готов Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "НастройкиАгентов");
	КонецЕсли;
	
	СтррСтатус = СправочникМобильныхУстройствПроверитьГотовность(ТЗМУ);
	Если Не СтррСтатус.Готов Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "МобильныеУстройства");
	КонецЕсли;
	
	СтррРезультат.Вставить("Замечания", мЗамечания);
	
	Если мЗамечания.Количество() > 0 Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
// ПроверкаРеквизитовИСправочников
#КонецОбласти 
	
	ИдКонфигурации = ВРег(Строка(Новый УникальныйИдентификатор));
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Формат(СтррЗначения.СОДПорт, "ЧГ=0'") 
		+ """ ConfigID=""" + ИдКонфигурации + """ />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от мобильного устройства -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для мобильного устройства: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
	
	КоличествоАгентов  = 0;
	
	Для Каждого НастройкаАгента Из ТЗНастройкиАгентов Цикл
		
		Если НастройкаАгента.СтатусНастроек <> 1 Тогда // включаем только для агентов с зелеными галками - для неработающих агентов МУ от обмена отключаем
			Продолжить;
		КонецЕсли;
		
		СсылкаМУ = НастройкаАгента.СсылкаМУ;
		МУ = ТЗМУ.Найти(СсылкаМУ, "ID");
		
		Если МУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдМУ 		= ВРег(Строка(МУ.ИдентификаторМУ));
		Псевдоним 	= СокрЛП(Строка(НастройкаАгента.Сотрудник)) + " (" + СокрЛП(МУ.Наименование) + ")";
		Каталог		= НастройкаАгента.КаталогОбмена;
		
		Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдМУ + """ PSEUDONIM=""" + Лев(Псевдоним, 60) + """ DIRECTORY=""" + Каталог + """ />");
		КоличествоАгентов = КоличествоАгентов + 1;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("</APlusServer>");
	
	ПолноеИмяФайла = ДополнитьСлешВПуть(СтррЗначения.КаталогОбмена) + "config.xml";
	
	СтррРезультат.Вставить("Текст", 			Текст);
	СтррРезультат.Вставить("Кодировка", 		КодировкаТекста.UTF16);
	СтррРезультат.Вставить("ПолноеИмяФайла", 	ПолноеИмяФайла);
	СтррРезультат.Вставить("КоличествоАгентов", КоличествоАгентов);
	
	Возврат СтррРезультат;
	
КонецФункции // СгенерироватьФайлНастройкиСОД

// ПрограммныйИнтерфейс_ОбменДанными_СОД
#КонецОбласти

// Преобразует исходную строку в транслит.
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	
	Результат = "";
	
	Буквы = "аa,бb,вv,гg,дd,еe,ёe,жzh,зz,иi,йy,кk,лl,мm,нn,оo,пp,рr,сs,тt,уu,фf,хkh,цts,чch,шsh,щshch,ъ,ыy,ь,эe,юyu,яya,";
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если КодСимвола(Символ) < 128 Тогда
			СимволЛатиницей = Символ;
		Иначе
			ПозНачала = Найти(Буквы, НРег(Символ)); // Поиск соответствия без учета регистра.			
			Если ПозНачала = 0 Тогда
				// Другие символы остаются "как есть".
				СимволЛатиницей = Символ;
			Иначе
				ПозНачала = ПозНачала + 1;
				ПозКонца = ПозНачала;
				Пока Сред(Буквы, ПозКонца, 1) <> "," Цикл
					ПозКонца = ПозКонца + 1;
				КонецЦикла;
				СимволЛатиницей = Сред(Буквы, ПозНачала, ПозКонца - ПозНачала);
				Если Символ = ВРег(Символ) Тогда
					СимволЛатиницей = ВРег(СимволЛатиницей); // восстанавливаем регистр
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция сокращает слово до N символов. Слово передается латиницей.
Функция СократитьСлово(Слово, МаксДлина)
	
	Длина = СтрДлина(Слово);
	Если Длина <= МаксДлина Тогда
		Возврат Слово;
	КонецЕсли;
	
	Результат = Лев(Слово, МаксДлина - 1); // пытаемся последним символом добавить согласную букву
	Для Поз = МаксДлина По Длина Цикл
		Символ = Сред(Слово, Поз, 1);
		Если 0 = Найти("aeiou", Символ) Тогда // согласная буква
			Результат = Результат + Символ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) <> МаксДлина Тогда
		Результат = Лев(Слово, МаксДлина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает уникальное название для имени файла на основе переданного имени.
// Если в переданном имени есть несколько слов, то функция стремится первые три слова включить в название по правилу:
// первые 4 символа - от первого слова + по одному символу от второго и третьего слова (т.е. сокращение от фамилии и инициалов).
// 
// Параметры:
//	Название - Строка - исходная строка, на основании которой генерировать название.
//	мЗапретныеНазвания - Массив - массив названий для проверки на уникальность.
//
Функция ПреобразоватьВНазваниеКаталога(Знач Название, мЗапретныеНазвания)
	
	Название = НРег(СтрокаЛатиницей(СокрЛП(Название)));
	
	ИсключаемыеСимволы = ",;:?!-+\/=<>~'""@#$%^&*()[]{}|&"; // запрещенные символы в названии имен файлов
	ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
	Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
		ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
		Название = СтрЗаменить(Название, ИсключитьСимвол, "");
	КонецЦикла;
	
	Название = СокрЛП(СтрЗаменить(Название, ".", " ")); // заменяем точки на пробелы
	
	// исключаем идущие подряд пробелы
	ПрежнееНазвание = Неопределено;
	Пока Название <> ПрежнееНазвание Цикл
		ПрежнееНазвание = Название;
		Название = СтрЗаменить(Название, "  ", " ");
	КонецЦикла;
	
	Если ПустаяСтрока(Название) Тогда
		Название = "folder";
	ИначеЕсли СтрДлина(Название) < 6 Тогда
		Название = Лев(Название + "_fldr", 6);
	Иначе
		мСлова = СтрРазделить_(Название, " ");
		Если мСлова.Количество() > 1 Тогда // название из 2 и более слов
			Название = СократитьСлово(мСлова[0], 4) + Лев(мСлова[1], 1) + ?(мСлова.Количество() > 2, Лев(мСлова[2], 1), "") + "_fldr";
		КонецЕсли;
		Название = Лев(Название, 6);		
	КонецЕсли;
	
	ПрежнееНазвание = Название;
	Номер = 1;
	Пока мЗапретныеНазвания.Найти(Название) <> Неопределено Цикл
		Название = ПрежнееНазвание + Строка(Номер);
		Номер = Номер + 1;
	КонецЦикла;
	
	Возврат Название;
	
КонецФункции

// Функция генерирует имя папки 
Функция ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СсылкаМУ, тзМУ)
	
	Результат = "";	
	Идентификатор = Неопределено;

	стзМУ = тзМУ.Найти(СсылкаМУ, "ID");
	Если стзМУ = Неопределено Тогда // ошибка - МУ с идентификатором СсылкаМУ не найдено
	ИначеЕсли ЗначениеЗаполнено(стзМУ.ИдентификаторМУ) Тогда
		Идентификатор = стзМУ.ИдентификаторМУ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Результат = НРег(СтрЗаменить(Строка(Идентификатор), "-" ,""));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Название каталога, которое интерпретируется как автоматически генерируемое.
Функция НазваниеАвтоКаталога() Экспорт
	
	Возврат НСтр("ru='Авто';uk='авто'");
	
КонецФункции

// Процедура заполняет названия каталогов агентов уникальными значениями.
Процедура ЗаполнитьНазванияКаталоговАгентов() Экспорт

	мНазванияКаталогов = НастройкиАгентов.ВыгрузитьКолонку("КаталогОбмена");
	АвтоКаталог = НРег(НазваниеАвтоКаталога());
	ИменаПодкаталоговНаОсновеФИО = ПрочитатьЗначениеНастройки("ИменаПодкаталоговОбменаНаОсновеФИО");
	Если ИменаПодкаталоговНаОсновеФИО = Неопределено Тогда
		ИменаПодкаталоговНаОсновеФИО = Ложь;
	КонецЕсли; 
	
	Если Не ИменаПодкаталоговНаОсновеФИО Тогда
	    тзМУ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТипЗнч(тзМУ) <> Тип("ТаблицаЗначений") Тогда // МУ еще нет в БД, задать каталоги не можем
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТ Из НастройкиАгентов Цикл
		Если ПустаяСтрока(СтрокаТ.КаталогОбмена) Или СокрЛП(НРег(СтрокаТ.КаталогОбмена)) = АвтоКаталог Тогда
			Если ИменаПодкаталоговНаОсновеФИО Тогда // название каталога на основе ФИО
				СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталога(СтрокаТ.Сотрудник.Наименование, мНазванияКаталогов);
			Иначе // 
			    СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СтрокаТ.СсылкаМУ, тзМУ);
			КонецЕсли; 
			мНазванияКаталогов.Добавить(СтрокаТ.КаталогОбмена);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ПрограммныйИнтерфейс_ОбменДанными
#КонецОбласти

// Возвращает настройки агента.
Функция ПолучитьНастройкиАгента(Агент)

	ТЗ = ВременныеТаблицы.НастройкиАгентов;
	СтрокаТ = ТЗ.Найти(Агент, "Сотрудник");
	Если СтрокаТ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращает настройки агента. В отличии от функции ПолучитьНастройкиАгента() читает данные сразу из временного хранилища.
Функция ПолучитьНастройкиАгентаИзВХ(Агент, стрРеквизиты = Неопределено) Экспорт

	Результат = Неопределено;
	
	ТЗ = ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		СтрокаТ = ТЗ.Найти(Агент, "Сотрудник");
		Если СтрокаТ <> Неопределено Тогда
			Если стрРеквизиты = Неопределено Тогда
				Результат = Новый Структура;
				Для Каждого Колонка Из ТЗ.Колонки Цикл
					Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
				КонецЦикла;
			Иначе
				Результат = Новый Структура(стрРеквизиты);
				Для Каждого ЭлементСтруктуры Из Результат Цикл
					Результат[ЭлементСтруктуры.Ключ] = СтрокаТ[ЭлементСтруктуры.Ключ];
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НастройкиДляТекущегоАгента() Экспорт
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(ВыбАгент);
	стррРезультат = Новый Структура("ВыбНастройкиАгента,Организации", ВыбНастройкиАгента, ОрганизацииВыгрузки());
	Возврат стррРезультат;
	
КонецФункции

Функция ЗапросыОбновления()

	Если Не ВременныеТаблицы.Свойство("ЗапросыМобильныхУстройств") Тогда // значит статусы контрагентам не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.ЗапросыМобильныхУстройств;
	КонецЕсли;
	
КонецФункции // ЗапросыОбновления()

#Область ДополнительныеРеквизиты

Функция ИмяСвойстваДокументШирота()
	Возврат "АгентПлюсДокументШирота";
КонецФункции 

Функция ИмяСвойстваДокументДолгота() 
	Возврат "АгентПлюсДокументДолгота";
КонецФункции 

Функция ИмяСвойстваДокументВремяНачала()
	Возврат "АгентПлюсДокументВремяНачала";
КонецФункции 

Функция ИмяСвойстваДокументВремяОкончания()
	Возврат "АгентПлюсДокументВремяОкончания";
КонецФункции 

Функция ИмяСвойстваШиротаКонтрагент() Экспорт
	Возврат "АгентПлюсШиротаКонтрагент";
КонецФункции 

Функция ИмяСвойстваДолготаКонтрагент() Экспорт
	Возврат "АгентПлюсДолготаКонтрагент";
КонецФункции 

Функция ИмяСвойстваАдресИзСервисаКонтрагент() Экспорт
	Возврат "АгентПлюсАдресИзСервиса";
КонецФункции 

Функция ДополнительноеСвойствоПоНаименованию(ИмяСвойства) Экспорт

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	Возврат Свойство;
	
КонецФункции 

Функция ТипСвойстваКоординатыGPS()
	Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
КонецФункции 

Функция ПроверитьДополнительныеРеквизитыСправочникаКонтрагенты() Экспорт

	ствРеквизиты = Новый Соответствие;
	ствРеквизиты.Вставить(ИмяСвойстваШиротаКонтрагент(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваДолготаКонтрагент(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваАдресИзСервисаКонтрагент(), 0);
	
	Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.НаборСвойств) Тогда
			Наименование = Выборка.Наименование;
			Значение = ствРеквизиты.Получить(Наименование);
			Если Значение <> Неопределено Тогда
				ствРеквизиты[Наименование] = Значение + 1;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	СтрДубли  = "";	
	СтрПустые = "";

	Для каждого Элемент Из ствРеквизиты Цикл
		Если Элемент.Значение > 1 Или Элемент.Значение = 0 Тогда
			Если Элемент.Значение > 1 Тогда
				СтрДубли  = СтрДубли  + ?(СтрДубли  = "", "", ", ") + Элемент.Ключ + " (" + Строка(Элемент.Значение) + ")";
			Иначе
				СтрПустые = СтрПустые + ?(СтрПустые = "", "", ", ") + Элемент.Ключ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	мСообщения = Новый Массив;
	
	Если Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() = Ложь Тогда
		Текст = НСтр("ru = 'Выключен режим ""Использовать дополнительные реквизиты и сведения"" - координаты контрагентов не сохранятся. Перейдите в ""Общие настройки"" 1С:Предприятия и выберите флажок ""Использовать дополнительные реквизиты и сведения"".'; uk = 'Вимкнений режим ""Використовувати додаткові реквізити і відомості"" - координати контрагентів не збережуться. Перейдіть в ""Загальні налаштування"" 1С:Підприємства і виберіть прапорець ""Використовувати додаткові реквізити і відомості"".'");
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрДубли <> "" Тогда
		Текст = НСтр("ru = 'В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" указаны дубли названий реквизитов:'; uk = 'В об''єкті ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" вказані дублі назв реквізитів:'");
		Текст = Текст + ?(СтрДлина(СтрДубли) > 30, Символы.ПС, " ") + СтрДубли + "." + Символы.ПС + НСтр("ru = 'Удалите лишние реквизиты!'; uk = 'Видаліть зайві реквізити!'");
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрПустые <> "" Тогда
		Текст = НСтр("ru = 'В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" не указаны реквизиты:'; uk = 'В об''єкті ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" не вказані реквізити:'");
		Текст = Текст + ?(СтрДлина(СтрПустые) > 30, Символы.ПС, " ") + СтрПустые + "." + Символы.ПС + НСтр("ru = 'Создайте недостающие реквизиты!'; uk = 'Створіть відсутні реквізити!'");
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки,Сообщения", мСообщения.Количество() <> 0, мСообщения);

КонецФункции

Процедура СоздатьДополнительныеРеквизитыДокументов() Экспорт
	//УНФ
	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваДокументШирота();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, НСтр("ru = 'МУ: Широта'; uk = 'МП: Широта'"), 
			ТипСвойстваКоординатыGPS(), НСтр("ru='Географическая широта места создания документа';uk='Географічна широта місця створення документа'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументДолгота();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, НСтр("ru = 'МУ: Долгота'; uk = 'МП: Довгота'"), 
			ТипСвойстваКоординатыGPS(), НСтр("ru='Географическая долгота места создания документа';uk='Географічна довгота місця створення документа'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументВремяНачала();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, НСтр("ru = 'МУ: Время начала'; uk = 'МП: Час початку'"), 
			ТипСвойства, НСтр("ru='Время начала работы с документом в МУ';uk='Час початку роботи з документом в МП'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументВремяОкончания();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, НСтр("ru = 'МУ: Время окончания'; uk = 'МП: Час закінчення'"), 
			ТипСвойства, НСтр("ru='Время окончания работы с документом в МУ';uk='Час закінчення роботи з документом в МП'"));
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДополнительныеРеквизитыСправочников() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваШиротаКонтрагент();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru='Географическая широта местоположения (в формате NMEA)';uk='Географічна широта місця розташування (в форматі NMEA)'");
		СоздатьДополнительныйРеквизитКонтрагента(ИмяСвойства, "Широта", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДолготаКонтрагент();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru='Географическая долгота местоположения (в формате NMEA)';uk='Географічна довгота місця розташування (в форматі NMEA)'");
		СоздатьДополнительныйРеквизитКонтрагента(ИмяСвойства, "Долгота", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваАдресИзСервисаКонтрагент();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(128));
		Подсказка = НСтр("ru='Адрес, полученный из веб-сервиса определения координат';uk='Адреса, отриманий з веб-сервісу визначення координат'");
		СоздатьДополнительныйРеквизитКонтрагента(ИмяСвойства, "Адрес из веб-сервиса", ТипСвойства, Подсказка);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)
	
	//Унф
	//справка http://unf4you.ru/publ/kakim_obrazom_v_programme_1s_unf_realizovana_ordernaja_skhema_ucheta_tovarov/1-1-0-35
	//аналог Документ_ПриходныйКассовыйОрдер в УНФ является два документа ПоступлениеВКассу + ПриходныйОрдер, нас интерисует ПоступлениеВКассу, тк ПриходныйОрдер это документ для учета движения товаров по складу 
	//аналог Документ_РасходныйКассовыйОрдер в УНФ является два документа РасходИзКассы + РасходныйОрдер, нас интерисует РасходИзКассы	
	
	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Истина, Подсказка);
	
	мНаборы = Новый Массив;
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеВКассу); //унф мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриходныйКассовыйОрдер);  
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасходИзКассы); //унф мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасходныйКассовыйОрдер); 
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасходнаяНакладная); //унф в ут нет, в унф добавим

	Для Каждого НаборСсылка Из мНаборы Цикл
		ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент);
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьДополнительныйРеквизитКонтрагента(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)
	
	//++УНФ
	//НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Ложь, Подсказка);
	//НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие;
	//ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент)
	
	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Ложь, Подсказка);
	НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент)
	//--
	
КонецПроцедуры

Процедура ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, Элемент)

	НаборОбъект = НаборСсылка.ПолучитьОбъект();
	
	Если Элемент.ЭтоДополнительноеСведение Тогда
		
		НовоеСвойство = НаборОбъект.ДополнительныеСведения.Добавить();
		НовоеСвойство.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоСведений, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоСведений = Число(СтароеКоличество) + 1;
		
	Иначе	
		
		НовыйРеквизит = НаборОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоРеквизитов, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоРеквизитов = Число(СтароеКоличество) + 1;
		
	КонецЕсли; 
	
	//Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		НаборОбъект.Используется = Истина;	
	//КонецЕсли; 
	
	НаборОбъект.Записать();

КонецПроцедуры

Функция ДанныеОДополнительныхСвойствахДокументаДляМУ()

	Если гДанныеОДополнительныхСвойствахДокументаДляМУ = Неопределено Тогда
	
		стррДанные = Новый Структура("тзРеквизиты,стзШирота,стзДолгота,стзВремяНачала,стзВремяОкончания");
		
		тзРеквизиты = Новый ТаблицаЗначений;
		тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		тзРеквизиты.Колонки.Добавить("Значение");
		
		стррДанные.тзРеквизиты = тзРеквизиты;
		
		СтрокаТ = тзРеквизиты.Добавить();	
		СтрокаТ.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());
		стррДанные.стзШирота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
		стррДанные.стзДолгота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
		стррДанные.стзВремяНачала = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
		стррДанные.стзВремяОкончания = СтрокаТ;
		
		гДанныеОДополнительныхСвойствахДокументаДляМУ = стррДанные;
		
	КонецЕсли; 
	
	Возврат гДанныеОДополнительныхСвойствахДокументаДляМУ;

КонецФункции  

// Запись дополнительных свойств документа.
Процедура ЗаписатьДополнительныеСвойстваДокумента(ДокументСсылка, стррЗначения)
	
	стррДанные = ДанныеОДополнительныхСвойствахДокументаДляМУ();
	
	стррДанные.стзШирота.Значение  			= стррЗначения.Широта;
	стррДанные.стзДолгота.Значение 			= стррЗначения.Долгота;
	стррДанные.стзВремяНачала.Значение 		= стррЗначения.ВремяНачала;
	стррДанные.стзВремяОкончания.Значение 	= стррЗначения.ВремяОкончания;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокументСсылка, стррДанные.тзРеквизиты);	

КонецПроцедуры

// ДополнительныеРеквизиты
#КонецОбласти

Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт

	Попытка
		Возврат ПолучитьМакет(ИмяМакета);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#Область ВнешняяОбработка

Функция СведенияОВнешнейОбработке() Экспорт
	
	//унф
	
	стррРегистрация = Новый Структура;
	стррРегистрация.Вставить("Вид", 			"ДополнительнаяОбработка");	
	стррРегистрация.Вставить("Назначение", 		Неопределено);
	стррРегистрация.Вставить("Наименование", 	НСтр("ru = 'Обмен данными с ''Агент Плюс: Мобильной торговлей'''; uk = 'Обмін даними з ''Агент Плюс: Мобільної торгівлею'''"));
	стррРегистрация.Вставить("Версия", 			ВерсияОбработки());
	стррРегистрация.Вставить("БезопасныйРежим", Ложь);
	стррРегистрация.Вставить("Информация", 		НСтр("ru='Обработка обмена данными с приложением ''Агент Плюс: Мобильная торговля'''"));
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Представление", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор", 	Новый ОписаниеТипов("Строка"));

	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "ОткрытьОтчет";
	стзКоманд.Представление = НСтр("ru = 'Обмен данными с ''Агент Плюс: Мобильной торговлей'''; uk = 'Обмін даними з ''Агент Плюс: Мобільної торгівлею'''");
	стзКоманд.Использование = "ОткрытиеФормы";
	стзКоманд.ПоказыватьОповещение = Истина;	
	
	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "Загрузить";
	стзКоманд.Представление = НСтр("ru = 'Загрузить данные из ''Агент Плюс: Мобильной торговли'''; uk = 'Обмін данімі з ''Агент Плюс: мобільної торгівлею'''");
	стзКоманд.Использование = "ВызовСерверногоМетода";
	стзКоманд.ПоказыватьОповещение = Истина;	

	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "Выгрузить";
	стзКоманд.Представление = НСтр("ru = 'Выгрузить данные в ''Агент Плюс: Мобильную торговлю'''; uk = 'Вивантажити дані в ''Агент Плюс: Мобільну торгівлю'''");
	стзКоманд.Использование = "ВызовСерверногоМетода";
	стзКоманд.ПоказыватьОповещение = Истина;	

	стррРегистрация.Вставить("Команды", тзКоманд);

	Возврат стррРегистрация;
	
	//РегистрационныеДанные = Новый Структура;
	//РегистрационныеДанные.Вставить("Наименование", "Обмен данными с 'Агент Плюс: Мобильной торговлей'");
	//РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	//РегистрационныеДанные.Вставить("Версия", ВерсияОбработки());
	//РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	//РегистрационныеДанные.Вставить("Информация", "Обработка обмена данными с приложением 'Агент Плюс: Мобильная торговля'");

	//тзКоманд = Новый ТаблицаЗначений;
	//тзКоманд.Колонки.Добавить("Идентификатор");
	//тзКоманд.Колонки.Добавить("Представление");
	//тзКоманд.Колонки.Добавить("Модификатор");
	//тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	//тзКоманд.Колонки.Добавить("Использование");

	//стзКоманд = тзКоманд.Добавить();
	//стзКоманд.Идентификатор = "ОткрытьОтчет";
	//стзКоманд.Представление = "Обмен данными с 'Агент Плюс: Мобильной торговлей'";
	//стзКоманд.Использование = "ОткрытиеФормы";
	//стзКоманд.ПоказыватьОповещение = Истина;	
	//
	////стзКоманд = тзКоманд.Добавить();
	////стзКоманд.Идентификатор = "Загрузить";
	////стзКоманд.Представление = "Загрузить данные";
	////стзКоманд.Использование = "ВызовСерверногоМетода";
	////стзКоманд.ПоказыватьОповещение = Истина;	

	////стзКоманд = тзКоманд.Добавить();
	////стзКоманд.Идентификатор = "Выгрузить";
	////стзКоманд.Представление = "Выгрузить данные";
	////стзКоманд.Использование = "ВызовСерверногоМетода";
	////стзКоманд.ПоказыватьОповещение = Истина;	

	//РегистрационныеДанные.Вставить("Команды", тзКоманд);

	//Возврат РегистрационныеДанные;
	
КонецФункции

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения = Неопределено) Экспорт

	// Общие действия перед началом выполнения команд.
	УстановитьПривилегированныйРежим(Истина);

	//Диспетчеризация обработчиков команд.
	Если ИмяКоманды = "Загрузить" Тогда
		ЗагрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда
		ВыгрузитьДанные(Неопределено);
	КонецЕсли;

КонецПроцедуры

// Возвращает номер версии обработки. Номер версии обработки указывается в синониме обработки в круглых скобках.
Функция ВерсияОбработки() Экспорт
	
	Комментарий = Метаданные().Комментарий;
	ПозНачала = Найти(Комментарий, "(");
	ПозКонца  = Найти(Комментарий, ")");
	
	Если ПозНачала = 0 Или ПозКонца = 0 Тогда
		ВызватьИсключение(НСтр("ru='В Комментарии обработки в метаданных не указана версия обработки! Версия должна указываться в круглых скобках!';uk='В Коментарі обробки в метаданих не зазначена версія обробки! Версія повинна вказуватися в круглих дужках!'"));
	КонецЕсли;
	
	Результат = ИзвлечьВерсию(Сред(Комментарий, ПозНачала+1, ПозКонца - ПозНачала - 1));
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьВерсию(стрВерсия)
	
	Результат = "";
	МаксИндекс = стрДлина(стрВерсия);
	
	Для Индекс = 1 По МаксИндекс Цикл
		Символ = Сред(стрВерсия, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код > 45 И Код < 58 И Код <> 47  Тогда
			Результат = Результат + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Пока Лев(стрВерсия, 1) = "."  Цикл
		Результат = Сред(стрВерсия, 2);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// ВнешняяОбработка
#КонецОбласти

#Область ПрограммныйИнтерфейс_ПланПосещений

Функция ПланПосещенийНомерПунктаВнеПлана() Экспорт
	Возврат 99999;
КонецФункции

// Функция возвращает таблицу плана посещений, сгенерированную из "Cписка торговых точек", переданного в параметре.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Период - СтандартныйПериод - период отчета
//  	СсылкаСписокТТ  - Строка или УникальныйИдентификатор - идентификатор списка торговых точек
//  
// Возвращаемое значение:
//  ТаблицаЗначений, в структуре стррПараметры возвращается свойство "ВсегоДней" - сколько дней в таблице плана посещений.
//  
Функция ПолучитьПланПосещенийДляОтчета(стррПараметры) Экспорт

	стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стррПараметры.СсылкаСписокТТ);
	
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	
	Если Не стррПараметры.Свойство("ИгнорироватьОтсутствиеПлана") Или стррПараметры.ИгнорироватьОтсутствиеПлана = Ложь Тогда
		Если стррОбъект = Неопределено Тогда
		    ВызватьИсключение(НСтр("ru = 'Не найден список торговых точек с идентификатором: '; uk = 'Не вдалося знайти список торгових точок з ідентифікатором: '") + стррПараметры.СсылкаСписокТТ);
		КонецЕсли; 
	КонецЕсли; 
	
	Период = стррПараметры.Период;	
	ВсегоДней = (НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала)) / 86400 + 1;			
	
	Если стррОбъект <> Неопределено Тогда 
		
		СписокБезПланаИГрафика = Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП);
		
		ПериодПлана = стррОбъект.ПериодГрафикаПлана;
		
		ПромДатаНачала = ?(ПериодПлана = 7, НачалоНедели(Период.ДатаНачала), стррОбъект.ДатаНачала); // дата начала плана посещений
		РазницаДней = (Период.ДатаНачала - ПромДатаНачала) / 86400;
		
	КонецЕсли;
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗРезультат.Колонки.Добавить("Адрес", 		ТипСтрока);
	ТЗРезультат.Колонки.Добавить("НомерВПлане",	ТипЧисло); // номер строки в ТЗ "Состав" списка ТТ
	
	стррПараметры.Вставить("ВсегоДней", ВсегоДней);
	
	Для День = 1 По ВсегоДней Цикл
		ТЗРезультат.Колонки.Добавить("Д" + День, ТипСтрока);  // факт посещения
		ТЗРезультат.Колонки.Добавить("П" + День, ТипЧисло); // план посещения (порядковые номера посещения, если заданы)
	КонецЦикла;
	
	Если стррОбъект = Неопределено Тогда
		
		Возврат ТЗРезультат;
		
	КонецЕсли; 
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	тзСостав = стррОбъект.Состав;	
	
	Если ИспользуетсяПП Тогда // Детализация списка ТТ по плану посещения
		
		СмещениеОтНачалаПлана = РазницаДней % ПериодПлана; // количество дней от начала плана для вывода первого дня в отчете		
		
		тзПланПосещений = стррОбъект.ПланПосещений;
		тзПланПосещений.Сортировать("Контрагент,День");

		ТекКонтрагент = Неопределено;
		
		Для каждого СтрокаТ Из тзПланПосещений Цикл
			Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
				Продолжить; 					  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
			КонецЕсли; 
			Если СтрокаТ.Контрагент <> ТекКонтрагент Тогда
				ТекКонтрагент = СтрокаТ.Контрагент;				
				стзРезультат = ТЗРезультат.Добавить();
				стзРезультат.Контрагент = ТекКонтрагент;
				стзСостав = тзСостав.Найти(ТекКонтрагент, "Контрагент");
				стзРезультат.НомерВПлане = ?(стзСостав = Неопределено, НомерВнеПлана, тзСостав.Индекс(стзСостав));
			КонецЕсли;
			НомерДня = СтрокаТ.День - СмещениеОтНачалаПлана;
			НормироватьПоМодулю(НомерДня, ПериодПлана);
			Пока НомерДня <= ВсегоДней Цикл // цикл занесения дней в план с учетом, что период отчета может быть больше циклического периода плана
				стзРезультат["П" + НомерДня] = СтрокаТ.Порядок;
				НомерДня = НомерДня + ПериодПлана;
			КонецЦикла; 
		КонецЦикла;
		
		ТЗРезультат.Сортировать("НомерВПлане,Контрагент");		
		
	ИначеЕсли ИспользуетсяГрафик Тогда // Детализация списка ТТ по графику посещения
		  // Графики указаны в таблице тзСостав
		Пункт = Неопределено;
		Для каждого стзСостав Из тзСостав Цикл
			стррГрафик = стзСостав.График;
			Если стррГрафик = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			стррПункты = стррГрафик.Пункты;
			Если стррПункты = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПериодГрафика = стррГрафик.ПериодГрафика;
			СмещениеОтНачалаГрафика = РазницаДней % ПериодГрафика; // количество дней от начала графика для вывода первого дня в отчете					
			стзРезультат = ТЗРезультат.Добавить();
			стзРезультат.Контрагент = стзСостав.Контрагент;
			стзРезультат.НомерВПлане = тзСостав.Индекс(стзСостав);
			Для НомерДня = 1 По ВсегоДней Цикл
				ДеньГрафика = НомерДня + СмещениеОтНачалаГрафика;
				НормироватьПоМодулю(ДеньГрафика, ПериодГрафика);
				Если стррПункты.Свойство("П"+Строка(ДеньГрафика-1), Пункт) И Пункт.Выбран Тогда // пункты в графике нумеруются с 0
					стзРезультат["П" + НомерДня] = 1000; // признак включения дня в план посещений
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла
		
	Иначе // список ТТ без плана и графика, просто переносим контрагентов
		
		Для каждого стзСостав Из тзСостав Цикл
			стзРезультат = ТЗРезультат.Добавить();
			стзРезультат.Контрагент = стзСостав.Контрагент;
		КонецЦикла
		
	КонецЕсли;
	
	Возврат ТЗРезультат;
	
КонецФункции

// Функция возвращает факты посещений (т.е. документы, созданные при посещении ТТ) в виде таблицы значений.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Агент - СправочникСсылка.Пользователи - агент, документы которого считать фактами посещений.
//  	Период - СтандартныйПериод - период отчета
//		День - ДатаВремя - дата формирования отчета (указывается, если нет свойства "Период").
//		ТолькоПроведенныеДокументы - Булево - признак включать / не включать проведенные документы в таблицу.
//		списокВидыДокументов - СписокЗначений - список видов документов для получения фактов.
//  
// Возвращаемое значение:
//  ТаблицаЗначений.
//  
Функция ПолучитьФактПосещенийДляОтчета(стррПараметры) Экспорт

		Текст = " 
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект
		|ПОМЕСТИТЬ ДокументыСоСведениями
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоВремяНачала
		|	И ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК ДАТА) МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Агент КАК Агент,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Дата КАК Дата
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходныйКассовыйОрдер.Подотчетник КАК Агент,
		|		ПриходныйКассовыйОрдер.Контрагент КАК Контрагент,
		|		ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|		ПриходныйКассовыйОрдер.Дата КАК Дата
		|	ИЗ
		|		Документ.ПоступлениеВКассу КАК ПриходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ПриходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ПоступлениеВКассу 
		|		И ПриходныйКассовыйОрдер.Подотчетник = &Агент
		//|		ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ПриходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдер.Подотчетник КАК Агент,
		|		РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
		|		РасходныйКассовыйОрдер.Ссылка,
		|		РасходныйКассовыйОрдер.Дата
		|	ИЗ
		|		Документ.РасходИзКассы КАК РасходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РасходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РасходИзКассы 
		|		И РасходныйКассовыйОрдер.Подотчетник = &Агент 
		//|		РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РасходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ответственный КАК Агент,
		|		РеализацияТоваровУслуг.Контрагент Как Контрагент,
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.Дата
		|	ИЗ
		|		Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РеализацияТоваровУслуг.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РасходнаяНакладная 
		|		И РеализацияТоваровУслуг.Ответственный = &Агент
		//|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РеализацияТоваровУслуг.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВозвратТоваровОтКлиента.Ответственный КАК Агент,
		|		ВозвратТоваровОтКлиента.Контрагент КАК Контрагент,
		|		ВозвратТоваровОтКлиента.Ссылка,
		|		ВозвратТоваровОтКлиента.Дата
		|	ИЗ
		|		Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ВозвратТоваровОтКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ПриходнаяНакладная 
		|		И ВозвратТоваровОтКлиента.Ответственный = &Агент 
		//|		ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ВозвратТоваровОтКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
		|	И ВозвратТоваровОтКлиента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказКлиента.Ответственный КАК Агент,
		|		ЗаказКлиента.Контрагент КАК Контрагент,
		|		ЗаказКлиента.Ссылка,
		|		ЗаказКлиента.Дата
		|	ИЗ
		|		Документ.ЗаказПокупателя КАК ЗаказКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ЗаказКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ЗаказПокупателя 
		|		И ЗаказКлиента.Ответственный = &Агент 
		//|		ЗаказКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ЗаказКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ЗаказКлиента.ПометкаУдаления
		|	) КАК ВложенныйЗапрос
		|; 
		|	
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Агент,
		|	Документы.Контрагент,
		|	Документы.Дата,
		|	Документы.Ссылка КАК Ссылка,
		|	СведенияШирота.Значение КАК Широта,
		|	СведенияДолгота.Значение КАК Долгота,
		|	СведенияВремяНачала.Значение КАК ВремяНачала,
		|	СведенияВремяОкончания.Значение КАК ВремяОкончания
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияШирота
		|		ПО Документы.Ссылка = СведенияШирота.Объект	И СведенияШирота.Свойство = &СвойствоШирота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияДолгота
		|		ПО Документы.Ссылка = СведенияДолгота.Объект И СведенияДолгота.Свойство = &СвойствоДолгота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяНачала
		|		ПО Документы.Ссылка = СведенияВремяНачала.Объект И СведенияВремяНачала.Свойство = &СвойствоВремяНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяОкончания
		|		ПО Документы.Ссылка = СведенияВремяОкончания.Объект И СведенияВремяОкончания.Свойство = &СвойствоВремяОкончания
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Контрагент
		|";
		
		
		
	Если стррПараметры.Свойство("ДобавитьВремяПосещения") И стррПараметры.ДобавитьВремяПосещения = Истина Тогда
		Текст = Текст + ", СведенияВремяНачала.Значение";
	КонецЕсли; 
		   
	Запрос = Новый Запрос(Текст);			   
	Запрос.УстановитьПараметр("Агент", 					 	стррПараметры.Агент);
	Запрос.УстановитьПараметр("ТолькоПроведенныеДокументы", стррПараметры.ТолькоПроведенныеДокументы);
	Если стррПараметры.Свойство("Период") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", 	стррПараметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода",  	стррПараметры.Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(стррПараметры.Дата));
		Запрос.УстановитьПараметр("КонецПериода",  	КонецДня(стррПараметры.Дата));
	КонецЕсли; 
	
	СвойствоШирота  		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());	
	СвойствоДолгота 		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
	СвойствоВремяНачала    	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
	СвойствоВремяОкончания	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
	
	Запрос.УстановитьПараметр("СвойствоШирота",  		СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота",  		СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоВремяНачала", 	СвойствоВремяНачала);
	Запрос.УстановитьПараметр("СвойствоВремяОкончания", СвойствоВремяОкончания);
	
	мВидыДокументов = Новый Массив;
	мВидыДокументов.Добавить("ПоступлениеВКассу");
	мВидыДокументов.Добавить("РасходИзКассы");
	мВидыДокументов.Добавить("РасходнаяНакладная");
	мВидыДокументов.Добавить("ПриходнаяНакладная");
	мВидыДокументов.Добавить("ЗаказПокупателя");
	
	списокВидыДокументов = стррПараметры.СписокВидыДокументов;
	Для Каждого ВидДокумента Из мВидыДокументов Цикл
		Запрос.УстановитьПараметр(ВидДокумента, списокВидыДокументов.НайтиПоЗначению(ВидДокумента) <> Неопределено);
	КонецЦикла;

	тзФакт = Запрос.Выполнить().Выгрузить();
	
	// проверяем - нужно ли учесть факты посещений по виртуальным документам?
	ПолучитьФактПоВиртуальнымДокументам = Ложь;
	Для каждого Элемент Из списокВидыДокументов Цикл
		Если ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
			ПолучитьФактПоВиртуальнымДокументам = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФактПоВиртуальнымДокументам Тогда
		ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(тзФакт, стррПараметры);
	КонецЕсли; 
	
	Возврат тзФакт;
		   
КонецФункции

Процедура ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(тзФакт, стррПараметры)
	
	тзФакт.Колонки.Добавить("СсылкаВДок"); // ссылка на виртуальный документ
	стррПоиск = Новый Структура;
	стррПоиск.Вставить("Сотрудник", стррПараметры.Агент);
	Если стррПараметры.ТолькоПроведенныеДокументы Тогда
		стррПоиск.Вставить("Статус", 1); // у проведенных документов значение статуса = 1
	КонецЕсли; 
	
	Если стррПараметры.Свойство("Период") Тогда
		ДатаНачала    = стррПараметры.Период.ДатаНачала;
		ДатаОкончания = стррПараметры.Период.ДатаОкончания;
	Иначе
		ДатаНачала    = НачалоДня(стррПараметры.Дата);
		ДатаОкончания = КонецДня(стррПараметры.Дата);
	КонецЕсли; 
	
	списокВидыДокументов = стррПараметры.СписокВидыДокументов;
	Для каждого Элемент Из списокВидыДокументов Цикл
		ВидДокумента = Элемент.Значение;
		Если ВДокЭтоВиртуальныйДокумент(ВидДокумента) Тогда
			тзЖурнала = ВОЗагрузитьТЗ(ВидДокумента, Истина);
			мСтроки = тзЖурнала.НайтиСтроки(стррПоиск);
			Для каждого СтрокаТ Из мСтроки Цикл
				Если СтрокаТ.ВремяНачала >= ДатаНачала И СтрокаТ.ВремяНачала <= ДатаОкончания Тогда
					стзФакт = тзФакт.Добавить();
					ЗаполнитьЗначенияСвойств(стзФакт, СтрокаТ);
					стзФакт.СсылкаВДок = Новый Структура("ID,ВидДокумента,Проведен,ПометкаУдаления", 
						СтрокаТ.ID, ВидДокумента, СтрокаТ.Статус = 1, СтрокаТ.Статус = 2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает таблицу значений плана-факта посещений.
//	
//	Параметры:
//	
//	стррПараметры - Структура - структура со свойствами:
//  	Агент, Период, СсылкаСписокТТ, ТолькоПроведенныеДокументы, списокВидыДокументов, ПронумероватьФактыПосещений - описание см. в комментариях 
//		к функциям ПолучитьПланПосещенийДляОтчета() и ПолучитьФактПосещенийДляОтчета().
//		
Функция ПолучитьПланФактПосещений(стррПараметры) Экспорт
	
	тзПланПосешений = ПолучитьПланПосещенийДляОтчета(стррПараметры); // используются свойства: Период, СсылкаСписокТТ, создается свойство ВсегоДней 
	тзФактПосещений = ПолучитьФактПосещенийДляОтчета(стррПараметры); // используются свойства: Период, Агент, ТолькоПроведенныеДокументы, списокВидыДокументов
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	ДатаНачала = стррПараметры.Период.ДатаНачала;
	
	//{{vd_180319 Доработка gi_180307
	
	ДопустимаяУдаленностьОтТТ = Неопределено;
	стррПараметры.Свойство("ДопустимаяУдаленностьОтТТ", ДопустимаяУдаленностьОтТТ);
	Если Не ЗначениеЗаполнено(ДопустимаяУдаленностьОтТТ) Тогда
		ДопустимаяУдаленностьОтТТ = 0;
	КонецЕсли;
	
	Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // нужно проверять расстояние от места создания до торговой точки
		мКонтрагенты = тзПланПосешений.ВыгрузитьКолонку("Контрагент");
		ТекКонтрагент = Неопределено;
		Для каждого стзФакт Из тзФактПосещений Цикл
			Если мКонтрагенты.Найти(стзФакт.Контрагент) = Неопределено Тогда
				мКонтрагенты.Добавить(стзФакт.Контрагент);
			КонецЕсли; 
		КонецЦикла; 
		тзКоординатыКонтрагентов = ПолучитьТЗКоординатКонтрагентов(мКонтрагенты);
	КонецЕсли; 
	
	тзФактПосещений.Колонки.Добавить("ЕстьПосещение", Новый ОписаниеТипов("Булево")); // признак - посещение сделано в ТТ или вне ТТ	
	
	//}}vd_180319 Доработка gi_180307
	
	ТекКонтрагент = Неопределено;
	
	Для каждого стзФакт Из тзФактПосещений Цикл
		ТекКонтрагент = стзФакт.Контрагент;
		стзПлан = тзПланПосешений.Найти(ТекКонтрагент, "Контрагент");
		Если стзПлан = Неопределено Тогда
			стзПлан = тзПланПосешений.Добавить();
			стзПлан.Контрагент 	= ТекКонтрагент;
			стзПлан.НомерВПлане = НомерВнеПлана;
		КонецЕсли;
		
		//(( vd_180319 Доработка gi_180307
		ТТПосещена = Истина; // признак, что торговая точка посещена
		Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // проверяем расстояние от места создания до торговой точки
			Если ЗначениеЗаполнено(стзФакт.Широта) И ЗначениеЗаполнено(стзФакт.Долгота) И СокрЛП(стзФакт.Широта) <> "-" Тогда // известны координаты места создания документа
				стзКоординаты = тзКоординатыКонтрагентов.Найти(ТекКонтрагент, "Ссылка");
				Если стзКоординаты <> Неопределено Тогда // известны координаты ТТ
					Расстояние = РасстояниеМеждуТочкамиNMEA(стзКоординаты, стзФакт);
					Если Расстояние > ДопустимаяУдаленностьОтТТ Тогда
						ТТПосещена = Ложь;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		//)) vd_180319 Доработка gi_180307
		
		ВремяНачала = ?(ЗначениеЗаполнено(стзФакт.ВремяНачала),	стзФакт.ВремяНачала, стзФакт.Дата);
		НомерДня = (НачалоДня(ВремяНачала) - ДатаНачала) / 86400 + 1;
		стрВремяНачала    = Формат(ВремяНачала, "ДФ=""HH:mm""");
		стрВремяОкончания = Формат(?(ЗначениеЗаполнено(стзФакт.ВремяОкончания), стзФакт.ВремяОкончания, ВремяНачала), "ДФ=""HH:mm""");
		стрТекИнтервал = стзПлан["Д" + НомерДня];
		
		//(( vd_180319 Доработка gi_180307
		// В строке времени пребывания в ТТ (переменная стрТекИнтервал) указывается время в виде "ЧЧ:ММ - ЧЧ:ММ" для документов, созданных в ТТ,
		// и указывается время в виде "ЧЧ:ММ* - ЧЧ:ММ*" для документов, созданных вне ТТ.
		// Если в посещении есть оба варианта создания документов (в ТТ и вне ТТ), то 
		Если ТТПосещена Тогда // документ создан в ТТ
			Если Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала есть время из документа, созданного вне ТТ
				стрТекИнтервал = "";
			КонецЕсли; 
			Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
				стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
				стрТекВремяОкончания = Прав(стрТекИнтервал, 5);
				стзПлан["Д" + НомерДня] = 
					?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) 
					+ " - " 
					+ ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания);
			Иначе
				стзПлан["Д" + НомерДня] = стрВремяНачала + " - " + стрВремяОкончания;
			КонецЕсли;
		Иначе // документ создан вне ТТ
			Если Не ЗначениеЗаполнено(стрТекИнтервал) Или Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала можно укзаать время из документа, созданного вне ТТ
				Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
					стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
					стрТекВремяОкончания = Сред(стрТекИнтервал, СтрДлина(стрТекИнтервал) - 5 + 1, 5);
					стзПлан["Д" + НомерДня] = 
						?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) 
						+ "* - " 
						+ ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания) + "*";
				Иначе
					стзПлан["Д" + НомерДня] = стрВремяНачала + "* - " + стрВремяОкончания + "*";
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		//))vd_180319 Доработка gi_180307
		
		стзФакт.ЕстьПосещение = ТТПосещена;
		
	КонецЦикла;
	
	Если стррПараметры.Свойство("ПронумероватьФактыПосещений") И стррПараметры.ПронумероватьФактыПосещений = Истина Тогда
		ДобавитьНомераФактовПосещений(тзПланПосешений, стррПараметры.ВсегоДней);
	КонецЕсли;
	
	тзПланПосешений.Сортировать("НомерВПлане,Контрагент");
	
	ДобавитьАдресаКонтрагентов(тзПланПосешений);
	
	Если стррПараметры.Свойство("ДобавитьКоординатыКонтрагентов") И стррПараметры.ДобавитьКоординатыКонтрагентов = Истина Тогда
		ДобавитьКоординатыКонтрагентов(тзПланПосешений);
	КонецЕсли; 
	
	Если стррПараметры.Свойство("ВернутьФактПосещений") И стррПараметры.ВернутьФактПосещений = Истина Тогда
		стррПараметры.Вставить("тзФактПосещений", тзФактПосещений);
	КонецЕсли; 

	Возврат тзПланПосешений;
	
КонецФункции

#Область ПрограммныйИнтерфейс_ПланПосещений_РасчетРасстояний

//vd_180319 Доработка gi_180307
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 a = 6378137.0; // Основные полуоси 
	 b = 6356752.314245; // Неосновные полуоси 
	 e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 f = 0.003352810664747; // Выравнивание эллипсоида 

	 fdLambda = (StartLong - EndLong) * D2R; 
	 fdPhi = (StartLat - EndLat) * D2R; 
	 fPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2)); 
	 fRho = (a * (1 - e2)) / Pow(fTemp, 1.5); 
	 fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean)))); 

	 // Вычисляем угловое расстояние 
	 fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2)); 

	 fz = 2 * ASin(fz); 

	 // Вычисляем смещение 
	 fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	 
	Если fAlpha > 1 Тогда
		fAlpha = 1;
	ИначеЕсли fAlpha < -1 Тогда
		fAlpha = -1;
	КонецЕсли;
	
	 fAlpha = ASin(fAlpha); 

	 // Вычисляем радиус Земли 
	 fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (fz * fR); 
	 
	Возврат Distance;
	
КонецФункции

//vd_180319 Доработка gi_180307
Функция РасстояниеМеждуТочкамиNMEA(Точка1, Точка2)
	
	Шрт1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Широта));
	Шрт2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Широта));
	Длг1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Долгота));
	Длг2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Долгота));
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

//vd_180319 Доработка gi_180307
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

//vd_180319 Доработка gi_180307
Функция СтрокуВЧисло(Строка)
	
	СтрРезультат = "";
	
	БылаТочка = Ложь;
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Или Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
		ИначеЕсли Не БылаТочка И Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
			БылаТочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылаТочка Тогда
		СтрРезультат = "0" + СтрРезультат + "0"; // чтобы корректно обработалось число вида ".x" или "x."
	КонецЕсли; 
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат));
	
КонецФункции

//vd_180319 Доработка gi_180307
Функция ЗначениеВЧисло(Значение)
	
	Строка = СтрЗаменить(Значение, ",", ".");
	
	Возврат ?(ЗначениеЗаполнено(Строка), СтрокуВЧисло(Строка), 0);
	
КонецФункции

#КонецОбласти 


// Функция циклически приводит число Значение в число в диапазоне [1; Модуль]
Процедура НормироватьПоМодулю(Значение, Модуль)
	Если Значение < 1 Тогда
		Значение = Значение + Модуль * Цел((Модуль - Значение) / Модуль);
	ИначеЕсли Значение > Модуль Тогда
		Значение = Значение % Модуль;
		Если Значение = 0 Тогда
			Значение = Модуль;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Функция возвращает структуру с основными свойствами списка торговых точек, закрепленного за агентом.
// В свойстве ТекстОшибки возвращается описание ошибки (если возникла ошибка).
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, ДляПоляВыбора = Истина) Экспорт 

	стррРезультат = Новый Структура("ТекстОшибки,КодОшибки,НаименованиеСписокТТ,СсылкаСписокТТ,ИспользуетсяДляПланированияСписокТТ,ИспользоватьПорядокСписокТТ");
	
	стррРезультат.НаименованиеСписокТТ = "";
	стррРезультат.ИспользоватьПорядокСписокТТ = Ложь;
	
	стррРеквизиты = ПолучитьНастройкиАгентаИзВХ(Агент, "СсылкаСписокТТ");
	Если стррРеквизиты = Неопределено Тогда
		
		стррРезультат.КодОшибки = "НетНастроекАгента";		
		Текст = НСтр("ru='Не найдено настроек для торгового агента. Проверьте настройки агента [подсказка].';uk='Не знайдено налаштувань для торгового агента. Перевірте налаштування агента [подсказка].'");
		
	ИначеЕсли Не ЗначениеЗаполнено(стррРеквизиты.СсылкаСписокТТ) Тогда
		
		стррРезультат.КодОшибки = "НеУказанСТТ";		
		Текст = НСтр("ru='У торгового агента не указан ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].';uk='У торгового агента не вказано ""Перелік торгових точок"". Задайте список торгових точок для агента [подсказка].'");
		
	Иначе
		стррРезультат.СсылкаСписокТТ = стррРеквизиты.СсылкаСписокТТ;
		стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стррРеквизиты.СсылкаСписокТТ);
		Если стррОбъект = Неопределено Тогда
			
			стррРезультат.КодОшибки = "ОшибкаСсылкиСТТ";			
			Текст = НСтр("ru='У торгового агента указан несуществующий ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].';uk='У торгового агента вказано неіснуючий ""Перелік торгових точок"". Задайте список торгових точок для агента [подсказка].'");
			
		Иначе
			стррРезультат.НаименованиеСписокТТ = стррОбъект.Наименование;
			Если стррОбъект.Состав.Количество() = 0 Тогда
				
				стррРезультат.КодОшибки = "УказанПустойСТТ";				
				Текст = НСтр("ru='У торгового агента указан пустой ""Список торговых точек"". Укажите заполненный список торговых точек для агента [подсказка].';uk='У торгового агента вказано порожній ""Перелік торгових точок"". Вкажіть заповнений список торгових точок для агента [подсказка].'");
				
			Иначе
				стррРезультат.ИспользуетсяДляПланированияСписокТТ = СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект);
				Если стррРезультат.ИспользуетсяДляПланированияСписокТТ Тогда
					
					стррРезультат.ИспользоватьПорядокСписокТТ = стррОбъект.ИспользоватьПорядок;
					
				Иначе
					
					стррРезультат.КодОшибки = "ДетализацияСТТБезПланаГрафика";
					Текст = НСтр("ru='У торгового агента указан ""Список торговых точек"" без детализации по ""Графику"" или ""Плану посещений"". Укажите для агента список торговых точек с одним из указанных вариантов детализации [подсказка].';uk='У торгового агента вказано ""Перелік торгових точок"" без деталізації по ""Графіку"" або ""Плану відвідувань"". Вкажіть для агента список торгових точок з одним із зазначених варіантів деталізації [подсказка].'");
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Текст <> "" Тогда
		Если ДляПоляВыбора Тогда
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, "[подсказка]", НСтр("ru='(для этого нажмите кнопку ""Открыть"" справа от агента)';uk='(Для цього натисніть кнопку ""Відкрити"" праворуч від агента)'"));
		Иначе
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, " [подсказка]", "");
		КонецЕсли; 
	КонецЕсли; 
	 
	Возврат стррРезультат;

КонецФункции

Процедура ДобавитьАдресаКонтрагентов(ТЗ)
	
	//унф все изменили
	
	мКонтрагенты = ТЗ.ВыгрузитьКолонку("Контрагент");
	Если мКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТ Из ТЗ Цикл
		СтрокаТ.Адрес = ПолучитьАдресКонтрагента(СтрокаТ.Контрагент);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет номер факта посещений. Сортировка ТЗ меняется!
// В таблицу добавляются колонки вида НФ<N>, где N - номер дня в плане. В колонках указываются порядковые номера посещений ТТ.
Процедура ДобавитьНомераФактовПосещений(ТЗ, ВсегоДней)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Для Индекс = 1 По ВсегоДней Цикл
		ТЗ.Колонки.Добавить("НФ" + Строка(Индекс), ТипЧисло);
	КонецЦикла; 		

	Для Индекс = 1 По ВсегоДней Цикл
		стрИндекс = Строка(Индекс);
		КолонкаФакта = "Д" + Строка(Индекс);
		КолонкаНФ = "НФ" + Строка(Индекс);
		НомерФакта = 0;
		ТЗ.Сортировать(КолонкаФакта);
		Для каждого СтрокаТ Из ТЗ Цикл
			Если Не ПустаяСтрока(СтрокаТ[КолонкаФакта]) Тогда
				НомерФакта = НомерФакта + 1;
				СтрокаТ[КолонкаНФ] = НомерФакта;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьКоординатыКонтрагентов(ТЗ)
	
	мКонтрагенты = ТЗ.ВыгрузитьКолонку("Контрагент");
	тзКоординаты = ПолучитьТЗКоординатКонтрагентов(мКонтрагенты);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 4);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТЗ.Колонки.Добавить("Широта", ТипЧисло);
	ТЗ.Колонки.Добавить("Долгота", ТипЧисло);
	Для Каждого СтрокаТ Из тзКоординаты Цикл
		сТЗ = ТЗ.Найти(СтрокаТ.Ссылка, "Контрагент");
		Если сТЗ <> Неопределено Тогда
			сТЗ.Широта  = СтрокаТ.Широта;
			сТЗ.Долгота = СтрокаТ.Долгота;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ПланПосещений
#КонецОбласти 


#Область ПрограммныйИнтерфейс_КартыСервер

Функция ПолучитьКоординатыКонтрагента(Контрагент, стррКоординаты) Экспорт
	
	мКонтрагенты = Новый Массив;
	мКонтрагенты.Добавить(Контрагент);
	тз = ПолучитьТЗКоординатКонтрагентов(мКонтрагенты);
	Если тз.Количество() = 0 Тогда
		стррКоординаты.Широта  = 0;
		стррКоординаты.Долгота = 0;
		Возврат Ложь;
	Иначе
		стррКоординаты.Широта  = тз[0].Широта;
		стррКоординаты.Долгота = тз[0].Долгота;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьТЗКоординатКонтрагентов(мКонтрагенты) Экспорт
	
	//унф все переделано на контрагентов
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Контрагенты.Ссылка,
	        |	СвойстваДолготы.Долгота,
	        |	СвойстваШироты.Широта,
	        |	СвойстваАдреса.Адрес
	        |ИЗ
	        |	Справочник.Контрагенты КАК Контрагенты
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			КонтрагентыДополнительныеРеквизиты.Ссылка КАК Контрагент,
	        |			КонтрагентыДополнительныеРеквизиты.Значение КАК Широта
	        |		ИЗ
	        |			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	        |		ГДЕ
	        |			КонтрагентыДополнительныеРеквизиты.Свойство = &СвойствоШирота) КАК СвойстваШироты
	        |		ПО (СвойстваШироты.Контрагент = Контрагенты.Ссылка)
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			КонтрагентыДополнительныеРеквизиты.Ссылка КАК Контрагент,
	        |			КонтрагентыДополнительныеРеквизиты.Значение КАК Долгота
	        |		ИЗ
	        |			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	        |		ГДЕ
	        |			КонтрагентыДополнительныеРеквизиты.Свойство = &СвойствоДолгота) КАК СвойстваДолготы
	        |		ПО (СвойстваДолготы.Контрагент = Контрагенты.Ссылка)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			КонтрагентыДополнительныеРеквизиты.Ссылка КАК Контрагент,
	        |			КонтрагентыДополнительныеРеквизиты.Значение КАК Адрес
	        |		ИЗ
	        |			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	        |		ГДЕ
	        |			КонтрагентыДополнительныеРеквизиты.Свойство = &СвойствоАдрес) КАК СвойстваАдреса
	        |		ПО (СвойстваАдреса.Контрагент = Контрагенты.Ссылка)
	        |ГДЕ
	        |	Контрагенты.Ссылка В(&мКонтрагенты)";
		
	СвойствоШирота  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаКонтрагент());	
	СвойствоДолгота = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаКонтрагент());
	СвойствоАдрес   = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваАдресИзСервисаКонтрагент());
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("СвойствоШирота",  СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота", СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоАдрес",   СвойствоАдрес);
	Запрос.УстановитьПараметр("мКонтрагенты", 	 мКонтрагенты);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьВебКаталогИконок() Экспорт

	Возврат "http://www.agentplus.ru/tmp/configs/map/"; //"http://www.agentplus.ru/download/1CModules/8/8.2/11/icons/";

КонецФункции

//vd_181001 Перенесена из УНФ_UA и доработано до УНФ не украины.
Функция ПолучитьКонтрагентаКомпанииАгентПлюс(ОбновитьДанные = Ложь) Экспорт

	Если гКонфигурация = "УНФ_UA" Тогда
		//1
		ИмяПоискаКонтрагента = "Агент Софт (Службовий)";
		Результат = Справочники.Контрагенты.НайтиПоНаименованию(ИмяПоискаКонтрагента, Истина);
		//2
		Если Не ЗначениеЗаполнено(Результат) Тогда //проверить на других языках интерфейсов
			ИмяПоискаКонтрагента = "Агент Софт (Служебный)";
			Результат = Справочники.Контрагенты.НайтиПоНаименованию(ИмяПоискаКонтрагента, Истина);
		КонецЕсли;
	    //3
		Если Не ЗначениеЗаполнено(Результат) Тогда	//Поиск по старому наименованию
			ИмяПоискаКонтрагента = "Агент Плюс (Службовий)";
			Результат = Справочники.Контрагенты.НайтиПоНаименованию(ИмяПоискаКонтрагента, Истина); 
		КонецЕсли;
	    //4
		Если Не ЗначениеЗаполнено(Результат) Тогда //проверить на других языках интерфейсов
			ИмяПоискаКонтрагента = "Агент Плюс (Служебный)";
			Результат = Справочники.Контрагенты.НайтиПоНаименованию(ИмяПоискаКонтрагента, Истина);
		КонецЕсли;
	Иначе
		//1
		ИмяПоискаКонтрагента = "Агент Плюс (Служебный)";
		Результат = Справочники.Контрагенты.НайтиПоНаименованию(ИмяПоискаКонтрагента, Истина);
	КонецЕсли;
	
	Если гКонфигурация = "УНФ_UA" Тогда
		стрИмяКомпании = "Агент Софт";
	Иначе
		стрИмяКомпании = "Агент Плюс";	
	КонецЕсли;   
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ИмяКонтрагента = СтрШаблон_(НСтр("ru = '%1 (Служебный)'; uk = '%1 (Службовий)'"),
										стрИмяКомпании);	
		Элемент = Справочники.Контрагенты.СоздатьЭлемент();
		Элемент.Наименование 		= ИмяКонтрагента;
		Элемент.НаименованиеПолное 	= ИмяКонтрагента; 
		Элемент.Комментарий  		= СтрШаблон_(НСтр("ru = 'Контрагент, использующийся для работы с ПО ""%1"". Создан автоматически.'; uk = 'Контрагент, що використовують для роботи з ПЗ ""%1"". Створений автоматично. '"),
													стрИмяКомпании);
		
		Элемент.ВидКонтрагента 		= Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		// Значения по умолчанию.
		Элемент.СчетУчетаРасчетовСПокупателем 	= ПланыСчетов.Управленческий.РасчетыСПокупателями;
		Элемент.СчетУчетаАвансовПокупателя		= ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		Элемент.СчетУчетаРасчетовСПоставщиком 	= ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		Элемент.СчетУчетаАвансовПоставщику 		= ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		Если Не ЗначениеЗаполнено(Элемент.Ответственный) Тогда
			Элемент.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Элемент.ГруппаДоступа) Тогда
			Элемент.ГруппаДоступа = Справочники.ГруппыДоступаКонтрагентов.ГруппаДоступаПоУмолчанию();
		КонецЕсли;		
		Элемент.Записать();
		Результат = Элемент.Ссылка;
		//Записать контактные данные для контрагента
		Элемент.КонтактноеЛицо = ЗаписатьДанныеКонтактныхЛицАгентПлюс(Результат);
		Элемент.Записать();
	Иначе
		Если ОбновитьДанные Тогда
			ИмяКонтрагента = СтрШаблон_(НСтр("ru = '%1 (Служебный)'; uk = '%1 (Службовий)'"),
										стрИмяКомпании);	
			Элемент = Результат.ПолучитьОбъект();
			Элемент.Наименование 		= ИмяКонтрагента;
			Элемент.НаименованиеПолное  = ИмяКонтрагента; 
			Элемент.Комментарий  		= СтрШаблон_(НСтр("ru = 'Контрагент, использующийся для работы с ПО ""%1"". Создан автоматически.'; uk = 'Контрагент, що використовують для роботи з ПЗ ""%1"". Створений автоматично. '"),
													стрИмяКомпании);
		    Элемент.Записать();
		КонецЕсли; 
		//Проверить контактные данные для контрагента
		ЗаписатьДанныеКонтактныхЛицАгентПлюс(Результат, ОбновитьДанные);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

//vd_181001 Перенесена из УНФ_UA
Функция ЗаписатьДанныеКонтактныхЛицАгентПлюс(ТекКонтрагент, ОбновитьДанные = Ложь) Экспорт

	Если гКонфигурация = "УНФ_UA" Тогда
		//1
		ИмяПоискаКЛ = "Служба технічної підтримки ""Агент Софт"""; 	
		Результат = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяПоискаКЛ,Истина,,ТекКонтрагент);
		//2
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ИмяПоискаКЛ = "Служба технической поддержки ""Агент Софт"""; 	
			Результат = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяПоискаКЛ,Истина,,ТекКонтрагент);
		КонецЕсли;
		//3
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ИмяПоискаКЛ = "Служба технічної підтримки ""Агент Плюс"""; 	
			Результат = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяПоискаКЛ,Истина,,ТекКонтрагент);
		КонецЕсли;	
		//4
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ИмяПоискаКЛ = "Служба технической поддержки ""Агент Плюс"""; 	
			Результат = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяПоискаКЛ,Истина,,ТекКонтрагент);
		КонецЕсли;
	Иначе
		ИмяПоискаКЛ = "Служба технической поддержки ""Агент Плюс"""; 	
		Результат = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяПоискаКЛ,Истина,,ТекКонтрагент);
	КонецЕсли;
	
	Если гКонфигурация = "УНФ_UA" Тогда
		стрИмяКомпании = "Агент Софт";
	Иначе
		стрИмяКомпании = "Агент Плюс";	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ИмяКЛ = СтрШаблон_(НСтр("ru = 'Служба технической поддержки ""%1""'; uk = 'Служба технічної підтримки ""%1""'"),
								стрИмяКомпании);
		
		Элемент = Справочники.КонтактныеЛица.СоздатьЭлемент();  
		Элемент.Заполнить(ТекКонтрагент);
		Элемент.Наименование = ИмяКЛ;
		Элемент.Комментарий = СтрШаблон_(НСтр("ru = 'Служба технической поддержки %1 (Служебный). Создан автоматически.'; uk = 'Служба технічної підтримки %1 (Службовий). Створений автоматично.'"),
											стрИмяКомпании);
		НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(Элемент, Ложь);
		
		
		Элемент.КонтактнаяИнформация.Очистить();
		//Телефон
		Если гКонфигурация = "УНФ_UA" Тогда
			ТелефонПредставление = Нстр("ru = '+38(048)7017116'; uk = '+38(048)7017116'");
		Иначе
			ТелефонПредставление = Нстр("ru = '8 (800) 505-18-23 или +7 (495) 287-69-31'; uk = '8 (800) 505-18-23 или +7 (495) 287-69-31'");
		КонецЕсли;
		ВидКИ_ТелефонКЛ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ТелефонЗначенияПолей = КонтактнаяИнформацияУНФВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ТелефонПредставление, ВидКИ_ТелефонКЛ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Элемент, ТелефонЗначенияПолей, ВидКИ_ТелефонКЛ, Перечисления.ТипыКонтактнойИнформации.Телефон);
		//электронная почта
		Если гКонфигурация = "УНФ_UA" Тогда
			ЭППредставление = Нстр("ru = 'support-ua@agentplus.com.ua'; uk = 'support-ua@agentplus.com.ua'");
		Иначе
			ЭППредставление = Нстр("ru = 'support@agentplus.ru'; uk = 'support@agentplus.ru'");
		КонецЕсли;			
		ВидКИ_ЭлектроннаяПочтаКЛ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ЭПЗначенияПолей 		 = КонтактнаяИнформацияУНФВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ЭППредставление, ВидКИ_ЭлектроннаяПочтаКЛ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Элемент, ЭПЗначенияПолей, ВидКИ_ЭлектроннаяПочтаКЛ, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		// Запись объекта
		Элемент.Записать();
		
		Результат = Элемент.Ссылка;
		
	ИначеЕсли ОбновитьДанные Тогда
		
		ИмяКЛ = СтрШаблон_(НСтр("ru = 'Служба технической поддержки ""%1""'; uk = 'Служба технічної підтримки ""%1""'"),
								стрИмяКомпании);
		Элемент = Результат.ПолучитьОбъект();  
		Элемент.Заполнить(ТекКонтрагент);
		Элемент.Наименование = ИмяКЛ;
		Элемент.Комментарий = СтрШаблон_(НСтр("ru = 'Служба технической поддержки %1 (Служебный). Создан автоматически.'; uk = 'Служба технічної підтримки %1 (Службовий). Створений автоматично.'"),
								стрИмяКомпании);
		Элемент.Записать();
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


// ПрограммныйИнтерфейс_КартыСервер
#КонецОбласти 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область РеквизитыОбъекта

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1");
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита[ИмяРеквизита] <> "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1";
	
КонецФункции

// Функция возвращает название реквизита, найденного среди реквизитов метаданных объекта.
// Ищутся названия реквизитов, указанных в параметре стрРеквизиты.
// Если ни один из реквизитов не найден, возвращается Неопределено.
Функция РеквизитОбъектаИзСписка(МетаданныеОбъекта, стрРеквизиты) Экспорт
	
	Результат = Неопределено;
	
	мРеквизиты = СтрРазделить_(стрРеквизиты);
	мтдРеквизиты = МетаданныеОбъекта.Реквизиты;
	Для Каждого стрРеквизит Из мРеквизиты Цикл
		Если мтдРеквизиты.Найти(стрРеквизит) <> Неопределено Тогда
			Результат = стрРеквизит;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Функция возвращает значение реквизита объекта с учетом конфигурации (например, когда
// в разных версиях конфигураций реквизит называется по-разному).
Функция РеквизитОбъекта(ИмяРеквизита)
	
	Значение = гКэшРеквизитыОбъектов.Получить(ИмяРеквизита);
	
	Если Значение = Неопределено Тогда
		
		Если ИмяРеквизита = "Спр_Пользователи_Подразделение" Тогда
			Реквизиты = Метаданные.Справочники.Пользователи.Реквизиты;
			Если Реквизиты.Найти("ТекущееПодразделение") <> Неопределено Тогда
				Значение = "ТекущееПодразделение";
			ИначеЕсли Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Значение = "Подразделение";
			Иначе
				ВызватьИсключение("Не удалось найти реквизит для объекта: " + ИмяРеквизита);
			КонецЕсли;
		Иначе
			ВызватьИсключение("Функция РеквизитОбъекта(), неизвестный параметр = " + ИмяРеквизита);
			
		КонецЕсли;
		
		гКэшРеквизитыОбъектов.Вставить(ИмяРеквизита, Значение);		
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// РеквизитыОбъекта
#КонецОбласти 

#Область ПреобразованияЦветСтрока

Функция ЦветВСтроку(Цвет)
	
	Возврат СтрЗаменить(Строка(Цвет), " ", "");
	
КонецФункции

Функция ЦветИзСтроки(Знач СтрЦвет)
	
	Если СтрЧислоВхождений(СтрЦвет, ",") <> 2 Тогда // неверный формат значения в СтрЦвет
		СтрЦвет = "0,0,0";
	КонецЕсли;
	
	мЦвета = СтрРазделить_(СтрЦвет, ",");
	
	Красный = СтрокуВЧислоЦвета(мЦвета[0]);
	Зеленый = СтрокуВЧислоЦвета(мЦвета[1]);
	Синий   = СтрокуВЧислоЦвета(мЦвета[2]);
	
	Возврат Новый Цвет(Красный, Зеленый, Синий);
	
КонецФункции

Функция СтрокуВЧислоЦвета(Строка)
	
	СтрРезультат = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			СтрРезультат = СтрРезультат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат) % 256);
	
КонецФункции

// ПреобразованияЦветСтрока
#КонецОбласти 

#Область ПроверкаФайлов

Функция КаталогСуществует(ПутьККаталогу)
	
	ОбъектКаталог = Новый Файл(ПутьККаталогу);
	Возврат ОбъектКаталог.Существует() И ОбъектКаталог.ЭтоКаталог();
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу)
	
	ФайлОбъект = Новый Файл(ПутьКФайлу);
	Возврат ФайлОбъект.Существует();
	
КонецФункции

// Проверяет существование каталога, если он не существует, то создается новый.
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу, ПроверитьПослеСоздания = Ложь)

	Если Не КаталогСуществует(ПутьККаталогу) Тогда
		Попытка
			СоздатьКаталог(ПутьККаталогу);
			Если ПроверитьПослеСоздания Тогда
				Возврат КаталогСуществует(ПутьККаталогу);
			КонецЕсли;
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось создать папку по пути: ""%1"".'; uk = 'Не вдалося створити папку шляхом: ""%1"".'")
								, ПутьККаталогу)
				+ Символы.ПС + НСтр("ru = 'Проверьте права доступа к папке и всем подпапкам на %1-сервере.'; uk = 'Перевірте права доступу до папки і всім підпапках на %1-сервері.'");
			Если ЭтоLinuxСервер() Тогда
				Текст = СтрШаблон_(Текст, "Linux");
			Иначе
				Текст = СтрШаблон_(Текст, "Windows");
			КонецЕсли; 
			ВызватьИсключение(Текст);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Применяется только для сервера.
Функция ДополнитьСлешВПуть(Каталог, Слеш = Неопределено) Экспорт

	Если Слеш = Неопределено Тогда
		Слеш = ?(ЭтоLinuxСервер(), "/", "\");
	КонецЕсли; 
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

// Функция возвращает имя файла обработки
Функция ИмяФайлаОбработки() Экспорт

	//унф используется в регламентных заданиях
	
	Возврат Метаданные().Имя + ".epf";

КонецФункции 


// ПроверкаФайлов
#КонецОбласти

#Область КаталогиМодуля

Функция КаталогВременныхФайловАгента()

	Результат = КаталогВременныхФайлов() + "AP20TMP";
	ПроверитьИСоздатьКаталог(Результат);
	
	Результат = ДополнитьСлешВПуть(Результат) + ВыбНастройкиАгента.КаталогОбмена;
	ПроверитьИСоздатьКаталог(Результат);
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "") Экспорт
	
	Каталог = КаталогВременныхФайлов() + "APtmp";
	Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
	Если Не Результат Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось создать временный каталог для обмена данными: '; uk = 'Не вдалося створити тимчасовий каталог для обміну даними: '") + Каталог);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		Каталог = ДополнитьСлешВПуть(Каталог) + Подкаталог;
		Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
		Если Не Результат Тогда
			ВызватьИсключение(НСтр("ru = 'Не удалось создать временный подкаталог для обмена данными: '; uk = 'Не вдалося створити тимчасовий підкаталог для обміну даними: '") + Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(Каталог);
	
КонецФункции

Функция КаталогФайловТрековАгента()

	КаталогТреков = ПодкаталогДанных("Треки");
	Если Не ПроверитьИСоздатьКаталог(КаталогТреков, Истина) Тогда
	    Текст = НСтр("ru='Не удалось создать каталог хранения треков ""%1""!';uk='Не вдалося створити каталог зберігання треків ""%1""!'");
		Текст = СтрШаблон_(Текст, КаталогТреков);
	    ВызватьИсключение(Текст);
	КонецЕсли; 
	
	КаталогТрековАгента = ДополнитьСлешВПуть(КаталогТреков) + ВыбНастройкиАгента.КаталогОбмена;
	Если Не ПроверитьИСоздатьКаталог(КаталогТрековАгента, Истина) Тогда
		Текст = НСтр("ru='Не удалось создать каталог хранения треков для агента ""%1"", каталог - ""%2""!';uk='Не вдалося створити каталог зберігання треків для агента ""%1"", каталог - ""%2""!'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Сотрудник, КаталогТрековАгента);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(КаталогТрековАгента);
	
КонецФункции // КаталогФайловТрекинга()

Функция ПодкаталогиДанных() Экспорт
	
	Возврат Новый Структура("КаталогОбмена,Логи,Треки,Входящие,Исходящие", 
							"Exchange", "Logs", "Tracks", "In", "Out");
							
КонецФункции

Функция ПодкаталогДанных(ИмяСвойства, НачальныйПуть = Неопределено) Экспорт
	
	Результат 		= Неопределено;	
	СтррПодкаталоги = ПодкаталогиДанных();
	
	Если Не СтррПодкаталоги.Свойство(ИмяСвойства, Результат) Тогда
		ВызватьИсключение(НСтр("ru = 'Функция ПодкаталогДанных(), неизвестный параметр ИмяСвойства = '; uk = 'Функція ПодкаталогДанных(), невідомий параметр ИмяСвойства ='") + ИмяСвойства);
	КонецЕсли;
	
	Путь = ?(НачальныйПуть <> Неопределено, НачальныйПуть, КаталогДанных);
	Если ЭтоLinuxСервер() Тогда
		Путь = СтрЗаменить(Путь, "\", "/");
	КонецЕсли; 
	
	Возврат ДополнитьСлешВПуть(Путь) + ДополнитьСлешВПуть(Результат);
	
КонецФункции

// КаталогиМодуля
#КонецОбласти 

Функция НайтиПоЗначению(Коллекция, Значение)

	Результат = Неопределено;
	
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.Значение = Значение Тогда
			Результат = Элемент;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ЭтоLinuxСервер() Экспорт
	
	Если гЭтоLinuxСервер = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		гЭтоLinuxСервер = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат гЭтоLinuxСервер;
	
КонецФункции

Функция ЭтоСсылкаНаНайденныйОбъект(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Стр = НРег(Строка(Ссылка));
		Если Лев(Стр, 1) = "<" И 0 <> Найти(Стр, ">") И 0 <> Найти(Стр, "объект") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТипСсылки(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Возврат "Документ";
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		    Возврат "Справочник";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСсылки(ОбъектСсылка)

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Строка(ОбъектСсылка.Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции 

#Область ОтборыВыгрузкиСправочниковПоСКД

Функция КомпоновщикНастроекАгента(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	// Добавим выбранные поля
	Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;

	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	Возврат КомпоновщикНастроек.Настройки;
КонецФункции

Функция ЭлементОтбораПоЛевомуЗначению(стрЛевоеЗначение, стрНазванияДополнительныхЭлементов = Неопределено )

	ЭлементОтбора = Неопределено;
	ОтборыАгента = ВыбНастройкиАгента.ВыгружаемыеОбъекты;
	
	Если ТипЗнч(ОтборыАгента) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Текст = НСтр("ru='Агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.';uk='Агент: ""%1"", незаповнені ""Вивантажувані дані""! Перевірте ""Вивантажувані дані"" в налаштуваннях агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Сотрудник);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Для Каждого Элемент Из ОтборыАгента.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = стрЛевоеЗначение Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда // не найден элемент отбора с представлением ПредставлениеОтбора
		//{{vd_180928 В старых версиях УНФ поле Отбора Контрашегты называется Партнеры, переименуем это поле
		Если стрЛевоеЗначение = "Контрагенты" Тогда 
			//Переименование
			ФормаОбновлений = ПолучитьФорму(Метаданные().ПолноеИмя() + ".Форма." + "МодульОбновлений");
			ФормаОбновлений.ЗаменитьПолеКомпановкиданныхПартнерНаКонтрагента();
			ВыбНастройкиАгента  = ПолучитьНастройкиАгента(ВыбАгент);
			ОтборыАгента 		= ВыбНастройкиАгента.ВыгружаемыеОбъекты;
			НастройкиАгентов    = ПрочитатьЗначениеНастройки("НастройкиАгентов");
			//Повторный поиск Элемента
			Для Каждого Элемент Из ОтборыАгента.Элементы Цикл
				Если Строка(Элемент.ЛевоеЗначение) = стрЛевоеЗначение Тогда
					ЭлементОтбора = Элемент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЭлементОтбора = Неопределено Тогда		
			Текст = НСтр("ru='Агент: ""%1"", не найдено поле СКД ""%2""! Проверьте ""Выгружаемые данные"" в настройках агента.';uk='Агент: ""%1"", що не знайдено поле СКД ""%2""! Перевірте ""Вивантажувані дані"" в налаштуваннях агента.'");
			Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Сотрудник, стрЛевоеЗначение);
			ВызватьИсключение(Текст);
		КонецЕсли;
		//}}vd_180928
	КонецЕсли;
		
	// проверяем существование ссылки в отборе
	Если ЭлементОтбора.Использование И Не ЭтоСсылкаНаНайденныйОбъект(ЭлементОтбора.ПравоеЗначение) Тогда
		Текст = НСтр("ru='Агент: ""%1"", параметр отбора: %2. Найдена ссылка на несуществующий объект: %3!Проверьте ""Выгружаемые данные"" в настройках агента.';uk='Агент: ""%1"", параметр відбору:%2. Знайдена посилання на неіснуючий об''єкт:%3! Перевірте ""Вивантажувані дані"" в налаштуваннях агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Сотрудник, стрЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	// Значения дополнительных элементов отбора ищем когда найдено значение основного элемента отбора 
	Если стрНазванияДополнительныхЭлементов <> Неопределено Тогда 
		
		ДопЭлементОтбора = ПолучитьОтборДляДополнительныхЭлементов(стрЛевоеЗначение, ОтборыАгента, стрНазванияДополнительныхЭлементов);
		Если ДопЭлементОтбора <> Неопределено И ЭлементОтбора <> Неопределено Тогда
			мОтборы = Новый Массив;
			мОтборы.Добавить(ЭлементОтбора);
			мОтборы.Добавить(ДопЭлементОтбора);
			Возврат мОтборы;
		ИначеЕсли ДопЭлементОтбора <> Неопределено И ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ДопЭлементОтбора;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЭлементОтбора;		
	
КонецФункции

Функция ПолучитьОтборДляДополнительныхЭлементов(НазваниеПоляКомпоновки, ОтборыАгента, НазванияДополнительныхЭлементов)

	стррПараметры = Новый Структура("Условие,Запрос,ЭлементОтбора,ВидСправочника", "");
	Если НазваниеПоляКомпоновки = "Номенклатура" Или НазваниеПоляКомпоновки = "Контрагенты" Тогда
		стррПараметры.ВидСправочника = НазваниеПоляКомпоновки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ПолучитьОтборыДляДополнительныхЭлементов() - неизвестное значение НазваниеПоляКомпоновки = '; uk = 'Функція ПолучитьОтборыДляДополнительныхЭлементов() - невідоме значення НазваниеПоляКомпоновки ='") + НазваниеПоляКомпоновки);
	КонецЕсли; 
	
	мНазвания = СтрРазделить_(НазванияДополнительныхЭлементов);
	
	Для Каждого Название Из мНазвания Цикл
		
		ВРегНазвание = ВРег(Название);
		стррПараметры.ЭлементОтбора = Неопределено;
		Для Каждого Элемент Из ОтборыАгента.Элементы Цикл // ищем элемент отбора среди элементов отбора в СКД по названию
			Если ВРег(Элемент.ЛевоеЗначение) = ВРегНазвание Тогда
				стррПараметры.ЭлементОтбора = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если стррПараметры.ЭлементОтбора = Неопределено Тогда // Не найдено элемента отбора в СКД,
			Если ВыбНастройкиАгента.Свойство(Название) Тогда // но такой реквизит есть в настройках агента.
				стррПараметры.ЭлементОтбора = Название; // тип значения "Строка" - признак, что значение элемента отбора брать из настроек агента
			КонецЕсли; 
		КонецЕсли; 
		
		ОбработатьДополнительныйЭлементОтбора(стррПараметры);
	
	КонецЦикла;
	
	Если стррПараметры.Запрос = Неопределено Тогда // не выбрано ни одного параметра, запрос для отбора не требуется
		Возврат Неопределено;
	КонецЕсли; 
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	[ВидСправочника].Ссылка
		|ИЗ
		|	Справочник.[ВидСправочника] КАК [ВидСправочника]
		|ГДЕ 
		|	[ВидСправочника].ПометкаУдаления = ЛОЖЬ
		|	[Условие]";
	
	стррЛитералы = Новый Структура("ВидСправочника,Условие");
	ЗаполнитьЗначенияСвойств(стррЛитералы, стррПараметры);
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	стррПараметры.Запрос.Текст = ТекстЗапроса;
	мЗначения = стррПараметры.Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ЭлементОтбора = ОтборыАгента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // всегда создаем новый элемент отбора, т.к. используем новое стрЛевоеЗначение
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеПоляКомпоновки);
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	ЭлементОтбора.ПравоеЗначение = мЗначения;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Функция ВыражениеУсловияДляЗапроса(ВидСравнения, ИмяПараметра, ПредставлениеПустогоЗначения)
	
	стрРезультат = Неопределено;
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		стрРезультат = " = " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		стрРезультат = " <> " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		стрРезультат = " В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		стрРезультат = " НЕ В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		стрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		стрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		стрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		стрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		стрРезультат = " <> " + ПредставлениеПустогоЗначения;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		стрРезультат = " = " + ПредставлениеПустогоЗначения;
	КонецЕсли;
	
	Возврат стрРезультат;
	
КонецФункции	

// Функция генерирует строку условий для запроса на основании значения отбора. 
// Дополнительно создает сам запрос (если он еще не создан) и устанавливает для него параметры.
// Результат возвращается в свойстве "Условие" переданной структуры.
// 
// Параметры:
//	стррПараметры - Структура - структура со свойствами:
//    * ЭлементОтбора 	- ЭлементОтбораКомпоновкиДанных, Строка:
//			- при типе "ЭлементОтбораКомпоновкиДанных" - элемент поля отбора в СКД в "Выгружаемых данных" агента;
//    		- при типе "Строка" - название свойства агента для отбора контрагентов.
//    * ВидСправочника 	- Строка - вид справочника, для которого вызывается запрос.
//    * Условие 		- Строка - строка условий (возвращаемое значение).
//  
Процедура ОбработатьДополнительныйЭлементОтбора(стррПараметры)
	
	//УНФ
	
	ТиповоеУсловие = Истина; // признак, что условие запроса типовое (отбор по значению поля таблицы)	
	ЭлементОтбора = стррПараметры.ЭлементОтбора;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда // правое значение отбора нужно брать из настроек торгового агента (из свойства структуры ВыбНастройкиАгента)
		Название = ЭлементОтбора;
	ИначеЕсли ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		Возврат;
	Иначе
		Название = Строка(ЭлементОтбора.ЛевоеЗначение);   // название элемента отбора
		ЗначениеПараметра = ЭлементОтбора.ПравоеЗначение; // значение параметра отбора
		ИмяПараметра      = Название;                     // название параметра в запросе
	КонецЕсли;
	
	// Отборы для контрагентов /////////////////////////////////////////////////////////////////////////////////////////////
	Если Название = "СсылкаСписокТТ" Тогда // отбор сотрудников по списку торговых точек
		стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // список ТТ читаем из хранилища
		Если стррОбъект <> Неопределено Тогда
			стрУсловие   = "Контрагенты.Ссылка В (&СписокТТ)";			
			ИмяПараметра = "СписокТТ";
			ЗначениеПараметра = стррОбъект.Состав.ВыгрузитьКолонку("Контрагент");
			ТиповоеУсловие = Ложь;
		КонецЕсли;
		
	ИначеЕсли Название = "КатегорияНоменклатуры" Тогда	
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)");
	
	ИначеЕсли Название = "ТипНоменклатуры" Тогда	
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)");
	
	ИначеЕсли Название = "ЦеноваяГруппа" Тогда	
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)");
	
	ИначеЕсли Название = "ВидКонтрагента" Тогда	
			стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)");
		
	ИначеЕсли Название = "ГруппаДоступа" Тогда	
			стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ГруппыДоступаКонтрагентов.ПустаяСсылка)");
	
	ИначеЕсли Название = "Ответственный" Тогда	
			стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)");
			
		
	////++унф
	//	
	//ИначеЕсли Название = "ТолькоПартнерыОсновногоМенеджера" Тогда // булево значение - признак отбора партнеров по атрибуту ОсновнойМенеджер = Агент.Пользователь
	//	Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
	//		Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
	//	Тогда
	//		стрУсловие = "Партнеры.ОсновнойМенеджер = &Пользователь";
	//		ИмяПараметра = "Пользователь";
	//		ЗначениеПараметра = ВыбНастройкиАгента.Пользователь;
	//		ТиповоеУсловие = Ложь;
	//	КонецЕсли; 
	//ИначеЕсли Название = "ТипПартнера" Тогда // отбор партнеров по выбранному типу: "Клиент", "Поставщик" или "Конкурент"		
	//	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда // тут значение параметра отбора (правое значение) - это список значений
	//		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
	//			стрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "=", "ИЛИ");
	//		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
	//			стрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "<>", "И");
	//		КонецЕсли;
	//		ИмяПараметра = Неопределено; // для условия по типу партнера параметр запроса не используется
	//		ТиповоеУсловие = Ложь;
	//	КонецЕсли; 
	//ИначеЕсли Название = "ОсновнойМенеджер" Или Название = "РегиональныйМенеджер" Тогда // отбор партнеров по основному менеджеру
	//	стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)");
	//	
	//ИначеЕсли Название = "БизнесРегион" Тогда // отбор партнеров по основному менеджеру
	//	стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
	//	
	//// Отборы для номенклатуры /////////////////////////////////////////////////////////////////////////////////////////////
	//ИначеЕсли Название = "ВидНоменклатуры" Тогда // отбор номенклатуры по виду
	//	стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)");
	//ИначеЕсли Название = "ГруппаДоступа" Тогда // отбор номенклатуры по группе доступа
	//	стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ГруппыДоступаНоменклатуры.ПустаяСсылка)");
	//ИначеЕсли Название = "ЦеноваяГруппа" Тогда // отбор номенклатуры по ценовой группе
	//	стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)");
	//	
	// //--унф
		
	Иначе
		ВызватьИсключение("Процедура ПодготовитьДополнительныйЭлементОтбора() - Неизвестное значение ЭлементОтбора.ЛевоеЗначение = """ 
			+ Название + """");
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(стрУсловие) Тогда
		
		Если ТиповоеУсловие Тогда
			стррПараметры.Условие = стррПараметры.Условие + Символы.ПС + " И " + стррПараметры.ВидСправочника + "." + Название + " " + стрУсловие;		
		Иначе
			стррПараметры.Условие = стррПараметры.Условие + Символы.ПС + " И " + стрУсловие;				
		КонецЕсли;
		
		Если стррПараметры.Запрос = Неопределено Тогда
			стррПараметры.Запрос = Новый Запрос;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			стррПараметры.Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);		
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает строку условия для запроса отбора партнеров по типу партнера (элемент отбора "ТипПартнера" в макете СКДВыгружаемыеДанные)
// по логическим реквизитам: Клиент, Поставщик, Конкурент справочника контрагенты.
// Итоговая строка условия может состоять из нескольких сравнений, соединенными операциями "И" или "ИЛИ".
// 
// Параметры:
//	  ПравоеЗначение - СписокЗначений, Строка - значения сравнения (список из значений: "Клиент", "Поставщик", "Конкурент" или одно из значений (Строка)).
//    ОперацияСравнения  - Строка - строка сравнения "==" или "<>"
//    ОперацияСоединения - Cтрока - строка соединения условий "И" или "ИЛИ"
//  
// Возвращаемое значение:
//  Строка - строка условия для запроса отбора партнеров.
//
Функция УсловиеВключенияПартнераПоТипуПартнера(ПравоеЗначение, ОперацияСравнения, ОперацияСоединения)
	
	стрУсловие = "";
	
	мРеквизиты = СтрРазделить_("Клиент,Поставщик,Конкурент");

	КоличествоУсловий = 0;
	ЭтоСписокЗначений = (ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений"));
	Для Каждого ИмяРеквизита Из мРеквизиты Цикл
		Если (ЭтоСписокЗначений И ПравоеЗначение.НайтиПоЗначению(ИмяРеквизита) <> Неопределено) Или ИмяРеквизита = ПравоеЗначение Тогда
			стрУсловие = стрУсловие + ?(ПустаяСтрока(стрУсловие), "", " " + ОперацияСоединения + " ")
				+ "Контрагенты." + ИмяРеквизита + " " + ОперацияСравнения + " ИСТИНА ";
				КоличествоУсловий = КоличествоУсловий + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Если КоличествоУсловий > 1 Тогда // заключаем условия в скобки
		стрУсловие = "(" + СокрЛП(стрУсловие) + ")";	
	КонецЕсли;
	
	Возврат стрУсловие;
	
КонецФункции

Функция СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;

	Возврат СхемаКомпоновки;
КонецФункции

// ОтборыВыгрузкиСправочниковПоСКД
#КонецОбласти 

// Функция возвращает массив элементов справочника в соответствии с текстом запроса.
// 
// Параметры:
//	ТекстЗапроса - Строка - текст запроса выборки из справочника;
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - элемент (условия) отбора.
//  
// Возвращаемое значение:
//  Массив - элементы справочника.
//
Функция ВыборкаИзСправочника(ТекстЗапроса, ЭлементОтбора = Неопределено)

	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда // задействован ЭлементОтбораКомпоновкиДанных
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ЭлементОтбора, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	Иначе // условие без отбора данных
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
КонецФункции

Функция РезультатЗапросаВВидеТЗ(ТекстЗапроса, ОтборыСКД = Неопределено)
	
	Если ОтборыСКД <> Неопределено И ОтборыСКД.Использование Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

// Функция упаковывает файл выгрузки в архив.
// Возвращает полный путь к архиву, 
// или Неопределено, если архив не удалось создать.
// 
Функция УпаковатьФайл(ИмяФайлаВыгрузки, ИмяАрхиваСКартинками)

	ПарольАрхива  = ""; // СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
	ПутьИмяАрхива = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 3) + "zip";

	Архив = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяФайлаВыгрузки);


	Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
		Архив.Добавить(ИмяАрхиваСКартинками);
	КонецЕсли;
	
#Область ПокаУбрано	

	//Если Не ПустаяСтрока(ПапкаСОтчетом) Тогда
	//	Архив.Добавить(ПапкаСОтчетом, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Истина;
	//Иначе
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Ложь;
	//КонецЕсли;

	//СписокБазДанных = Новый СписокЗначений;

	//// Сформируем файл-манифест
	//ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
	//
	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (Не ДопНастройкиАгента = Неопределено) Тогда
	//	
	//	Для Каждого ВеткаДерева Из ДопНастройкиАгента.Строки Цикл 
	//		//Идентификатор     = ВеткаДерева.Идентификатор;
	//		//ЗначениеКонстанты = ВеткаДерева.Значение;
	//		Ключ			  = ВеткаДерева.Ключ;
	//		
	//		Если Ключ = "Общие" Тогда
	//			Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл
	//				ЗначениеКонстанты = ВеткаДерева.Значение;
	//				Ключ			  = ВеткаДерева.Ключ;
	//				
	//				Если Ключ = "СписокБазДанных" Тогда
	//					МассивПодстрок = РазложитьСтрокуНаМассивПодстрок(ЗначениеКонстанты, ";");
	//					Для Сч = 0 По МассивПодстрок.Количество()-1 Цикл
	//						СписокБазДанных.Добавить(МассивПодстрок[Сч]);	
	//					КонецЦикла;
	//				КонецЕсли; //Если Ключ = "СписокБазДанных" Тогда					
	//			КонецЦикла; //Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл				
	//		КонецЕсли; //Если Ключ = "Общие" Тогда			
	//	КонецЦикла; //Для Каждого ВеткаДерева Из ДопНастройкиАгента Цикл
	//	
	//КонецЕсли; //Если ДопНастройкиАгента <> Неопределено Тогда

	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (СписокБазДанных.Количество() > 1) Тогда
	//	
	//	ПутьКФайлуМанифест = ВернутьКаталогВременныхФайлов(ПараметрыОбмена) + "manifest";
	//	
	//	Текст = Новый ЗаписьТекста(ПутьКФайлуМанифест, КодировкаТекста.ANSI);
	//	
	//	Текст.ЗаписатьСтроку("<manifest version=""1"">");
	//	
	//	Для Каждого ТекСтрока Из СписокБазДанных Цикл				
	//		Текст.ЗаписатьСтроку("<import db=" + """" + ТекСтрока + """" + " file=" + """" + "FromCDB.xml""" + " />");				
	//	КонецЦикла;
	//	
	//	Текст.ЗаписатьСтроку("</manifest>");
	//	
	//	Текст.Закрыть();
	//	
	//	Архив.Добавить(ПутьКФайлуМанифест);
	//	
	//КонецЕсли;
	
// ПокаУбрано
#КонецОбласти
	
	Архив.Записать();
	
	Если ФайлСуществует(ПутьИмяАрхива) Тогда
		Результат = ПутьИмяАрхива;
		Попытка
			Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
				УдалитьФайлы(ИмяАрхиваСКартинками);
			КонецЕсли; 
			УдалитьФайлы(ИмяФайлаВыгрузки);
		Исключение
		КонецПопытки; 
	Иначе
		Результат = Неопределено;
		Текст = СтрШаблон_(НСтр("ru = 'Ошибка создания архива: %1'; uk = 'Помилка створення архіву: %1'")
							,ПутьИмяАрхива);
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ВыводСообщений

Функция ВывестиИнформацию(СтррИнформация)

	// Заносим в журнал только ошибки
	Если Найти(СтррИнформация.ТипСобытия, "Ошибка") <> 0 Тогда
		Текст = ?(ЗначениеЗаполнено(СтррИнформация.Агент), СокрЛП(СтррИнформация.Агент) + ": ", "") + СтррИнформация.ТекстСообщения;
		ЗаписьЖурналаРегистрации(СтррИнформация.ТипСобытия, УровеньЖурналаРегистрации.Ошибка, Неопределено, СтррИнформация.СсылкаНаОбъект, Текст);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррИнформация.ТекстСообщения);

КонецФункции 

Функция ОповеститьОСобытии(Текст, ТипСобытия = "АПИнформация", СсылкаНаОбъект = Неопределено, Агент = Неопределено) Экспорт
	
	ТекстСообщения = Текст;
	Если Агент = "ТекущийАгент" Тогда
		Агент = ВыбНастройкиАгента.Сотрудник;
	ИначеЕсли Агент = "ТекущийАгентСообщить" Тогда
		Агент = ВыбНастройкиАгента.Сотрудник;
		ТекстСообщения = НСтр("ru = 'Агент '; uk = 'Агент '") + Строка(Агент) + ": " + Текст;
	ИначеЕсли ТипЗнч(Агент) = Тип("Строка") Тогда
		ВызватьИсключение(НСтр("ru = 'Функция ОповеститьОСобытии() - неизвестное значение параметра Агент = '; uk = 'Функция ОповеститьОСобытии() - невідоме значення параметра Агент = '") + Агент);
	КонецЕсли;
	
	СтррИнформация = Новый Структура("ТекстСообщения,ТипСобытия,СсылкаНаОбъект,Агент", ТекстСообщения, ТипСобытия, СсылкаНаОбъект, Агент);
	ВывестиИнформацию(СтррИнформация);

КонецФункции 

Процедура ВывестиСообщение(СтррРезультат, Текст, ЕстьОшибки = Неопределено)
	
	СтррСообщение = Новый Структура("Описание", Текст);
	СтррРезультат.Сообщения.Добавить(СтррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		СтррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

// ВыводСообщений
#КонецОбласти 

#Область ИдентификаторыПеречислений

Функция ПолучитьЗначениеПеречисленияПоИдентификатору(ВидПеречисления, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда 	//++{20.01.17
		Возврат Неопределено;
	КонецЕсли; 										//++}

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(НРег(Идентификатор), "Идентификатор");
	Если СтрокаТ = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'Функция ПолучитьЗначениеПеречисленияПоИдентификатору(), неизвестный Идентификатор = '; uk = 'Функція ПолучитьЗначениеПеречисленияПоИдентификатору(), невідомий Ідентифікатор = '") + Идентификатор);
	КонецЕсли;
	
	Возврат СтрокаТ.Значение;
	
КонецФункции

Функция ПолучитьИдентификаторПеречисленияПоЗначению(ВидПеречисления, Значение)

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(Значение, "Значение");
	Если СтрокаТ = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаТ.Идентификатор;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗначениеПеречисления(ТЗ, Идентификатор, Значение)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.Идентификатор = Идентификатор;
	СтрокаТ.Значение 	  = Значение;
	
КонецПроцедуры

Процедура ПопыткаСоздатьТаблицыПеречислений()
	
	Если гТаблицыПеречислений <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	гТаблицыПеречислений = Новый Структура("ТипыКонтактнойИнформации,ФормыОплаты");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
		
	Для Каждого Элемент Из гТаблицыПеречислений Цикл
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока); //идентификатор значения перечисления в МТ
		ТЗ.Колонки.Добавить("Значение"); 						  //значение перечисления в УТ
		гТаблицыПеречислений[Элемент.Ключ] = ТЗ;
	КонецЦикла;
	
	ТЗ = гТаблицыПеречислений.ТипыКонтактнойИнформации;
	ДобавитьЗначениеПеречисления(ТЗ, "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ДобавитьЗначениеПеречисления(ТЗ, "52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ДобавитьЗначениеПеречисления(ТЗ, "2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ДобавитьЗначениеПеречисления(ТЗ, "e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	ДобавитьЗначениеПеречисления(ТЗ, "8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	// Для видов оплаты использованы случайные идентификаторы, т.к. в мобильном приложении это справочник.
	// Это же соответствие используется при выгрузке видов оплат в мобильное приложение в процедуре "Выгрузка дополнительной информации"
	//(( sk_190409 В конфигурации отсутствует перечисление ФормыОплаты 
	//ТЗ = гТаблицыПеречислений.ФормыОплаты;
	//ДобавитьЗначениеПеречисления(ТЗ, "4a73372b-48e3-4874-8b87-b964d5782e25", Перечисления.ФормыОплаты.Наличная);
	//ДобавитьЗначениеПеречисления(ТЗ, "7e6a8955-0b5b-4a3d-9446-acce667ed741", Перечисления.ФормыОплаты.Безналичная);
	//ДобавитьЗначениеПеречисления(ТЗ, "f2cf11e4-d6cc-4986-a5a2-0a440301876c", Перечисления.ФормыОплаты.Взаимозачет);
	//ДобавитьЗначениеПеречисления(ТЗ, "bd9e3958-1e52-4d37-9685-6083e249702f", Перечисления.ФормыОплаты.ПлатежнаяКарта);
	//)) sk_190409
	
КонецПроцедуры

// ИдентификаторыПеречислений
#КонецОбласти 

#Область ИдентификаторыВидовСправочниковИДокументов

// Процедура создает таблицы соответствия видов документов и справочников между МТ и УТ.
// Таблицы соответствий используются в процедурах ПолучитьВсеВидыОбъектовДляМУ(), ПолучитьВсеВидыОбъектовДля1С(), ВидОбъектаПоИдентификатору()...
// Важно правильно соблюдать регистры в названиях видов объектов!
Процедура ПопыткаСоздатьТаблицыВидовОбъектов()

	Если гТаблицыВидовОбъектов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррТаблицы = Новый Структура("Документ,Справочник");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // sd_24082017
		
	Для Каждого Элемент Из стррТаблицы Цикл
		ТЗ = Новый ТаблицаЗначений;                                      	
		ТЗ.Колонки.Добавить("ВидДляМТ",  	 		ОписаниеТипаСтрока); 		//вид документа/справочника в МТ	
		ТЗ.Колонки.Добавить("Представление", 		ОписаниеТипаСтрока); 		//представление вида документа/справочника в МТ		
		ТЗ.Колонки.Добавить("Вид",  		 		ОписаниеТипаСтрока); 		//вид документа/справочника в УТ
		ТЗ.Колонки.Добавить("ИдентификаторВида", 	ОписаниеТипаИдентификатор); // sd_24082017 //идентификатор вида документа/справочника в МТ // gi_170902 - изменено название колокни с "Идентификатор" на "ИдентификаторВида"
		ТЗ.Колонки.Добавить("ИнтерактивноОчищать", 	ОписаниеТипаБулево); 		//признак интерактивного выбора флага "Очищать перед загрузкой"
		стррТаблицы[Элемент.Ключ] = ТЗ;
	КонецЦикла;
	
	ТЗ = стррТаблицы.Документ; // виды документов в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Заказ",Нстр("ru='Заказ';uk='Замовлення'"), 				"ЗаказПокупателя", 		   "e01e1f5c-d6e4-46e8-b923-3758b0d79bde"); //УНФ ДобавитьСвойстваВидаОбъекта(ТЗ, "Заказ",, 			"ЗаказКлиента", 		   "e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПКО",Нстр("ru='ПКО';uk='ПКО'"), 				"ПоступлениеВКассу",	   "749be2e0-9b00-4d7b-9d4d-88ca53327511"); //унф ДобавитьСвойстваВидаОбъекта(ТЗ, "ПКО",, 				"ПриходныйКассовыйОрдер",  "749be2e0-9b00-4d7b-9d4d-88ca53327511");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "РКО",Нстр("ru='РКО';uk='ВКО'"), 				"РасходИзКассы",  		   "3890d435-96ba-4481-abc0-23782e15b32f"); //унф ДобавитьСвойстваВидаОбъекта(ТЗ, "РКО",, 				"РасходныйКассовыйОрдер",  "3890d435-96ba-4481-abc0-23782e15b32f");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Реализация",Нстр("ru='Реализация';uk='Реалізація'"),  		"РасходнаяНакладная", 	   "7ffb418c-73c9-4883-91c5-827fa5145a3a"); //унф ДобавитьСвойстваВидаОбъекта(ТЗ, "Реализация",,		"РеализацияТоваровУслуг",  "7ffb418c-73c9-4883-91c5-827fa5145a3a");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Перемещение",Нстр("ru = 'Перемещение'; uk = 'Переміщення'"),			"ПеремещениеЗапасов",	   "77525c87-cb2f-405e-a92e-6f373edeece7"); // 	ДобавитьСвойстваВидаОбъекта(ТЗ, "Перемещение",,			"ПеремещениеТоваров",	   "77525c87-cb2f-405e-a92e-6f373edeece7"); // sd_22082017// sd_22082017
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВозвратТоваров", Нстр("ru='Возврат товаров';uk='Повернення товарів'"), "ПриходнаяНакладная", "4971b041-beab-4fa6-b1e8-10138f04fe44");  //унф ДобавитьСвойстваВидаОбъекта(ТЗ, "ВозвратТоваров", 		"Возврат товаров", "ВозвратТоваровОтКлиента", "4971b041-beab-4fa6-b1e8-10138f04fe44");  // в унф это приходная накладная с типом операции - возврат от покупателя
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Посещение",Нстр("ru='Посещение';uk='Відвідування'"), 			"_Посещение",  			   "9f147c59-5ee8-4550-8289-12ecfe5d0617"); // знак "_" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Мерчендайзинг",Нстр("ru='Мерчендайзинг';uk='мерчендайзинг'"), 		"_Мерчендайзинг",  		   "61dee5fe-d0a8-4842-a6af-a8d33f298845"); // знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Долг",Нстр("ru='Долг';uk='Борг'"), 				"_Взаиморасчеты",		   "a93aadfa-2a35-40fe-b88a-3768825cdd31", Ложь); // знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Маршрут",Нстр("ru='Маршрут';uk='Маршрут'"), 			"_Маршрут",		   		   "43920fa1-745d-4499-84af-7000672ceeff", Ложь); // знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВнеплановыйМаршрут",Нстр("ru = 'Внеплановый маршрут'; uk = 'Позаплановий маршрут'"),	"_ВнеплановыйМаршрут",     "27205d6e-e956-4c06-aa21-9b573f5d752f", Ложь); // знак "_" - признак виртуального документа ...
	// +АгентПлюс 2018-11-15 Виктор 
	Если гКонфигурация = "УНФ_UA" Тогда
		ДобавитьСвойстваВидаОбъекта(тз, "СчетФактура","Счет-фактура","СчетФактура", 	   "d7d70de1-4f98-4153-82f1-12c84ebf81a5", Ложь);
	КонецЕсли;
	// -АгентПлюс 2018-11-15 Виктор 
	ДобавитьСвойстваВидаОбъекта(тз, "Поступление", "Поступление товаров", "ПриходнаяНакладная","c9850d61-bc15-445a-8b1a-e328cc45ddae", Ложь); //vd_180606 Баг 38601
	
	
	ТЗ = стррТаблицы.Справочник; // виды справочников в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Организации",Нстр("ru='Организации';uk='Організації'"),,					"0e3cbaea-5467-45cd-8c86-fb1777da435b");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ТипыЦен",Нстр("ru='Типы цен';uk='Типи цін'"),"ВидыЦен", 					"00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Склады",Нстр("ru='Склады';uk='Склади'"),, 			"2516ffce-f46f-4326-be00-438ef0871d30");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Договоры",Нстр("ru='Договоры';uk='Договори'"),"СоглашенияСКлиентами",					"735a9ce5-dcc1-4d1a-8f8d-643a50a6befc"); // sd_10082017 переименовал видспр для 1С СоглашенияСКлиентами
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Сегменты",,"*",									"b08784c4-5b74-4685-88b5-a17ea105ae48", Ложь); // связи сегментов партнеров и соглашений в УТ, пока не используется (03.12.17)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Номенклатура",,, 									"d6d52ada-0f38-4112-af3c-2f1e425a43d1");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ХарактеристикиНоменклатуры", Нстр("ru='Характеристики номенклатуры';uk='Характеристики номенклатури'"),, 	"cc552c31-f7de-4259-a6e3-66ef765d3b43");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ЕдиницыИзмерения",Нстр("ru='Единицы измерения';uk='Одиниці виміру'"),,			"80452c60-b442-4da9-a048-42f63270ca14");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПерсональныеЦены","Персональные цены","*",			"12215e0a-385d-441a-8e98-1b6e0206143f");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КатегорииДокументов",Нстр("ru='Категории документов';uk='Категорії документів'"), "*", 	"f997f837-8721-4896-8fe8-3497c6c38206"); // знак "*" в параметре Вид - признак отсутствующего аналогичного справочника в УТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "СтатусыКонтрагентов",Нстр("ru='Статусы контрагентов';uk='Статуси контрагентів'"), "*", 	"74046d94-b25d-4f3a-b553-27b7fdd3c60c"); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Запросы",Нстр("ru='Запросы';uk='Запити'"),"*", 									"cc458719-5078-4dc8-9a0c-fa19e3904f39"); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ИсторияПродаж",Нстр("ru='История продаж';uk='Історія продажів'"),"*", 				"af9faa26-9638-41c5-bfce-9514e670ef2e", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ТорговыеТочки",Нстр("ru='Торговые точки';uk='Торгові точки'"),,		"d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Контрагенты",Нстр("ru='Клиенты';uk='Клієнти'"),"Контрагенты",							"9450980f-fb59-47e3-bae2-aa3c58441b1a");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактныеЛица",Нстр("ru='Контактные лица';uk='Контактні особи'"),"КонтактныеЛицаПартнеров", 	"cf387a58-4655-41b5-a460-85884d1f20d0");
	//ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактнаяИнформация","Контактная информация","Партнеры.КонтактнаяИнформация",	"85b62882-0156-4881-85ba-b8fef05c867b");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактнаяИнформация",Нстр("ru='Контактная информация';uk='Контактна інформація'"),"ВидыКонтактнойИнформации",	"85b62882-0156-4881-85ba-b8fef05c867b"); // sd_10082017 для загрузки в УТ имя спр ВидыКонтактнойИнформации, загружаются отдельно
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВидыКонтактнойИнформации",Нстр("ru='Виды контактной информации';uk='Види контактної інформації'"),, 		"564e0eca-c498-4d28-83d7-4bdeaec558e2"); // sd_10082017 для выгрузки в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ФотоСправочников",Нстр("ru='Фото справочников';uk='Фото довідників'"),"*",			"e01cf3a3-6765-4fd3-801c-ccdbf85c78fc");
	ДобавитьСвойстваВидаОбъекта(тз, "ФотоДокументов",Нстр("ru='Фото документов';uk='Фото документів'"),"*",				"05ea7926-febb-4d82-97fc-19294dd5dd29");       		// gi_180414 - для загрузки фотографий из МУ
	ДобавитьСвойстваВидаОбъекта(тз, "ПечатныеФормыДокументов",,"*",						"17b09c65-5b6c-40d1-8616-3a655b99da8d", Ложь); //vd_181003  ДобавитьСвойстваВидаОбъекта(ТЗ, "ПечатныеФормыДокументов",,,						"17b09c65-5b6c-40d1-8616-3a655b99da8d", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПечатныеФормыОрганизаций",,,						"c7b2883c-d872-4d19-8b32-e7cefaaceaca", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "НастройкиОбмена",,,								"b20a258f-ffb6-49b4-b0fd-9853760cf70c", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Штрихкоды",Нстр("ru = 'Штрих-коды'; uk = 'Штрих-коди'"),"*",						"c156cc98-8b92-444e-b8c2-e3de51106b66", Ложь); 
	
	гТаблицыВидовОбъектов = стррТаблицы;
	
КонецПроцедуры

// Фунция возвращает вид объекта в УТ 11 в соответствии с идентификатором вида объекта в МТ.
//
// Параметры:
//	ИдентификаторВида - УникальныйИдентификатор - (GUID) идентификатор вида документа в МТ. // gi_170902: изменен тип из "Строка" на "УникальныйИдентификатор".
//	Для1С		  	- Булево - Указывается для какой системы необходимо определить вид объекта, если значение Ложь то будет возвращен вид объекта для МТ.
//	КорневойВид   	- Строка - К какому типу метаданных принадлежит идентификатор вида объекта в МТ, "Справочник" или "Документ".
//	
Функция ВидОбъектаПоИдентификатору(ИдентификаторВида, Для1С = Истина, КорневойВид = "Справочник") Экспорт // sd_20082017 Добавил описание параметров и третий входящий параметр
	
	СвойстваВида = СвойстваВидаОбъекта(ИдентификаторВида, "ИдентификаторВида", КорневойВид); // sd_24082017 (ИдентификаторВида); // sd_24082017 // gi_170902 изменено значение параметра с "Идентификатор" на "ИдентификаторВида"
	Если СвойстваВида <> Неопределено Тогда
		СвойстваВида = ?(Для1С, СвойстваВида.Вид, СвойстваВида.ВидДляМТ);
	КонецЕсли;
	
	Возврат СвойстваВида;

КонецФункции

// Функция вовзращает представдение вида Документа или Справочника для указания в комментарии в файле выгрузки
//
// Параметры:
//	КорневойВид - Строка - значения "Документ" или "Справочник".
//	СвойстваВида - СтрокаТаблицыЗначений - строка ТЗ объекта гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник.
//
Функция ПредставлениеВида(КорневойВид, СвойстваВида)
	
	Результат = КорневойВид + "." + СвойстваВида.ВидДляМТ;
	Если СвойстваВида.ВидДляМТ <> СвойстваВида.Вид Тогда
		Результат = Результат + " (" + СвойстваВида.Вид + ")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку ТЗ гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник, 
// найдя ее по заданным значению и имени колонки.
//
// Параметры:
//	Значение - Строка, УникальныйИдентификатор - искомое значение.
//	Имя - Строка - название свойства (колонки) таблицы для поиска значения.
//	КорневойВид - Строка - значения Неопределено, или "Документ", или "Справочник". 
//						   Если указано Неопределено, то в параметре возвращается строка "Документ" или "Справочник".
//	
Функция СвойстваВидаОбъекта(Значение, Имя, КорневойВид = Неопределено)
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Если КорневойВид = Неопределено Тогда // Значит в параметре Значение передана строка вида "Документ.X" или "Справочник.X"
		Поз = Найти(Значение, ".");
		Если Поз <> 0 Тогда
			КорневойВид 	= Лев(Значение, Поз-1);
			ИскатьЗначение 	= Сред(Значение, Поз+1);
		КонецЕсли;
	Иначе 							// Значит в параметре КорневойВид передана строка "Документ" или "Справочник",
		ИскатьЗначение = Значение; 	// а в параметре Значение - название вида документа или справочника.
	КонецЕсли;
		
	Если КорневойВид <> "Справочник" И КорневойВид <> "Документ" Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Процедура СвойстваВидаОбъекта() - неверный параметр Значение = %1 - 
                                 |Значение должно начинаться с ""Документ."" или ""Справочник.""!'; uk = 'Процедура СвойстваВидаОбъекта() - невірний параметр Значение = %1 - 
                                 |Значення має починатися з ""Документ."" або ""Справочник.""!'"),
								Значение);
		ВызватьИсключение(Текст);                                                                  
	КонецЕсли;
	
	// sd_25082017 Перенес условие ниже, чтобы не перезаписывалось значение перем "ИскатьЗначение", когда передается другое значение.
	Если Имя = "ИдентификаторВида" Тогда // в колонке "ИдентификаторВида" хранятся значения типа УникальныйИдентификатор // gi_170902 изменено значение переменной с "Идентификатор" на "ИдентификаторВида"
		ИскатьЗначение = ?(ТипЗнч(Значение) = Тип("Строка"), Новый УникальныйИдентификатор(Значение), Значение);
	КонецЕсли;
	
	СтрокаТ = гТаблицыВидовОбъектов[КорневойВид].Найти(ИскатьЗначение, Имя);
	
	//vd_180510
	//Если СтрокаТ = Неопределено Тогда
	//	ВызватьИсключение("Функция СвойстваВидаОбъекта(), неизвестное Значение = " + Значение);
	//КонецЕсли;
	
	Возврат СтрокаТ;	
	
КонецФункции

//vd_181002 Изменена. Изменения пренесены из УТ.
// Процедура добавляет свойства в таблицу соответствия видов документов и справочников между МТ и УТ.
//
// Параметры:
//	ТЗ 					- Таблица значений 	- таблица соответствий для документов или справочников.
//	ВидДляМТ			- Строка			- вид справочника/документа в МТ. Важно правильно соблюдать регистр в названии!
//	ПредставлениеДляМТ  - Строка			- представление справочника/документа в МТ.
//	Вид					- Строка			- вид справочника/документа в УТ. Возможные значения:
//												- ""  - вид справочника/документа в УТ такой же, как и в МТ;
//												- "*" - аналогичный справочник/документ в УТ отсутствует (значение преобразуется в строку вида: "*" + ВидДляМТ);
//												- "_" - аналогичный справочник/документ в УТ отсутствует, но виртуализируется средствами модуля (значение преобразуется в строку вида: "_" + ВидДляМТ);
//												- другие значения - вид справочника/документа в УТ.
//	Идентификатор		- Строка			- уникальный идентификатор справочника/документа в МТ.
//	ИнтерактивноОчищать	- Булево			- признак интерактивного выбора флага "Очищать перед загрузкой". 
//
Процедура ДобавитьСвойстваВидаОбъекта(ТЗ, ВидДляМТ, ПредставлениеДляМТ = "", Вид = "", ИдентификаторВида, ИнтерактивноОчищать = Истина)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.ВидДляМТ 	  = ВидДляМТ;
	СтрокаТ.Представление = ?(ПредставлениеДляМТ = "", ВидДляМТ, ПредставлениеДляМТ);
	//(( gi_180414 - модификация для отсутствующих в УТ видов справочников/документов
	Если Вид = "" Тогда
		СтрокаТ.Вид = ВидДляМТ;
	ИначеЕсли Вид = "*" Или Вид = "_" Тогда
		СтрокаТ.Вид = Вид + ВидДляМТ;
	Иначе
		СтрокаТ.Вид = Вид;
	КонецЕсли;
	//)) gi_180414
	СтрокаТ.ИдентификаторВида 	= Новый УникальныйИдентификатор(ИдентификаторВида); // sd_24082017 // gi_170902 изменено название свойства с "Идентификатор" на "ИдентификаторВида"
	СтрокаТ.ИнтерактивноОчищать = ИнтерактивноОчищать;
	
КонецПроцедуры


Функция ПолучитьВсеВидыОбъектовДляМУ(КорневойВид, ИнтерактивноОчищать = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Для Каждого СтрокаТ Из ТЗ Цикл
		Если ИнтерактивноОчищать = Неопределено Или ИнтерактивноОчищать = СтрокаТ.ИнтерактивноОчищать Тогда
			Список.Добавить(СтрокаТ.ВидДляМТ, СтрокаТ.Представление);
		КонецЕсли; 
	КонецЦикла;

	Возврат Список;
	
КонецФункции

Функция ПолучитьВсеВидыОбъектовДля1C(КорневойВид, Режим = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Если Режим = Неопределено Тогда

		Для Каждого СтрокаТ Из ТЗ Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли Режим = "СоздаваемыеВМУ" И КорневойВид = "Документ" Тогда
		
		Для Каждого СтрокаТ Из ТЗ Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Или СтрокаТ.Вид = "_Мерчендайзинг" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		
		Текст = СтрШаблон_(НСтр("ru = 'ПолучитьВсеВидыОбъектовДля1C(): недопустимая комбинация параметров КорневойВид = ""%1"", Режим = ""%2"".'; uk = 'ПолучитьВсеВидыОбъектовДля1C(): неприпустима комбінація параметрів КорневойВид = ""%1"", Режим = ""%2"".'"), КорневойВид, Режим);
		ВызватьИсключение(Текст);
		
	КонецЕсли; 

	Возврат Список;
	
КонецФункции

// ИдентификаторыВидовСправочниковИДокументов
#КонецОбласти

#Область СоответствияКонстант_МТ_УД

Функция КонстантыМТПолучитьСоответствие()

	ствРезультат = Новый Соответствие; // GUID считываемых констант и их названия
	ствРезультат.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "АгентЗагрузки");
	ствРезультат.Вставить("cf41ba05-a4ee-4492-9a2c-c96394c4864a", "КодЗапроса");
	
	Возврат ствРезультат;
	
КонецФункции 

Функция КонстантыМТПолучитьGUID(ИмяКонстанты)

	ствКонстанты = КонстантыМТПолучитьСоответствие();
	Элемент = НайтиПоЗначению(ствКонстанты, "АгентЗагрузки");
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Элемент.Ключ;
	КонецЕсли; 

КонецФункции 

// СоответствияКонстант_МТ_УД
#КонецОбласти

#Область ВиртуальныеОбъекты
// Виртуальные объекты (ВО)  - это виртуальные документы и виртуалные справочники.

#Область ВиртуальныеОбъекты_Надстройка
// Функции в области - надстройка над виртуальными документами и виртуальными справочниками - класс-обертка.
// Любая функция/процедура модуля применима и к виртуальному документу и к виртуальному справочнику.

// Процедура дополняет контекст формы виртуального объекта (формы списка и формы элемента - справочника, документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидОбъекта - Строка - вид виртуального объекта.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВОКонтекстФормыДополнить(СтррКонтекст, ВидОбъекта, ДляФормыСписка) Экспорт
	
	стррВО = ВОСвойстваОбъекта(ВидОбъекта);
	
	СтррКонтекст.Вставить("ВО", стррВО); // ссылка на системные свойства виртуального объекта
	СтррКонтекст.Вставить("КодыИконок", ВОИконкиСтатуса(стррВО));
	СтррКонтекст.Вставить("ЭтоФормаСписка", ДляФормыСписка);
	
	СтррКонтекст.Вставить("СпрТоргТочки"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек	
	
	Если стррВО.КорневойВид = "Документ" Тогда
		ВДокКонтекстФормыДополнить(СтррКонтекст);
	ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
		ВСпрКонтекстФормыДополнить(СтррКонтекст);
	Иначе
		ВызватьИсключение(НСтр("ru = 'Процедура ВОКонтекстФормыДополнить() - неизвестное значение свойства КорневойВид = '; uk = 'Процедура ВОКонтекстФормыДополнить() - невідоме значення властивості КорневойВид ='") + стррВО.КорневойВид);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после вызова ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
Процедура ВОПриСозданииФормыЭлемента(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	Если Параметры.Свойство("Статус") Тогда
		Модуль.Статус = Параметры.Статус;
	ИначеЕсли Параметры.Свойство("Проведен") И Параметры.Свойство("ПометкаУдаления") Тогда
		Если Параметры.Проведен Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Проведен;
		ИначеЕсли Параметры.ПометкаУдаления Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Помечен;
		Иначе
			Модуль.Статус = СтррКонтекст.КодыИконок.Записан;
		КонецЕсли; 
	Иначе // нужно прочитать статус элемента из ТЗ элементов
		СтрокаТ = ВОПолучитьСтрокуТЗ(СтррКонтекст.ВО, Модуль.ID);
		Модуль.Статус = ?(СтрокаТ <> Неопределено, СтрокаТ.Статус, СтррКонтекст.КодыИконок.Записан);
	КонецЕсли; 
	
	Если Параметры.Свойство("Копирование") И Параметры.Копирование Тогда // форма открыта для копирования существующего документа, очищаем его идентификатор
		Модуль.ID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ДобавитьВСтрокуНомерКопии(Модуль.Комментарий);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
Процедура ВОПриСозданииФормыСписка(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	СтррКонтекст.Вставить("ДляВыбора", Параметры.Свойство("ДляВыбора") И (Параметры.ДляВыбора = Истина));
	
	Если СтррКонтекст.ДляВыбора Тогда
		Модуль.Элементы.ТПЭлементы.РежимВыбора 		  = Истина;
		Модуль.Элементы.ТПЭлементы.МножественныйВыбор = Истина;
		Модуль.Элементы.ТПЭлементы.ТолькоПросмотр 	  = Истина;
		Модуль.ЭтаФорма.РежимОткрытияОкна 			  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;	
		СтррКонтекст.Вставить("ID", Параметры.ID);
	КонецЕсли; 

КонецПроцедуры

// Функция вовзвращает структуру с системными свойствами для всех виртуальных объектов.
Функция ВОПолучитьВсеСвойства() Экспорт

	стррРезультат = Новый Структура("_РезультатыПосещений,_Мерчендайзинг,_Посещение");
	Для каждого Элемент Из стррРезультат Цикл
		стррРезультат[Элемент.Ключ] = ВОСвойстваОбъекта(Элемент.Ключ);
	КонецЦикла; 
	
	Возврат стррРезультат;
	
КонецФункции

// Функция возвращает системные свойства виртуального объекта (документа, справочника).
// Для ускорения - результат кэшируется.
// Параметры: 
// 	 ВидОбъекта - Строка - вид виртуального объекта (документа или справочника).
// 	 
// Возвращаемое значение:
//   Структура  - системные свойства виртуального объекта.
// 	 
Функция ВОСвойстваОбъекта(ВидОбъекта)

	Если гВОКэшСвойств = Неопределено Тогда // кэш сисиемных свойств виртуальных объектов
		гВОКэшСвойств = Новый Соответствие;
	КонецЕсли;
	
	стррРезультат = гВОКэшСвойств.Получить(ВидОбъекта);
	Если стррРезультат <> Неопределено Тогда
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррРезультат = Новый Структура("ВидОбъекта,КорневойВид,РеквизитОбработки,Префикс,МаксКоличество,ФормаЭлемента");
	
	стррРезультат.ВидОбъекта = ВидОбъекта;
	
		// виртуальные справочники
	Если ВидОбъекта = "_РезультатыПосещений" Тогда
		
		стррРезультат.КорневойВид 		= "Справочник";
		стррРезультат.РеквизитОбработки = "СправочникРезультатыПосещений";
		стррРезультат.Префикс			= "СпрРезП";
		стррРезультат.ФормаЭлемента		= "ЭлементСправочникаРезультатыПосещений";
		
		// виртуальные документы
	ИначеЕсли ВидОбъекта = "_Мерчендайзинг" Тогда
		
		стррРезультат.КорневойВид 		= "Документ";
		стррРезультат.РеквизитОбработки = "ДокументыМерчендайзинга";
		стррРезультат.Префикс			= "ДокМерч";
		стррРезультат.ФормаЭлемента		= "ДокументМерчендайзинг";
		стррРезультат.МаксКоличество	= 1000; // максимально допустимое количество документов в ТЗ списка документов
		
		
	ИначеЕсли ВидОбъекта = "_Посещение" Тогда
		
		стррРезультат.КорневойВид 		= "Документ";		
		стррРезультат.РеквизитОбработки = "ДокументыПосещений";
		стррРезультат.Префикс			= "ДокПсщ";
		стррРезультат.ФормаЭлемента		= "ДокументПосещение";
		стррРезультат.МаксКоличество	= 1000; // максимально допустимое количество документов в ТЗ списка документов
		
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ВОСвойстваОбъекта(): неизвестное значение параметра ВидОбъекта - '; uk = 'Функція ВОСвойстваОбъекта(): невідоме значення параметра ВидОбъекта -'") + ВидОбъекта);
	КонецЕсли; 
	
	гВОКэшСвойств.Вставить(ВидОбъекта, стррРезультат);
	
	Возврат стррРезультат;

КонецФункции 

// Функция возвращает коды иконок статуса элемента (виртуального объекта) для отображения на форме списка в первой колонке.
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   Число  - код иконки статуса элемента.
// 	 
Функция ВОИконкиСтатуса(стррВО)

	Если стррВО.КорневойВид = "Справочник" Тогда
		стррРезультат = Новый Структура("Записан,Помечен", 3, 4);
	ИначеЕсли стррВО.КорневойВид = "Документ" Тогда
		стррРезультат = Новый Структура("Записан,Проведен,Помечен", 0, 1, 2);	
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ВОИконкиСтатуса() - неизсвестное значение свойства КорневойВид = '; uk = 'Функція ВОИконкиСтатуса(): невідоме значення властивості КорневойВид -'") + стррВО.КорневойВид);
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции 

// Функция загружает виртуальный объект из хранилища.
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 
// Возвращаемое значение:
//   Структура  - виртуальный объект.
//
Функция ВОЗагрузитьЭлемент(стррВО, ID) Экспорт
	
	Возврат ПолучитьОбъектИзХранилища(стррВО.Префикс, ID);
	
КонецФункции 	

// Функция загружает таблицу значений виртуальных объектов из хранилища (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 ИспользоватьКэш - Булево - использовать кэш для прочитанных ранее результатов вызова функции.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица виртуальных объектов.
//
Функция ВОЗагрузитьТЗ(Параметр, ИспользоватьКэш = Ложь) Экспорт
	
	стррВО = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр, ВОСвойстваОбъекта(Параметр)); // системные свойства виртуального объекта
	
	тз = Неопределено;
	
	Если ИспользоватьКэш Тогда
		Если стррВО.КорневойВид = "Документ" Тогда
			Если гВДокКэшТЗЖурналов = Неопределено Тогда
				гВДокКэшТЗЖурналов = Новый Соответствие;
			КонецЕсли; 
			ствКэш = гВДокКэшТЗЖурналов;
		ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
			Если гВСпрКэшТЗСправочника = Неопределено Тогда
				гВСпрКэшТЗСправочника = Новый Соответствие;
			КонецЕсли; 
			ствКэш = гВСпрКэшТЗСправочника;
		Иначе
			ВызватьИсключение(НСтр("ru = 'Функция ВОЗагрузитьТЗ() - неизвестное значение свойства КорневойВид = '; uk = 'Функція ВОЗагрузитьТЗ() - невідоме значення властивості КорневойВид -'") + стррВО.КорневойВид);
		КонецЕсли;
		тз = ствКэш.Получить(стррВО.ВидОбъекта);
	КонецЕсли; 
	
	Если тз = Неопределено Тогда
		тз = ПрочитатьЗначениеНастройки(стррВО.РеквизитОбработки);
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			тз = ВОСоздатьТЗ(стррВО);
			ВОСохранитьТЗ(стррВО, тз);
		КонецЕсли;
		Если ИспользоватьКэш Тогда
			ствКэш.Вставить(стррВО.ВидОбъекта, тз);	
		КонецЕсли; 
	КонецЕсли; 
	
	ВОСократитьТЗ(стррВО, тз);
	
	Возврат тз;
	
КонецФункции

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (объектов одного вида).
//
Функция ВОСоздатьТЗ(стррВО)
	
	Если стррВО.КорневойВид = "Документ" Тогда
		Возврат ВДокСоздатьТЗ(стррВО.ВидОбъекта);
	ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
		Возврат ВСпрСоздатьТЗ(стррВО.ВидОбъекта);
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ВОСоздатьТЗ() - неизвестное значение свойства КорневойВид = '; uk = 'Функція ВОСоздатьТЗ() - невідоме значення властивості КорневойВид -'") + стррВО.КорневойВид);
	КонецЕсли;

КонецФункции

// Процедура сохраняет таблицу значений виртуальных объектов в хранилище.
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 тз - ТаблицаЗначений - таблица виртуальных объектов (объектов одного вида).
//
Процедура ВОСохранитьТЗ(Параметр, тз) Экспорт
	
	РеквизитОбработки = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр.РеквизитОбработки, ВОСвойстваОбъекта(Параметр).РеквизитОбработки);
	СохранитьЗначениеНастройки(РеквизитОбработки, тз);
	
КонецПроцедуры

// Сохранение виртуального объекта в хранилище значений (и самого объекта и обновление таблицы виртуальных объектов данного вида). 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 стррОбъект - Структура - сохраняемый виртуальный объект.
//
Процедура ВОСохранить(стррВО, ID, стррОбъект) Экспорт

	// Этап 1. Сохранение самого элемента в хранилище.	
	СохранитьОбъектВХранилище(стррВО.Префикс, ID, стррОбъект);
	
	// Этап 2. Обновление в хранилище ТЗ списка элементов
	тз = ВОЗагрузитьТЗ(стррВО, Истина);
	
	СтрокаТ = тз.Найти(ID, "ID");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = тз.Добавить();
		СтрокаТ.ID = ID;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТ, стррОбъект);
	
	ВОСохранитьТЗ(стррВО, тз);

КонецПроцедуры

// Процедура удаляет виртуальные объекты из хранилища. Удаляются сами элементы 
// и обновляется таблица значений, ссылающиеся на элементы.
// Параметры: 
// 	 стррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 мИдентификаторы - Массив	 - массив значений типа УникальныйИдентификатор - идентификаторы удаляемых объектов.
// 	 ВключаяТЗ  	 - Булево    - удалять данные в т.ч. и в таблице значений.
//
Процедура ВОУдалитьЭлементы(стррВО, мИдентификаторы, ВключаяТЗ = Истина) Экспорт
	
	УдалитьОбъектыИзХранилища(стррВО.Префикс, мИдентификаторы);
	
	Если ВключаяТЗ Тогда // нужно удалить записи из ТЗ списка элементов
		
		тз = ВОЗагрузитьТЗ(стррВО);
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого ИдОбъекта Из мИдентификаторы Цикл
			СтрокаТ = тз.Найти(ИдОбъекта, "ID");
			Если СтрокаТ <> Неопределено Тогда
				тз.Удалить(СтрокаТ);
			КонецЕсли;
		КонецЦикла; 
		
		ВОСохранитьТЗ(стррВО, тз); // записываем измененную таблицу
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура помечает на удаление виртуальные объекты в хранилище. 
// Параметры: 
// 	 стррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 мИдентификаторы - Массив	 - массив значений типа УникальныйИдентификатор - идентификаторы помечаемых на удаление объектов.
//
Процедура ВОПометитьНаУдалениеЭлементы(стррВО, мИдентификаторы) Экспорт
	
	тз = ВОЗагрузитьТЗ(стррВО);
	Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли; 
	
	стррИконки = ВОИконкиСтатуса(стррВО);
	СтатусПомечен = стррИконки.Помечен;
	СтатусЗаписан = стррИконки.Записан;
	
	Для каждого ИдОбъекта Из мИдентификаторы Цикл
		СтрокаТ = тз.Найти(ИдОбъекта, "ID");
		Если СтрокаТ <> Неопределено Тогда
			СтрокаТ.Статус = ?(СтрокаТ.Статус <> СтатусПомечен, СтатусПомечен, СтатусЗаписан);
		КонецЕсли;
	КонецЦикла; 
		
	// записываем измененную таблицу
	ВОСохранитьТЗ(стррВО, тз);
	
КонецПроцедуры

// Процедура удаляет из хранилища лишние (устаревшие) элементы. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 тз 	- ТаблицаЗначений - таблица элементов.
//
Процедура ВОСократитьТЗ(стррВО, тз)
	
	Если Не ЗначениеЗаполнено(стррВО.МаксКоличество) Тогда 
		Возврат;
	ИначеЕсли тз.Количество() <= стррВО.МаксКоличество Тогда 
		Возврат;
	КонецЕсли; 
	
	// нужно удалить устаревшие элементы
	Если стррВО.КорневойВид = "Документ" Тогда
		ВДокСократитьТЗ(стррВО, тз);
	Иначе // для справочников пока не предусмотрено удаление устаревших элементов
	КонецЕсли; 

КонецПроцедуры

// Функция находит строку в таблице элементов по идентификатору. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// Возвращаемое значение: СтрокаТаблицыЗначений  - найденная по идентификатору строка таблицы значений.
// 
Функция ВОПолучитьСтрокуТЗ(стррВО, ID) Экспорт
	
	тз = ВОЗагрузитьТЗ(стррВО, Истина);
	Возврат тз.Найти(ID, "ID");
	
КонецФункции

// ВиртуальныеОбъекты_Надстройка
#КонецОбласти 

#Область ВиртуальныеОбъекты_Документы

// Процедура дополняет контекст формы виртуального документа (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВДокКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда // процедура вызвана для формы списка документов
		//СтррКонтекст.Вставить("РедактироватьРеквизитыМТ", Истина); // признак разрешения редактирования координат		
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы документа
		СтррКонтекст.Вставить("IDNew");
		СтррКонтекст.Вставить("ИспользоватьДоговоры", ВДокИспользоватьДоговоры(СтррКонтекст.ВО.ВидОбъекта));
	КонецЕсли; 
	
КонецПроцедуры

Функция ВДокЭтоВиртуальныйДокумент(ВидДокумента) Экспорт
	
	Возврат Лев(ВидДокумента, 1) = "_"; // названия вида виртуальных документов начинаются с "_"
		
КонецФункции

Функция ВДокРеквизитыШапки(ВидДокумента)

	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,СуммаДокумента,ДокументОснование,ВремяНачала,ВремяОкончания,Широта,Долгота";
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,РезультатПосещения,РезультатПосещения_Представление,ВремяНачала,ВремяОкончания,Широта,Долгота";
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ВДокРеквизитыШапки(): неизвестное значение параметра ВидДокумента = ""'; uk = 'Функція ВДокРеквизитыШапки(): невідоме значення параметра ВидДокумента = ""'") + ВидДокумента + """!");
	КонецЕсли; 	
	
	Возврат Результат;

КонецФункции

Функция ВДокМассивРеквизитов(ВидДокумента) Экспорт
	
	Возврат СтрРазделить_(ВДокРеквизитыШапки(ВидДокумента));
	
КонецФункции

Процедура ВДокДобавитьРеквизитыТЧ(ВидДокумента, стррДокумент)

	ОписаниеТипаКоличество  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
	ОписаниеТипаСумма 		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	
	ТЗ = Новый ТаблицаЗначений;	
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		
		ТЗ.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		//ТЗ.Колонки.Добавить("Упаковка",				Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));   //унф
		//ТЗ.Колонки.Добавить("КоличествоУпаковок",	ОписаниеТипаКоличество);                                                 //унф
		ТЗ.Колонки.Добавить("Количество", 			ОписаниеТипаКоличество);
		ТЗ.Колонки.Добавить("Цена",					ОписаниеТипаСумма);
		ТЗ.Колонки.Добавить("Сумма",				ОписаниеТипаСумма);
		
		стррДокумент.Вставить("Товары", ТЗ);
		
	КонецЕсли; 

КонецПроцедуры

Функция ВДокПредставление(ВидДокумента, стзЖурнала) Экспорт
	
	Возврат СвойстваВидаОбъекта(ВидДокумента, "Вид", "Документ").Представление 
		+ ?(ЗначениеЗаполнено(стзЖурнала.Номер), " " + СокрЛП(стзЖурнала.Номер), "") + Нстр("ru = ' от '; uk = ' від '") + стзЖурнала.Дата;
	
КонецФункции 

// Функция возвращает признак - используются в виртуальном документе договоры/соглашения или нет.
Функция ВДокИспользоватьДоговоры(ВидДокумента) 
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Возврат Истина;	
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Возврат Ложь;
	Иначе
		ВызватьИсключение(Нстр("ru = 'Функция ВДокИспользоватьДоговоры(): неизвеcтное значение параметра ВидДокумента - '; uk = 'Функція ВДокИспользоватьДоговоры(): невідоме значення параметра ВидДокумента -  '") + ВидДокумента);
	КонецЕсли; 
	
КонецФункции

// Процедура удаляет из таблицы значений устаревшие документы. Обновленную таблицу записывает в хранилище. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 тз 	- ТаблицаЗначений - таблица документов.
//
Процедура ВДокСократитьТЗ(стррВО, тз)
	
	Если ЗначениеЗаполнено(стррВО.МаксКоличество) И тз.Количество() > стррВО.МаксКоличество Тогда // нужно удалить устаревшие документы
		
		КоличествоУдаляемых = тз.Количество() - стррВО.МаксКоличество;
		мИдентификаторы = Новый Массив;
		Для Шаг = 1 По КоличествоУдаляемых Цикл
			CтрокаТ = тз[0];
			Если Шаг = 1 Тогда
				ВремяНачала = CтрокаТ.Дата;
			ИначеЕсли Шаг = КоличествоУдаляемых Тогда
				ВремяОкончания = CтрокаТ.Дата;		
			КонецЕсли; 
			мИдентификаторы.Добавить(тз[0].ID);
			тз.Удалить(0);
		КонецЦикла;
		
		// записываем урезанную таблицу
		ВОСохранитьТЗ(стррВО, тз);

		// удаляем сами документы - по их идентификаторам
		ВОУдалитьЭлементы(стррВО, мИдентификаторы, Ложь);
		
		Если КоличествоУдаляемых = 1 Тогда
			Текст = СтрШаблон_(НСтр("ru='Удален один устаревший документ от %1 для оптимизации журнала документов.';uk='Вилучений один застарілий документ від %1 для оптимізації журналу документів.'"), ВремяНачала);
		Иначе			
			стрУдалено = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоУдаляемых, НСтр("ru='документ, документа, документов';uk='документ, документа, документів'"));
			Текст = СтрШаблон_(НСтр("ru='Удалено %1 (с %2 по %3) для оптимизации журнала документов.';uk='Вилучено %1 (з %2 по %3) для оптимізації журналу документів.'"), стрУдалено, ВремяНачала, ВремяОкончания);
		КонецЕсли; 
		
		Текст = Текст + " " + СтрШаблон_(НСтр("ru='Максимально допустимое количество документов в журнале: %1.';uk='Максимально допустима кількість документів в журналі: %1.'"), стррВО.МаксКоличество);
		Сообщить(Текст);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидСправочника - Строка - вид виртуального документа.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального документа).
//   
Функция ВДокСоздатьТЗ(ВидДокумента)

	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаДатаВремя     = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаСтрока  	  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево  	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтатус  	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаКоордината 	  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ОписаниеТипаСумма 		  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID",  	 		 	ОписаниеТипаИдентификатор); // идентификатор документа
	ТЗ.Колонки.Добавить("Дата",  	 		ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("Номер",			ОписаниеТипаСтрока);
	ТЗ.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);
	ТЗ.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		ТЗ.Колонки.Добавить("СуммаДокумента",		ОписаниеТипаСумма);	
		ТЗ.Колонки.Добавить("ДокументОснование", 	ОписаниеТипаВсеДокументы);
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		ТЗ.Колонки.Добавить("РезультатПосещения",				ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("РезультатПосещения_Представление",	ОписаниеТипаСтрока);
	Иначе
		ВызватьИсключение(Нстр("ru = 'Функция ВДокСоздатьТЗЖурнала(ВидДокумента): неизвестное значение параметра: '; uk = 'Функція ВДокСоздатьТЗЖурнала(ВидДокумента): невідоме значення параметра: '") + ВидДокумента);
	КонецЕсли; 
	
	ТЗ.Колонки.Добавить("ВремяНачала",		ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("ВремяОкончания",	ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("Широта",			ОписаниеТипаКоордината);
	ТЗ.Колонки.Добавить("Долгота",			ОписаниеТипаКоордината);
	
	//++УНФ
	//ТЗ.Колонки.Добавить("Партнер",			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	//--УНФ
	ТЗ.Колонки.Добавить("Контрагент",		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗ.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗ.Колонки.Добавить("Сотрудник",			Новый ОписаниеТипов("СправочникСсылка.Сотрудники")); //унф 20180115 ТЗ.Колонки.Добавить("Менеджер",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Возврат ТЗ;

КонецФункции

// ВиртуальныеОбъекты_Документы
#КонецОбласти

#Область ВиртуальныеОбъекты_Справочники

// Процедура дополняет контекст формы виртуального сроавочника (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидСправочника - Строка - вид виртуального справочника.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВСпрКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда 
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы элемента
		СтррКонтекст.Вставить("IDNew");	
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидСправочника - Строка - вид виртуального справочника.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального справочника).
//
Функция ВСпрСоздатьТЗ(ВидСправочника)
	
	ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаСтатус  		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаСтрока  		= Новый ОписаниеТипов("Строка");
	
	ТЗ = Новый ТаблицаЗначений;
	
	Если ВидСправочника = "_РезультатыПосещений" Тогда
	
		ТЗ.Колонки.Добавить("ID",  	 		 	ОписаниеТипаИдентификатор); // идентификатор документа
		ТЗ.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);		
		ТЗ.Колонки.Добавить("Наименование",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТЗ.Колонки.Добавить("ШаблонАнкеты",		ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ШаблонАнкеты_Представление",	ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
		
	Иначе
		
		ВызватьИсключение(Нстр("ru = 'Функция ВСпрИмяТЗЭлементов(): неизвестное значение параметра ВидСправочника - '; uk = 'Функція ВСпрИмяТЗЭлементов(): невідоме значення параметра ВидСправочника - '") + ВидСправочника);
		
	КонецЕсли; 
	
	Возврат ТЗ;
	
КонецФункции

// ВиртуальныеОбъекты_Справочники
#КонецОбласти

// ВиртуальныеОбъекты
#КонецОбласти

#Область СлужебныеДанные

// Функция возвращает признак - хранить служебные данные в файлах (Истина) или в хранилище (Ложь)
Функция СДХранитьВФайлах()
	
	Если гСлужебныеДанныеВФайлах = Неопределено Тогда	
		гСлужебныеДанныеВФайлах = Ложь; // хранение в Хранилище подтверждений для загруженных: документов, справочников, треков. 
	КонецЕсли;
	
	Возврат гСлужебныеДанныеВФайлах;
	
КонецФункции

Функция СДИмяФайлаДляМУ(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_data.txt";
	
КонецФункции

// Чтение служебных данных
Функция СДПрочитать(Имя, СоздатьЕслиНетДанных = Ложь)
	
	Если СДХранитьВФайлах() Тогда
		стррДанные = СДОткрытьФайл(ПодкаталогДанных("Входящие") + Имя);
	Иначе
		стррДанные = ПрочитатьЗначениеНастройки(Имя);
	КонецЕсли;
	
	Если ТипЗнч(стррДанные) <> Тип("Структура") И СоздатьЕслиНетДанных Тогда
		стррДанные = Новый Структура;
	КонецЕсли; 
	
	Возврат стррДанные;
	
КонецФункции

// Сохранение служебных данных
Функция СДЗаписать(Имя, Данные)
	
	Если СДХранитьВФайлах() Тогда
		ИмяФайла = ПодкаталогДанных("Входящие") + Имя;
		Попытка
			ЗначениеВФайл(ИмяФайла, Данные);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось сохранить служебные данные в файл. Проверьте права доступа. Файл: %1'; uk = 'Неможливо зберегти службові дані в файл. Перевірте права доступу. Файл: %1'"),
							 ИмяФайла);
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(Имя, Данные);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает прочитанные служебные данные.
Функция СДОткрытьФайл(ИмяФайла)
	
	Результат = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    Данные = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = НСтр("ru = 'Ошибка чтения файла служебных данных. Файл: '; uk = 'Не можу прочитати файл службових даних. Файл: '") + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Результат = Данные;			
		Иначе
			Текст = НСтр("ru = 'Файл служебных данных поврежден. Будет создан новый файл: '; uk = 'Файл службових даних пошкоджений. Буде створено новий файл: '") + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СДИдентификаторВИмяФайла(Идентификатор)
	
	Возврат СтрЗаменить(НРег(Строка(Идентификатор)), "-", "");
	
КонецФункции

// СлужебныеДанные
#КонецОбласти 

#Область СлужебныеТаблицыЗначений

// Функция загружает служебную таблицу из хранилища в память.
// Возвращает Истина, если таблица успешно загружена (или создана, если не была создана ранее).
Функция СТЗЗагрузить(стрИмяТаблицы)
	
	Если гКэшСлужебныхТаблиц = Неопределено Тогда
		гКэшСлужебныхТаблиц = Новый Структура;
	КонецЕсли; 
	
	//унф 
	//Если стрИмяТаблицы = "СпрХарактеристикиНоменклатурыСлужебный" И Не ИспользоватьХарактеристики Тогда
	//	Возврат Ложь;
	//КонецЕсли; 
	
	тз = ПрочитатьЗначениеНастройки(стрИмяТаблицы);
	Если тз = Неопределено Тогда
		
		ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");	
		
		тз = Новый ТаблицаЗначений;
		
	    Если стрИмяТаблицы = "СпрХарактеристикиНоменклатурыСлужебный" Тогда // соответствие характеристик номенклатуры в 1С и МТ
			
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);
			тз.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")); // соответствующий элемент справочника в 1С			
			тз.Колонки.Добавить("Номенклатура",   	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			
		ИначеЕсли стрИмяТаблицы = "СпрСоглашенияСКлиентамиСлужебный" Тогда // соответствие соглашений в 1С и МТ (приходится дублировать в МТ соглашения для партнеров с учетом иерархии партнеров)
			
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);
			
			//УНФ
			//тз.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами")); // соответствующий элемент справочника в 1С
			//тз.Колонки.Добавить("Партнер", 			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
			тз.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов")); // соответствующий элемент справочника в 1С
			тз.Колонки.Добавить("Партнер", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			
			//--
			
		ИначеЕсли стрИмяТаблицы = "..." Тогда // добавить другие служебные таблицы сюда
			
			// ...
			
		Иначе
			ВызватьИсключение(Нстр("ru = 'Функция СТЗЗагрузить() - неизвестное значение параметра стрИмяТаблицы = '; uk = 'Функція СТЗЗагрузить() - невідоме значення параметра стрИмяТаблицы - '") + стрИмяТаблицы);
		КонецЕсли; 
		
	КонецЕсли;
	
	гКэшСлужебныхТаблиц.Вставить(стрИмяТаблицы, тз);
	гКэшСлужебныхТаблиц.Вставить(стрИмяТаблицы + "_Изменен", Ложь); // признак, что ТЗ была изменена
	
	Возврат Истина;

КонецФункции

// Процедура сохраняет все измененные служебные таблицы в хранилище значений.
Процедура СТЗСохранить(ИмяТаблицы)
	
	Если гКэшСлужебныхТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "Все" Тогда // сохранение всех таблиц
		Для каждого Элемент из гКэшСлужебныхТаблиц Цикл
			Если Найти(Элемент.Ключ, "_Изменен") <> 0 И гКэшСлужебныхТаблиц[Элемент.Ключ] = Истина Тогда // в свойстве установлен признак изменения служебной таблице
				ИмяТЗ = СтрЗаменить(Элемент.Ключ, "_Изменен", "");
				СохранитьЗначениеНастройки(ИмяТЗ, гКэшСлужебныхТаблиц[ИмяТЗ]);
				гКэшСлужебныхТаблиц[Элемент.Ключ] = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли гКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Истина Тогда // сохранение конкретной таблицы
		СохранитьЗначениеНастройки(ИмяТаблицы, гКэшСлужебныхТаблиц[ИмяТаблицы]);
		гКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Функция СТЗСсылкаНаЭлементБД1С(Идентификатор, ИмяТЗ)
	
	СтрокаТ = гКэшСлужебныхТаблиц[ИмяТЗ].Найти(Идентификатор, "Идентификатор");
	Если СтрокаТ <> Неопределено Тогда
		Возврат СтрокаТ.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция СТЗИдентификаторЭлементаДляМТ(стррПоиск, ИмяТЗ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(стррПоиск.Ссылка) Тогда
		
		тз = гКэшСлужебныхТаблиц[ИмяТЗ];
		мСтроки = тз.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() <> 0 Тогда
			Результат = мСтроки[0].Идентификатор;
		Иначе
			СтрокаТ = тз.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, стррПоиск);
			Результат = Новый УникальныйИдентификатор;			
			СтрокаТ.Идентификатор   = Результат;
			гКэшСлужебныхТаблиц[ИмяТЗ + "_Изменен"] = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;		
	
КонецФункции

// СлужебныеТаблицыЗначений
#КонецОбласти 

#Область ХарактеристикиНоменклатуры

Функция ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики)
	
	//Если ИспользоватьХарактеристики Тогда
		
		Если ИдХарактеристики = Неопределено Или ЭтоПустойИдентификатор(ИдХарактеристики) Тогда
			Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			Результат = СТЗСсылкаНаЭлементБД1С(Новый УникальныйИдентификатор(ИдХарактеристики), "СпрХарактеристикиНоменклатурыСлужебный");
			Если Результат = Неопределено Тогда
				Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
	//Иначе 
	//	Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ХарактеристикиНоменклатуры
#КонецОбласти 

#Область ПодтвержденияДанных
// Процедуры и функции чтения и сохранения данных подтверждений.

// Функция возвращает таблицу значений с подтверждениями.
// Если параметр ДляЧтения = Истина и если файл подтверждений не существует или недоступен, то возвращается Неопределено.
// Если параметр ДляЧтения = Ложь и если файл подтверждений не существует или недоступен, то возвращается пустая таблица значений.
Функция ПодтвержденияОткрытьФайл(ИмяФайла, ДляЧтения)
	
	тз = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    тз = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Ошибка чтения файла подтверждений. Файл: ""%1""'; uk = 'Помилка читання файлу підтверджень. Файл: ""%1""'"),
							ИмяФайла);
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		ТекстСоздание = ?(ДляЧтения, "", НСтр("ru = 'Будет создан новый файл.'; uk = 'Буде створено новий файл.'")) + НСтр("ru = ' Файл: '; uk = ' Файл: '");
		
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			Текст = НСтр("ru = 'Файл подтверждений поврежден. '; uk = 'Файл підтверджень пошкоджений.'") + ТекстСоздание + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		Иначе
			Колонки = "Дата,Идентификатор";
			Если Не тзЕстьКолонки(тз, Колонки) Тогда
				Текст = НСтр("ru = 'Таблица в файле подтверждений не содержит колонок: '; uk = 'Таблиця в файлі підтверджень не містить колонок: '") + Колонки + ". " + ТекстСоздание + ИмяФайла;
				ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тз;
	
КонецФункции

// Функция сокращает количество записей в ТЗ подтверждений до заданного.
// Если удалялись лишние строки, то возвращается Истина.
Функция ПодтвержденияСократить(тз, МаксКоличествоСтрок)
	
	тз.Сортировать("Дата");  // сначала будут идти самые ранние строки по хронологии загрузки/обновления, их и будем удалять из подтверждений.
	Возврат тзСократитьДоКоличестваСтрок(тз, МаксКоличествоСтрок);
	
КонецФункции

// Сохранение всех подтверждений (для документов, справочников, фотографий) в хранилище на основе данных в структуре ЗагружаемыеОбъекты.
Процедура ПодтвержденияСохранитьВсе(СсылкаМУ, ЗагружаемыеОбъекты)
	
	МаксКоличествоСтрок = 200; // максимальное количество документов в буфере перед добавлением новых документов.
	
	тз = ПодтвержденияСДОткрыть("Документы", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(тз, МаксКоличествоСтрок);
	
	ТекДата = ТекущаяДата();
	
	тзДокументы = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы;
	
	Для Каждого стзДокументы Из тзДокументы Цикл
		ИдДокумента = стзДокументы.Идентификатор; // gi_170830 это GUID
		СтрокаТ = тз.Найти(ИдДокумента, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор 	 = ИдДокумента; // gi_170830 это GUID
			СтрокаТ.ВидДокумента  	 = стзДокументы.ВидДокумента;
			СтрокаТ.ИдВидДокументаМТ = стзДокументы.ИдВидДокументаМТ; // gi_170830 это GUID
		КонецЕсли;
		СтрокаТ.Дата 		  = ТекДата;	// Если документ выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
		СтрокаТ.ДатаДокумента = стзДокументы.ДатаДокумента;	 // gi_180123 дата документа в МУ могла быть изменена
	КонецЦикла;
	
	ПодтвержденияСДСохранить("Документы", СсылкаМУ, тз);
	
	// sd_10082017 {
	тз = ПодтвержденияСДОткрыть("Справочники", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(тз, МаксКоличествоСтрок);
	
	ТекДата = ТекущаяДата();
	
	тзСправочники = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники;
	
	Для Каждого стзСправочники Из тзСправочники Цикл
		ИдЭлементаСправочника = стзСправочники.Идентификатор; // gi_170902
		СтрокаТ = тз.Найти(ИдЭлементаСправочника, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
			СтрокаТ.ИдВидСправочникаМТ 	= сТЗСправочники.ИдВидСправочникаМТ;
		КонецЕсли;
		СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
	КонецЦикла;
	
	//(( gi_180417 дополнительно добавляем подтверждения для справочника МТ "ФотоДокументов" и подтверждения для тэга PICTURES
	// строки добавляются в объекты тз и тзPictures	
	тзPictures = ПодтвержденияСДОткрыть("Фото", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ИзмененаТЗPictures  = ПодтвержденияСократить(тзPictures, МаксКоличествоСтрок);

	тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
	СчетчикФотографий = 0; // количество загруженных фотографий для подтверждения
	
	ИдВидСправочникаМТ_ФотоДокументов = СвойстваВидаОбъекта("Справочник.ФотоДокументов", "ВидДляМТ").ИдентификаторВида; 
	Для Каждого стзФотографии Из тзФотографии Цикл
		Если стзФотографии.Загружено Тогда // подтверждения будут только для фото с загруженными изображениями
			
			// добавление в тз (подтверждения для справочников)
			ИдЭлементаСправочника = Новый УникальныйИдентификатор(стзФотографии.GUID);
			СтрокаТ = тз.Найти(ИдЭлементаСправочника, "Идентификатор");
			Если СтрокаТ = Неопределено Тогда
				СтрокаТ = тз.Добавить();
				СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
				СтрокаТ.ИдВидСправочникаМТ 	= ИдВидСправочникаМТ_ФотоДокументов;
			КонецЕсли;
			СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
			
			Если Не ПодтверждатьВсеФотографии Тогда // при подтверждении всех фотографий данные в тзPictures уже актуализированы в процедуре ЗагрузитьФотографииЭтап2()
			
				// добавление в тзPictures (подтверждения для картинок)
				ИдФото = Новый УникальныйИдентификатор(стзФотографии.ИдФото);
				СтрокаТ = тзPictures.Найти(ИдФото, "Идентификатор");
				Если СтрокаТ = Неопределено Тогда
					СтрокаТ = тзPictures.Добавить();
					СтрокаТ.Идентификатор = ИдФото;
				КонецЕсли;
				СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
				ИзмененаТЗPictures = Истина;				
			
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИзмененаТЗPictures Тогда
		ПодтвержденияСДСохранить("Фото", СсылкаМУ, тзPictures);
	КонецЕсли; 
	
	//)) gi_180417
	
	ПодтвержденияСДСохранить("Справочники", СсылкаМУ, тз);
	// } sd_10082017
	
КонецПроцедуры

Функция ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ)
	
	Если ВидДанных = "Документы" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_doc.txt";
	ИначеЕсли ВидДанных = "Справочники" Тогда		
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_cat.txt";
	ИначеЕсли ВидДанных = "Фото" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_pict.txt";
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Функция ИмяФайлаПодтверждений(): неизвестное значение параметра ВидДанных = ""%1""'; uk = 'Функція ИмяФайлаПодтверждений(): невідоме значення параметра ВидДанных = ""%1""'"),
							ВидДанных);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
КонецФункции

// Сохранение подтверждений в служебных данных (СД)
Функция ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, тз)
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда // gi_170902		
		Попытка
			ЗначениеВФайл(ПодкаталогДанных("Входящие") + ИмяФайла, тз);
		Исключение
			Текст = Нстр("ru = 'Не удалось сохранить файл подтверждений. Проверьте права доступа. Файл:'; uk = 'Неможливо зберегти файл підтверджень. Перевірте права доступу. файл:'") + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(ИмяФайла, тз);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Открытие подтверждений из служебных данных (СД)
Функция ПодтвержденияСДОткрыть(ВидДанных, СсылкаМУ, ДляЧтения) Экспорт 
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда
		тз = ПодтвержденияОткрытьФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ДляЧтения);
	Иначе
		тз = ПрочитатьЗначениеНастройки(ИмяФайла);
	КонецЕсли;
	
	Если тз = Неопределено Тогда // создаем пустую ТЗ
		
		ОписаниеТипаДата   			= Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
		ОписаниеТипаСтрока 			= Новый ОписаниеТипов("Строка");
		
		тз = Новый ТаблицаЗначений;
		
		Если ВидДанных = "Документы" Тогда
			
			тз.Колонки.Добавить("Дата", 			ОписаниеТипаДата);					
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого документа
			тз.Колонки.Добавить("ВидДокумента",  	ОписаниеТипаСтрока);
			тз.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // идентификатор (GUID) вида документа в МТ
			тз.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); 			// gi_180123 добавлено фиксирование даты создания документа в МУ для более удобного отображения "Журнала обмена данными" для пользователя.
			
		ИначеЕсли ВидДанных = "Справочники" Тогда
			
			тз.Колонки.Добавить("Дата", 				ОписаниеТипаДата);
			тз.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор); // GUID подтверждаемого элемента справочника
			тз.Колонки.Добавить("ИдВидСправочникаМТ",	ОписаниеТипаИдентификатор); // gi_170830 идентификатор (GUID) справочника в МТ
			
		ИначеЕсли ВидДанных = "Фото" Тогда
			
			тз.Колонки.Добавить("Дата", 			ОписаниеТипаДата);
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого изображения

		Иначе
			ВызватьИсключение(Нстр("ru = 'Функция ПодтвержденияСДОткрыть(): неизвестное значение параметра ВидДанных = ""'; uk = 'Функція ПодтвержденияСДОткрыть(): невідоме значення параметра ВидДанных = ""'") + ВидДанных + """");
		КонецЕсли; 

	КонецЕсли;
	
	Если ВидДанных = "Документы" Тогда
	
		Если тз.Колонки.Найти("ДатаДокумента") = Неопределено Тогда 
			ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			тз.Колонки.Добавить("ДатаДокумента", ОписаниеТипаДата); // дата создания документа в МУ
			Если Не ДляЧтения Тогда
				ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, тз);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тз;
	
КонецФункции

//vd_181003 Сделана экспортной (Вызывается из МодульОбновлений) 
Процедура ПодтвержденияУдалить(ВидДанных, мСсылкиМУ = Неопределено) Экспорт 
	
	Если мСсылкиМУ = Неопределено Тогда
		ТЗ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТЗ = Неопределено Тогда
			Возврат;
		Иначе
			мСсылкиМУ = ТЗ.ВыгрузитьКолонку("ID");
		КонецЕсли;
	КонецЕсли;
	
	мИмена = Новый Массив;	
	
	Для Каждого СсылкаМУ Из мСсылкиМУ Цикл
		мИмена.Добавить(ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ));
	КонецЦикла;
	
	Если СДХранитьВФайлах() Тогда
		
		Каталог = ПодкаталогДанных("Входящие");
		Для Каждого ИмяФайла Из мИмена Цикл
			ПолныйПуть = Каталог + ИмяФайла;
			Попытка
				УдалитьФайлы(ПолныйПуть);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		УдалитьЗначенияНастроек(мИмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// ПодтвержденияДанных
#КонецОбласти 

#Область ВыгрузкаДанных

Функция СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки)

	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
		ДокОбмена.ЗаписатьОбъявлениеXML();	
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");

		ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
		
		ДокОбмена.ЗаписатьАтрибут("DATASOURCENAME", "МобильнаяТорговля");
		ДокОбмена.ЗаписатьАтрибут("DATASOURCEVERSION", "1.0.1"); // Ратмир

		ДокОбмена.ЗаписатьАтрибут("CONFIG1CNAME", СокрЛП(Метаданные.Имя));
		ДокОбмена.ЗаписатьАтрибут("CONFIG1CVERSION", СокрЛП(Метаданные.Версия));

		Возврат ДокОбмена;
	Исключение
		Текст = НСтр("ru='Ошибка создания файла выгрузки по причине:';uk='Помилка створення файлу вивантаження через:'") + " " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", , "ТекущийАгент");
		Возврат Неопределено;
	КонецПопытки;

КонецФункции 

Процедура ЗакрытьФайлВыгрузки(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.Закрыть();

КонецПроцедуры

Процедура ВыгрузитьКонстанты(ДокОбмена)

	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Константы");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Агент = ВыбНастройкиАгента.Сотрудник;

	// НаименованиеАгента
	ДобавитьКонстанту(ДокОбмена, "a2e1cc68-0624-45a6-8057-efd35259b9fe", СокрЛП(Агент)); 
	
	// ИдентификаторАгента
	ДобавитьКонстанту(ДокОбмена, "79c698db-3c55-465e-acfe-4741acdd5655", Агент.УникальныйИдентификатор());
	
	// Дата последней выгрузки данных из ЦБД
	ДобавитьКонстанту(ДокОбмена, "d0604fdf-b2a5-44b7-b84d-db2a9a691918", Формат(ТекущаяДата(), "ДФ=гггг-ММ-дд'T'ЧЧ:мм:сс"));

	// Константа измененной нумерации - только для УТ 8, ред. 11
	ДобавитьКонстанту(ДокОбмена, "c186c395-658c-4b42-b007-f50da543a9d8", "1");
	
	// Константа ТорговляСКолес, при включенной настройке документ "Реализация" будет доступным для редактирования.  
	ДобавитьКонстанту(ДокОбмена, "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c", ТорговляСКолес);
	
	// Основная организация
	ДобавитьКонстанту(ДокОбмена, "13faf2a0-3d1e-469e-bc53-cdada6ac1375", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнаяОрганизация)); 
	
	// Основной склад
	ДобавитьКонстанту(ДокОбмена, "86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойСклад));
	
	// Мобильный склад
	ДобавитьКонстанту(ДокОбмена, "448b6fab-5e21-479c-9a9a-63e8eced59b9", 
			?(ТорговляСКолес И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
	
	// Основной тип цены
	ДобавитьКонстанту(ДокОбмена, "7bc85296-f536-411e-aaa9-74ad5c7adea2", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойТипЦены)); 
	
	//Валюта учета
	//++УНФ
	//ВалютаУчета = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	//Если ВалютаУчета.Пустая() Тогда
	//	ВалютаУчета = КонстантыПолучитьЗначение("ВалютаУправленческогоУчета");
	//КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "d2b5508c-7453-4a52-b803-a846992a485d",КонстантыПолучитьЗначение("ВалютаУчета").Наименование);
	//--УНФ
		
	// Значение надписи поля "Код" в МУ
	ДобавитьКонстанту(ДокОбмена, "7268af8a-6532-4ad0-bc63-3832f3c0d96f", 
			?(РежимВыгрузкиКодовНоменклатуры = "АРТИКУЛ", "Артикул", "Код"));
			
	// Константа ЕдиницаИзмеренияВеса
	//++УНФ
	//ДобавитьКонстанту(ДокОбмена, "13af34a5-664d-4aad-a29c-eefc04fefca9", КонстантыПолучитьЗначение("ЕдиницаИзмеренияВеса").Наименование);
	//Пусть поумолчанию будет кг
	ДобавитьКонстанту(ДокОбмена, "13af34a5-664d-4aad-a29c-eefc04fefca9", "кг");
	//--
	
	// Константа ИспользоватьХарактеристикиНоменклатуры
	//++УНФ
	//Для ут11
	//ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", ЗначениеВСтрокуДляXML(КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики));
	//Замена
	ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", ЗначениеВСтрокуДляXML(КонстантыПолучитьЗначение("ФункциональнаяОпцияИспользоватьХарактеристики")));
	//ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", "0"); //Не использовать характеристики номенклатуры
	//--		
	
	// Пересчет в базовые единицы 
	//++УНФ
	//Непередаем константу 
	//Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		//ДобавитьКонстанту(ДокОбмена, "0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", "0");
	//КонецЕсли;
	//--
	
	// Точность цены, количества и скидки
	ДобавитьКонстанту(ДокОбмена, "27952ab3-1365-4b56-a0ef-34ec0133e5d3", "2");
	ДобавитьКонстанту(ДокОбмена, "5d54ed85-fdea-4027-8ecd-129c27bdbf64", "2");
	ДобавитьКонстанту(ДокОбмена, "a978f039-3f17-4705-b7f6-16c580c9ac5f", "2");
	
	ДобавитьКонстанту(ДокОбмена, "8c52bbbf-8bbb-447d-b18b-06860d372818", ИспользоватьПунктыРазгрузки Или ИспользоватьКонтрагентов);	// В МТ - это константа "ИспользоватьТорговыеТочки" // sd_171107
	
	ДобавитьКонстанту(ДокОбмена, "b201164e-e265-4c1d-b3d0-0579bcd1fda6", ВыгружатьДоговоры());
	
	// Фактический адрес
	//++УНФ
	//ДобавитьКонстанту(ДокОбмена, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.АдресПартнера));
	ДобавитьКонстанту(ДокОбмена, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента));
	//--

	ДобавитьКонстанту(ДокОбмена, "0270b3d5-4213-419b-9e3a-48cba4caec04", ВыгружатьИсториюПродаж);

	Если ВыделятьЦветомПросроченныеДолги Тогда
		стрЦвет = ЦветВСтроку(ЦветПросроченныхДолгов);
		Если стрЦвет = "0,0,0" Тогда // Если не указан для агента определенный цвет, то по умолчанию выделяем красным
			стрЦвет = "255,0,0";
		КонецЕсли;
		// Цвет выделения просроченных долгов
		ДобавитьКонстанту(ДокОбмена, "9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", стрЦвет); // цвета передаем в виде строки R,G,B
	КонецЕсли;

	Если ИспользоватьПунктыРазгрузки Тогда 
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Пункт разгрузки";
		НадписьТорговыеТочки = "Пункты разгрузки";
	Иначе 
		// Значения надписи поля "Контрагент" в МУ
		//ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", "Партнер"); //унф
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", "Контрагент");
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Контрагент";
		НадписьТорговыеТочки = "Контрагенты";
	КонецЕсли;

	ДобавитьКонстанту(ДокОбмена, "5728ed47-0dbc-48a9-b37c-e7808766c48c", НадписьТорговаяТочка);
	ДобавитьКонстанту(ДокОбмена, "bcca6cef-853c-42f4-9b10-2ca02b1a5556", НадписьТорговыеТочки);
	
	
	// Служебные данные для МУ - в них хранится дата и время конца загруженного трека
	//++УНФ   
	//Треки не выгружаем и не загружаем поэтому время не нужно выгружать
	//стррЗначения = СДПрочитать(СДИмяФайлаДляМУ(ВыбНастройкиАгента.СсылкаМУ)); // служебные данные для МУ
	//Если Тип(стррЗначения) = Тип("Структура") И стррЗначения.Свойство("ПоследнееВремяТрека") Тогда
	//	ДобавитьКонстанту(ДокОбмена, "df297ad7-e2ce-478a-974e-fb399239e23e", стррЗначения.ПоследнееВремяТрека);
	//КонецЕсли;
	//--
	
	// Передаются настройки мобильного приложения
	ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена);

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONSTANTS

КонецПроцедуры

Процедура ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена)

	Если Не ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) Тогда
		
		ОповеститьОСобытии(НСтр("ru = 'Не указаны настройки мобильного приложения.'; uk = 'Не вказані налаштування мобільного додатка.'"));
		
	Иначе
		
		Для Каждого ЭлементНастройки Из ВыбНастройкиАгента.НастройкиМобильногоПриложения Цикл
			ЭлементНастройки = ЭлементНастройки.Значение;
			Если Не ПустаяСтрока(ЭлементНастройки.Идентификатор) Тогда
				// +АгентПлюс 2017-11-09 Виктор 
				Если ВРег(ЭлементНастройки.Идентификатор) = "61A474B1-21D0-4047-B2D5-7213A7294050" Тогда   //константа список закладок журнала
					СтрЗначениеКонстанты = "";
					// неодходимо обойти список и сформировать значение константы из значений элементов списка, не из представлений
					Для Каждого ТекСтрока Из ЭлементНастройки.Значение Цикл
						Если СтрЗначениеКонстанты = "" Тогда
							СтрЗначениеКонстанты = СокрЛП(ТекСтрока.Значение);
						Иначе
							СтрЗначениеКонстанты = СтрЗначениеКонстанты + "," + СокрЛП(ТекСтрока.Значение);
						КонецЕсли;
					КонецЦикла;
					ДобавитьКонстанту(ДокОбмена, ЭлементНастройки.Идентификатор, ЗначениеВСтрокуДляXML(СтрЗначениеКонстанты));
				Иначе
				// -АгентПлюс 2017-11-09 Виктор
					ДобавитьКонстанту(ДокОбмена, ЭлементНастройки.Идентификатор, ЗначениеВСтрокуДляXML(ЭлементНастройки.Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ВыбНастройкиАгента.Префикс);
	ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена)

	Если ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) И 
		ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("РасписаниеВеденияТрека") Тогда 
		Расписание = ВыбНастройкиАгента.НастройкиМобильногоПриложения.РасписаниеВеденияТрека.Значение;
		Если СтруктураЕстьСвойства(Расписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
			РабочееВремя = Расписание.ВремяНачала + "-" + Расписание.ВремяОкончания;
			ДобавитьКонстанту(ДокОбмена, "1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);
			ДобавитьКонстанту(ДокОбмена, "428f867c-0bf1-45b2-b812-ef1d284d3e3f", Расписание.ДниНедели);
			ДобавитьКонстанту(ДокОбмена, "e38fe34e-f36a-44c9-9dbd-a29f7c925940", Расписание.ПериодЗаписи);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ВыгрузкаПодтверждений

Процедура ВыгрузитьПодтверждения(ДокОбмена) 
	// sd_10082017 немного переделал данную процедуру, разбив на две соответственно.
	ВыгрузитьПодтвержденияСправочников(ДокОбмена);
	ВыгрузитьПодтвержденияДокументов(ДокОбмена);
	ВыгрузитьПодтвержденияФотографий(ДокОбмена); //vd_181003
	
КонецПроцедуры

//vd_181002 Перенесена из УТ
Процедура ВыгрузитьПодтвержденияСправочников(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Справочники", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если тз = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;      
	
	тз.Сортировать("ИдВидСправочникаМТ"); //vd_180918 тз.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочников");
		
		СтррЗапись = Новый Структура("GUID");
		
		ИдВидСправочникаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из тз Цикл
			
			//vd_180918 не выгружаеть нулевые идентификаторы
			Если СтрокаТ.ИдВидСправочникаМТ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТ.ИдВидСправочникаМТ <> ИдВидСправочникаМТ Тогда
												
				Если ИдВидСправочникаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
				КонецЕсли;
								
				ИдВидСправочникаМТ = СтрокаТ.ИдВидСправочникаМТ;
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидСправочникаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочника " + ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Ложь, "Справочник"));
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				    
			КонецЕсли;
			
			//(( gi_180417 - исправление ошибки - строки ниже вынесены из условия выше
			СтррЗапись.GUID = СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
			//))
			
		КонецЦикла;
		
		Если ИдВидСправочникаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
	
КонецПроцедуры

//vd_181002 Перененесена из УТ
Процедура ВыгрузитьПодтвержденияДокументов(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Документы", ВыбНастройкиАгента.СсылкаМУ, Истина);

	стррТаблицыЖурналовВДок = Новый Структура; // кэш для таблиц журнала виртуальных документов - по этим таблицам проверяем наличие виртуального документа в БД.
	
	тз.Сортировать("ВидДокумента,Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов");
		
		стррЗапись 	 = Новый Структура("GUID"); 				 // структура полей для подтверждения документов
		стррЗаписьСФ = Новый Структура("GUID,dt,DocNumber,A01"); // структура полей для подтверждения Счетов-фактур
		
		ИдВидДокументаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из тз Цикл
			
			Если СтрокаТ.ИдВидДокументаМТ <> ИдВидДокументаМТ Тогда
				
				Если ИдВидДокументаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
				КонецЕсли;
				ИдВидДокументаМТ = СтрокаТ.ИдВидДокументаМТ;
				ВидДокументаМТ 	 = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Ложь, "Документ");
				ЭтоСчетФактура   = (ВидДокументаМТ = "СчетФактура");
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидДокументаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов " + ВидДокументаМТ);
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				ДокМенеджер = ?(ВДокЭтоВиртуальныйДокумент(СтрокаТ.ВидДокумента), Неопределено, Документы[СтрокаТ.ВидДокумента]);
				// ^ Если ДокМенеджер = Неопределено, это значит, что нужно проверить наличие в БД виртуального документа.
				
			КонецЕсли;
			
			Если ПодтвержденияТолькоДляПроведенных 	// Нужно проверить - проведен документ или нет, если не проведен, то не включаем в выгрузку. 
				И Не ЭтоСчетФактура Тогда 			// Исключение для счетов-фактур, т.к. по счетам-фактурам важно передавать в МУ номера счетов-фактур
													// вне зависимости - проведен счет-фактура в УС или нет.
													
				Если ДокМенеджер = Неопределено Тогда // это виртуальный документ
					//vd_181002 УНФ не поддерживает загрузку виртуальных документов
					//Если стррТаблицыЖурналовВДок.Свойство(СтрокаТ.ВидДокумента) Тогда
					//	тзЖурнала = стррТаблицыЖурналовВДок[СтрокаТ.ВидДокумента];
					//Иначе
					//	тзЖурнала = ВОТЗЗагрузить(СтрокаТ.ВидДокумента, Истина);
					//	стррТаблицыЖурналовВДок.Вставить(СтрокаТ.ВидДокумента, тзЖурнала);
					//КонецЕсли; 
					//стзЖурнала = тзЖурнала.Найти(СтрокаТ.Идентификатор, "ID");
					//Если стзЖурнала = Неопределено Тогда
					//    Продолжить; // не выгружаем, документ отсуствтует в БД
					//ИначеЕсли стзЖурнала.Статус <> 1 Тогда // документ не проведен (у проведенного документа статус = 1)
					//	Продолжить;
					//КонецЕсли;
					Продолжить;
				Иначе // это обычный документ
					СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
					Если Не ЭтоСсылкаНаНайденныйОбъект(СсылкаДок) Тогда 
						Продолжить; // не выгружаем, документ удален в ЦБД
					ИначеЕсли Не СсылкаДок.Проведен Тогда
						Продолжить; // не выгружаем, документ не проведен
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоСчетФактура Тогда // подтверждение для счета-фактуры
				СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
				стррЗаписьСФ.GUID 		= СтрокаТ.Идентификатор;
				стррЗаписьСФ.dt	  		= СсылкаДок.Дата;
				стррЗаписьСФ.DocNumber	= СсылкаДок.Номер;
				стррЗаписьСФ.A01		= СсылкаДок.ДокументОснование;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррЗаписьСФ);
			Иначе // подтверждение для остальных документов
				стррЗапись.GUID = СтрокаТ.Идентификатор;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррЗапись);
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ИдВидДокументаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры

//vd_181003 Выгрузка подтверждений для тэга PICTURES. Перенесена с УТ.
Процедура ВыгрузитьПодтвержденияФотографий(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если тз = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;
	
	тз.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения фотографий");
	ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
	
	СтррЗапись = Новый Структура("GUID");
	
	Для Каждого СтрокаТ Из тз Цикл
		
		СтррЗапись.GUID = СтрокаТ.Идентификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES
	
КонецПроцедуры


// ВыгрузкаПодтверждений
#КонецОбласти

#Область ВыгрузкаСправочников  

// В параметре тзКартинки из процедуры возвращается ТЗ свойств картинок, 
// которые нужно выгрузить в МУ.
Процедура ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки)

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	ДобавитьПоле(ДокОбмена, "Comment", "Справочники");

	ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ);
	ВыгрузитьВидыКонтактнойИнформации(ДокОбмена);
	ВыгрузитьВидыЦен(ДокОбмена);
	ВыгрузитьСклады(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьКатегорииДокументов(ДокОбмена); 
	ВыгрузитьЗапросыОбновления(ДокОбмена);   //
	
	ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ); //УНФ вместо партнеров выгружаем контрагентов
	ВыгрузитьСтатусыКонтрагентов(ДокОбмена, МенеджерВТ); //унф пеменен порядок выгрузки тк статусы КА помещаются в ВТ_Статусыконтрагентов при выгрузке справочника контрагенты
	ВыгрузитьКонтактныхЛицКонтрагентов(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ);
	ВыгрузитьДоговоры(ДокОбмена, МенеджерВТ);
	//ВыгрузитьСегментыПартнеров(ДокОбмена, МенеджерВТ);
	//ВыгрузитьТорговыеТочки(ДокОбмена, МенеджерВТ); // УНФ ТТ не выгружаем
	
	ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ);
	ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ);
	ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ); //Остановка
	//ВыгрузитьПерсональныеЦены(ДокОбмена, МенеджерВТ);
	ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ);
	ВыгрузитьПечатныеФормы(ДокОбмена); // sd_10082017
	
	тзКартинки = ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ);
    
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS

КонецПроцедуры

Процедура ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Организации");
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A09,A010,A017,A018");
	
	МенеджерВТОрганизации(МенеджерВТ);
	
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиОрганизаций());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;	
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.Ссылка; // Организация
		
		КонтактнаяИнформация = КонтактнаяИнформацияОрганизации(Ссылка);
		
		стррПоля.GUID 	= Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Ссылка.Наименование;
		//УНФ
		//НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Ссылка,, ТекущаяДата());
		//стррПоля.A02 	= (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС); // проставляем реквизит "ИспользоватьНДС"
		
		//(( sk_190415 Заполняем атрибут "ИспользоватьНДС" в рамках (MOD-481)
		//стррПоля.A02	= "0";
		НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Ссылка, , ТекущаяДата());
		стррПоля.A02	= (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		//)) sk_190415
		
		//--

		стррПоля.A03	= КонтактнаяИнформация.ЮрАдрес;
		стррПоля.A04	= КонтактнаяИнформация.Телефон;
		стррПоля.A05	= Выборка.ИНН;
		стррПоля.A06	= Выборка.КПП;
		стррПоля.A07	= Выборка.ОГРН;
		стррПоля.A09	= КонтактнаяИнформация.ФактАдрес;
		стррПоля.A010	= ПрефиксОрганизацииИБ(Выборка.Префикс);
		стррПоля.A017	= СокрЛП(Выборка.НаименованиеПолное);
		Если гКонфигурация = "УНФ_UA" Тогда
			стррПоля.A018	= "0"; //vd_181001 В украинской УНФ нет счетов-фактур
		Иначе
			стррПоля.A018	= "1"; //УНФ добавил реквизит для выгрузки счетов-фактур
		КонецЕсли;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыКонтактнойИнформации(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыКонтактнойИнформации");

	ТипыКИ = ТипыКонтактнойИнформации();
	ВидыКИ = ВидыКонтактнойИнформацииВыгрузки();
	
	СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
	
	стррПоля = Новый Структура("GUID,Name,A02,A03");
	
	Для Каждого Элемент Из ВидыКИ Цикл
		стррПоля.GUID 	= Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Элемент.Наименование;
		стррПоля.A02	= ТипыКИ.Получить(Элемент.Тип);
		
		//УНФ
		//Если Элемент.Родитель = СправочникВидыКИ.СправочникПартнеры И Не ИспользоватьПунктыРазгрузки Тогда
		//	стррПоля.A03 = "Контрагенты";
		//ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтактныеЛицаПартнеров Тогда
		//	стррПоля.A03 = "КонтактныеЛица";
		//ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтрагенты Тогда 
		//	стррПоля.A03 =  ?(ИспользоватьПунктыРазгрузки, "Контрагенты", "ТорговыеТочки");
		//ИначеЕсли ИспользоватьПунктыРазгрузки И Элемент.Родитель = СправочникВидыКИ.СправочникАлкПунктыРазгрузки Тогда
		//	стррПоля.A03 = "ТорговыеТочки";
		//Иначе
		//	Продолжить;
		//КонецЕсли;
		
		Если Элемент.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда
			стррПоля.A03 = "Контрагенты";
		ИначеЕсли Элемент.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица Тогда
			стррПоля.A03 = "КонтактныеЛица";
		ИначеЕсли Элемент.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникТорговыеТочки Тогда
			стррПоля.A03 = "ТорговыеТочки";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыЦен(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТипыЦен");

	мЭлементы = ВидыЦенВыгрузки();
	стррПоля = Новый Структура("GUID,Name,Code,A02");
	Сч = 0;
	
	Для Каждого Элемент Из мЭлементы Цикл
		стррПоля.GUID = Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = Элемент.Наименование;
		стррПоля.Code = Сч;
		стррПоля.A02  = Элемент.ЦенаВключаетНДС;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСклады(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Склады");

	стррПоля = Новый Структура("GUID,Code,Name");	
	РезультатЗапроса = СкладыВыгрузки(МенеджерВТ, Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Code = Сч;
		//унф
		//стррПоля.Name = Выборка.Наименование;
		стррПоля.Name = Выборка.Ссылка.Наименование;
		//--
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКатегорииДокументов(ДокОбмена)
	
	Если Не ВременныеТаблицы.Свойство("КатегорииДокументов") Тогда // значит категории документов не задавались
		Возврат;
	КонецЕсли;
	
	Категории = ВременныеТаблицы.КатегорииДокументов;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КатегорииДокументов");
	
	СтррПоля = Новый Структура("GUID,Name,A02,A03");

	Для Каждого ЭлементКатегории Из Категории Цикл
		СтррПоля.GUID = ЭлементКатегории.Идентификатор;
		СтррПоля.Name = ЭлементКатегории.Наименование;
		СтррПоля.A02  = ЦветВСтроку(ЭлементКатегории.Цвет);
		СтррПоля.A03  = СтрСоединить_(ЭлементКатегории.СписокДокументов.ВыгрузитьЗначения(), ",");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСтатусыКонтрагентов(ДокОбмена, МенеджерВТ)
	
	//унф сильно изменена
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СтатусыКонтрагентов");
	стррПоля = Новый Структура("GUID,Name,A02,A03"); // gi_170902 объявление структуры вынесено за цикл
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатусыКонтрагентов.Статус КАК Идентификатор
				   |ИЗ
	               |	ВТ_СтатусыКонтрагентов КАК СтатусыКонтрагентов";
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	мСтатусыКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если мСтатусыКонтрагентов.Количество() > 0 Тогда
		спрСтатусыКонтрагентов = СтатусыКонтрагентовВыгрузки();
	КонецЕсли;
	
	Для Каждого ИдентификаторСтатуса Из мСтатусыКонтрагентов Цикл
		
		ЭлементСтатуса = спрСтатусыКонтрагентов.Найти(НРег(ИдентификаторСтатуса),"Идентификатор");
		Если ЭлементСтатуса <> Неопределено Тогда
			стррПоля.GUID = ВРег(ЭлементСтатуса.Идентификатор);
			стррПоля.Name = ЭлементСтатуса.Наименование;
			стррПоля.A02  = ЭлементСтатуса.Предупреждение;
			стррПоля.A03  = ЦветВСтроку(ЭлементСтатуса.Цвет);
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);	
		КонецЕсли;
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьЗапросыОбновления(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Запросы");
	стррПоля = Новый Структура("GUID,Name"); // gi_170902 объявление структуры вынесено за цикл

	ВыгружаемыеЗапросы = ЗапросыОбновления();
	Для Каждого ЭлементЗапроса Из ВыгружаемыеЗапросы Цикл
		стррПоля.GUID = ЭлементЗапроса.Идентификатор;
		стррПоля.Name = ЭлементЗапроса.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты"); // в МТ этот справочник называется "Контрагенты"
	стррПоля = Новый Структура("GUID,Name,GrpId0,A06,A012,A018,A023");	
	
	РезультатЗапроса = ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСсылка = Выборка.Ссылка;
		
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;
		//стррПоля.A05 скидка устанавливается в договоре
		стррПоля.A06  = Выборка.Статус;
		стррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
		стррПоля.A018 = Выборка.ИспользоватьДоговоры;
		стррПоля.A023 = ВыборкаСсылка.Комментарий;
		стррПоля.GrpId0 = ВыборкаСсылка.ГруппаДоступа;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ДокОбмена.ЗаписатьКонецЭлемента(); 
	
	ВыгрузитьГруппировкиКонтрагентов(ДокОбмена, МенеджерВТ);
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКонтактныхЛицКонтрагентов(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактныеЛица");

	стррПоля = Новый Структура("GUID,Name,A03,A05");
	РезультатЗапроса = ДанныеПоКонтактнымЛицамКонтрагентовВыгрузки(МенеджерВТ);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = Выборка.Наименование;
		стррПоля.A03  = Выборка.Контрагент;
		стррПоля.A05  = Выборка.Комментарий;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Функция ИдПустойСегментПартнера() Экспорт
	
	Возврат "108E834B-33F5-4F8F-90C4-555E4199F974";
	
КонецФункции

Процедура ВыгрузитьСегментыПартнеров(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьДоговоры() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	спрСоглашенияСКлиентами.СегментПартнеров КАК Сегмент,
		|	спрСоглашенияСКлиентами.Ссылка КАК Соглашение
		//|	спрСоглашенияСКлиентами.Наименование
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК регПартнерыСегмента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры
		|		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК спрСоглашенияСКлиентами
		|		ПО спрСоглашенияСКлиентами.Типовое
		|			И (регПартнерыСегмента.Сегмент = спрСоглашенияСКлиентами.СегментПартнеров
		|				ИЛИ спрСоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации
		|		ПО спрСоглашенияСКлиентами.Организация = ВТ_Организации.Ссылка 
		|				ИЛИ спрСоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|ГДЕ
		|	НЕ спрСоглашенияСКлиентами.ПометкаУдаления
		|ИТОГИ ПО
		|	Сегмент
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаСегменты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Сегменты");
	стррПоля   = Новый Структура("GUID,Name");
	стррТЧ	   = Новый Структура("GUID,Comment", "eebd884a-ed7c-49ca-8be9-0dd769fd13af", "Договоры");
	стррПоляТЧ = Новый Структура("GUID,CtlgId,A01");
	
	Пока ВыборкаСегменты.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(ВыборкаСегменты.Сегмент) Тогда 
			стррПоля.GUID = ВыборкаСегменты.Сегмент.УникальныйИдентификатор();
			стррПоля.Name = ВыборкаСегменты.Сегмент.Наименование;
		Иначе 
			стррПоля.GUID = ИдПустойСегментПартнера();
			стррПоля.Name = "<Не указано>";
		КонецЕсли;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);	// < ITEM
		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES"); // < TABLES
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧ);
			
			стррПоляТЧ.CtlgId = стррПоля.GUID;		
			
			ВыборкаСоглашения = ВыборкаСегменты.Выбрать();
			Пока ВыборкаСоглашения.Следующий() Цикл
				стррПоляТЧ.GUID   = Новый УникальныйИдентификатор();
				стррПоляТЧ.A01	  = ВыборкаСоглашения.Соглашение;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);		
			КонецЦикла;	
			
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);		
			ДокОбмена.ЗаписатьКонецЭлемента(); // TABLES >
		
		ДокОбмена.ЗаписатьКонецЭлемента(); // ITEM > 
		
	КонецЦикла; 
		
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация");

	ствТипыКИ = ТипыКонтактнойИнформации();
	стррПоля = Новый Структура("GUID,A01,A02,A03,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамКонтрагентов(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.A01 = Выборка.Контрагент;
		стррПоля.A02 = "";
		стррПоля.A03 = Выборка.КонтактноеЛицо;
		стррПоля.A04 = ствТипыКИ[Выборка.Тип];
		стррПоля.A05 = Выборка.Вид;
		стррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьДоговоры(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьДоговоры() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Договоры");
	
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A08,A010");

	МенеджерВТДоговоры(МенеджерВТ); // проверка на существование и создание временной таблица "ВТ_Договоры" в МенеджерВТ
	РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Договоры").ПолучитьДанные();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Выборка.Наименование;
		стррПоля.A02	= Выборка.Контрагент;
		стррПоля.A03	= Выборка.Дата;                                    //Датазаключения
		стррПоля.A04	= Выборка.ДатаОкончанияДействия;                   //датаокончаниядоговора
		стррПоля.A05	= Выборка.Организация;
		стррПоля.A06	= Выборка.ВидЦен;
		стррПоля.A07	= Выборка.НалогообложениеНДС;
		стррПоля.A08	= Выборка.Скидка;
		стррПоля.A010	= Выборка.Контрагент;
	
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ)
	
	ВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	
	СчЭлементов = 0;
	мВидыЦен = ВидыЦенВыгрузки();
	мСклады  = СкладыВыгрузки(МенеджерВТ, Истина);

	КоличествоРеквизитовЦен = 10;
	КоличествоРеквизитовОстатков = 5;
	ВсегоВидовЦен = мВидыЦен.Количество();
	ВсегоСкладов  = мСклады.Количество();
	
	СтрокВТабличнойЧасти = Цел(ВсегоСкладов/КоличествоРеквизитовОстатков); // первая строка выгружается в заголовке 
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧОстатки = Неопределено;
	Иначе
		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧОстатки.GUID	   		   	= "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d";
		стррТЧОстатки.Comment	   	   	= "Остатки";	
		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
	КонецЕсли;
	
	СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧЦены = Неопределено;
	Иначе
		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧЦены.GUID	   		   	  	= "7f72aed2-94f7-4165-b112-c7a69fea70cc";
		стррТЧЦены.Comment	   	   		= "Цены";
		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
		стррТЧЦены.ИмяПоля 		   		= "Цена";
	КонецЕсли;
	
	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
	
	стррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A02,A03,A04,A05,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053");

	Запрос = ЗапросПоНоменклатуре(МенеджерВТ, мВидыЦен);
	Результаты = Запрос.ВыполнитьПакет();
	
	//Тестовый просмотор        
//	ВыборкаОстатков = Результаты[2].Выгрузить();
//	ВыборкаЦен = Результаты[5].Выгрузить();

	ВыборкаОстатков = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦен = Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Номенклатура");
	
	ВключатьКодВНаименование = ВключатьКодыНоменклатурыВНаименование И ЗначениеЗаполнено(РежимВыгрузкиКодовНоменклатуры);

	Пока ВыборкаОстатков.Следующий() Цикл
		ВыборкаЦен.Следующий();
		СчЭлементов = СчЭлементов + 1;

		ТекНоменклатура = ВыборкаОстатков.Номенклатура;
		//ЕдиницыИзмерения = ТекНоменклатура.ЕдиницаИзмерения.Ссылка.УникальныйИдентификатор();
		ЕдиницыИзмерения = ВыборкаОстатков.ЕдиницаИзмерения;

		Если ВыгружатьХарактеристики Тогда
			УчетПоХарактеристикам = ВыборкаОстатков.УчетПоХарактеристикам;
		Иначе
			УчетПоХарактеристикам = Ложь;
		КонецЕсли;
		
		стррПоля.GUID = ТекНоменклатура.Ссылка.УникальныйИдентификатор();
		//Если ВключатьКодВНаименование Тогда
		//	стррПоля.Name = ТекНоменклатура.Наименование + " " + СокрЛ(ВыборкаОстатков.Код);
		//Иначе
		//	стррПоля.Name = ТекНоменклатура.Наименование;
		//КонецЕсли;
		Если ВключатьКодВНаименование Тогда
			стррПоля.Name = ВыборкаОстатков.Наименование + " " + СокрЛ(ВыборкаОстатков.Код);
		Иначе
			стррПоля.Name = ВыборкаОстатков.Наименование;
		КонецЕсли; 
		стррПоля.Code = ВыборкаОстатков.Код;		
		
		стррПоля.A02 = ВыборкаОстатков.Родитель;
		
		//vd_180507
		//стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;  // УНФ
		//стррПоля.A04 = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;
		
		//((vd_190405 У справочника номенклатура удален реквизит Справочник.Номенклатура.СтавкаНДС, вместо него добавлен ВидСтавкиНДС
		//стррПоля.A04 = ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;
		//УНФ_1.6.15.39  СтавкаНДС
		//УНФ_1.6.17.128 ВидСтавкиНДС 
		Если ПоколениеКонфигурации(">=УНФ_1.6.17.128") Тогда
			СтавкаНДС = Неопределено;
			Если ЗначениеЗаполнено(ВыборкаОстатков.НДС) Тогда
				СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВыборкаОстатков.НДС);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(); //УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль()
			КонецЕсли;
		Иначе
			СтавкаНДС = ВыборкаОстатков.НДС;
		КонецЕсли;
		//(( sk_190424 Исправлено получение ставки НДС в рамках (MOD-516) 
		//стррПоля.A04 = ПолучитьСтавкуНДСЧислом(СтавкаНДС) * 100;
		стррПоля.A04 = ПолучитьСтавкуНДСЧислом(СтавкаНДС);
		//)) sk_190424
		//))vd_190405
		
		//стррПоля.A05 = ВыборкаОстатков.ВидНоменклатуры; //УНФ
		стррПоля.A06 = ЕдиницыИзмерения; //стррПоля.A06 = ЕдиницыИзмерения.БазоваяЕдиница; //УНФ  		// В реквизите A06 передается базовая единица измерения, относительно которой пересчитываются другие единицы
		стррПоля.A08 = УчетПоХарактеристикам;
		стррПоля.A011 = ВыборкаОстатков.Остаток;
		// В реквизите A013 указывается единица измерения, в которой отображаются остатки товаров в форме подбора в мобильном устройстве
		//стррПоля.A013 = ЕдиницыИзмерения.БазоваяЕдиница; //УНФ
		стррПоля.A013 = ЕдиницыИзмерения;
		стррПоля.A014 = ВыборкаОстатков.Весовой;
		стррПоля.A015 = ВыборкаОстатков.ЭтоУслуга;
		стррПоля.A035 = ВыборкаОстатков.НаименованиеПолное;
		стррПоля.A037 = ВыборкаОстатков.Остаток > 0;
		стррПоля.A041 = ВыборкаОстатков.ОстатокМобСклада;  
		стррПоля.A042 = СокрЛП(ВыборкаОстатков.Комментарий);
		//стррПоля.A043 = ТекНоменклатура.ФайлКартинки; //dm_180615
		стррПоля.A043 = ВыборкаОстатков.ФайлКартинки; //dm_180615
		стррПоля.A044 = СчЭлементов;
		стррПоля.A045 = ""; //алкоголь
		стррПоля.A046 = ""; //дата розлива
		стррПоля.A048 = ВыборкаОстатков.ЦеноваяГруппа;
		// В реквизите A050 передаем единицу цены. В эту единицу пересчитывается цена товара (относительно базовой) в форме подбора в МУ 
		// Если ее не выгружать в файл обмена, то цены будут пересчитываться в базовые единицы
		//стррПоля.A050 = ЕдиницыИзмерения.БазоваяЕдиница; //единица цены   //УНФ
		стррПоля.A050 = ЕдиницыИзмерения; //единица цены
		//стррПоля.A053 = ЕдиницыИзмерения.НаборУпаковок;  //УНФ
		
		ДетальныеОстатки = ВыборкаОстатков.Выбрать();
		ДетальныеЦены = ВыборкаЦен.Выбрать();
		
		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");

		стррПоля.GrpId0 = ?(ЗначениеЗаполнено(ВыборкаОстатков.Родитель), ВыборкаОстатков.Родитель, "");
		//стррПоля.GrpId1 = ?(ЗначениеЗаполнено(ВыборкаОстатков.ВидНоменклатуры), ВыборкаОстатков.ВидНоменклатуры, ""); //унф
		стррПоля.GrpId1 = ""; 
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);

		Если ВыгружатьТабличныеЧасти Тогда
			
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			Если стррТЧОстатки <> Неопределено Тогда
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
				стррТЧОстатки.Номенклатура = ТекНоменклатура;
				стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			КонецЕсли;

			Если стррТЧЦены <> Неопределено Тогда
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
				стррТЧЦены.Номенклатура = ТекНоменклатура;
				стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			КонецЕсли;
			
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			
		КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();
		
	КонецЦикла;

	ДокОбмена.ЗаписатьКонецЭлемента();
	
	ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ);

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ)
	
	//УНФ закоментирован учет характеристик номенклатуры
	
	Если Не ВыгружатьШтрихКодыТоваров Тогда
		Возврат;
	КонецЕсли; 
	
	ВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	
	// Запрос получает штрихкоды только по выгруженной номенклатуре (из врем. таблицы ВТ_НоменклатураСУчетомОстатка).
	// Если требуется выгрузить номенклатуру только в соответствии с условиями отбора, то брать данных из врем. таблицы ВТ_Ассортимент.
	
	Если ВыгружатьХарактеристики Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НоменклатураВыгрузки.Номенклатура КАК Номенклатура,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Штрихкод КАК Наименование,
	       	//|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
			|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	       	|ИЗ
	       	|	ВТ_НоменклатураСУчетомОстатка Как НоменклатураВыгрузки 
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО Штрихкоды.Номенклатура = НоменклатураВыгрузки.Номенклатура
		   	|";
		стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НоменклатураВыгрузки.Номенклатура КАК Номенклатура,
			|	Штрихкоды.Штрихкод КАК Наименование,
	       	//|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
			|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	       	|ИЗ
	       	|	ВТ_НоменклатураСУчетомОстатка Как НоменклатураВыгрузки 
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО Штрихкоды.Номенклатура = НоменклатураВыгрузки.Номенклатура
		   	|";
	КонецЕсли; 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Штрихкоды", Истина); 

	стррПоля = Новый Структура("GUID,Name,A01,A02");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Наименование) Тогда
			Продолжить;
		КонецЕсли; 
		Если ВыгружатьХарактеристики Тогда
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда // номенклатура с характеристикой
				стррПоискХарактеристики.Номенклатура = Выборка.Номенклатура;
				стррПоискХарактеристики.Ссылка  	 = Выборка.Характеристика;
				ИдХарактеристики = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
				стррПоля.A01 	 = ИдХарактеристики;
			Иначе // номенклатура без характеристики
				стррПоля.A01 	 = Выборка.Номенклатура.УникальныйИдентификатор();
			КонецЕсли; 
		Иначе
			стррПоля.A01 = Выборка.Номенклатура.УникальныйИдентификатор();			
		КонецЕсли; 
		стррПоля.GUID 	 = Новый УникальныйИдентификатор();
		стррПоля.Name 	 = Выборка.Наименование; // Штрих-код
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		стррПоля.A02	= ЕдиницаИзмерения;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьХарактеристикиНоменклатуры() Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступныеВидыЦен = ВидыЦенВыгрузки();
	ДоступныеСклады  = СкладыВыгрузки(МенеджерВТ, Истина);

	КоличествоРеквизитовЦен = 10;
	КоличествоРеквизитовОстатков = 5;
	ВсегоВидовЦен = ДоступныеВидыЦен.Количество();
	ВсегоСкладов  = ДоступныеСклады.Количество();
	
	СтрокВТабличнойЧасти = Цел(ВсегоСкладов/КоличествоРеквизитовОстатков); // первая строка выгружается в заголовке 
	
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧОстатки = Неопределено;
	Иначе
		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧОстатки.GUID	   		   	= "19481e88-8575-4720-80e6-222816c754e4";
		стррТЧОстатки.Comment	   	   	= "Остатки";	
		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
	КонецЕсли;
	
	СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧЦены = Неопределено;
	Иначе
		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧЦены.GUID	   		   	  	= "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f";
		стррТЧЦены.Comment	   	   		= "Цены";
		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
		стррТЧЦены.ИмяПоля 		   		= "Цена";
	КонецЕсли;
	
	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
	
	стррПоля = Новый Структура("GUID,Name,A02,A04,A037,A039");
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	Запрос = ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ, ДоступныеВидыЦен);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаОстатков = Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦен 		= Результаты[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ХарактеристикиНоменклатуры");
	
	Пока ВыборкаОстатков.Следующий() Цикл
		ВыборкаЦен.Следующий();
		
		ВыборкаОстатковХарактеристики = ВыборкаОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаЦенХарактеристики	  = ВыборкаЦен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОстатковХарактеристики.Следующий() Цикл 
			ВыборкаЦенХарактеристики.Следующий();	
			
			стррПоискХарактеристики.Номенклатура = ВыборкаОстатковХарактеристики.Номенклатура;
			стррПоискХарактеристики.Ссылка  	 = ВыборкаОстатковХарактеристики.Характеристика;
			ИдХарактеристики = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			стррПоля.GUID	= ИдХарактеристики;
			стррПоля.Name 	= ВыборкаОстатковХарактеристики.НаименованиеХарактеристики;
			стррПоля.A02 	= ВыборкаОстатковХарактеристики.Номенклатура;
			стррПоля.A04	= ВыборкаОстатковХарактеристики.Остаток;
			стррПоля.A037	= ВыборкаОстатковХарактеристики.Остаток > 0;
			стррПоля.A039	= ВыборкаОстатковХарактеристики.ОстатокМобСклада;
			
			ДетальныеОстатки = ВыборкаОстатковХарактеристики.Выбрать();
			ДетальныеЦены    = ВыборкаЦенХарактеристики.Выбрать();
			
			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
			
			Если ВыгружатьТабличныеЧасти Тогда
				
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				Если стррТЧОстатки <> Неопределено Тогда
					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
					стррТЧОстатки.Номенклатура = ИдХарактеристики;
					стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
				КонецЕсли;

				Если стррТЧЦены <> Неопределено Тогда
					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
					стррТЧЦены.Номенклатура = ИдХарактеристики;
					стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
				КонецЕсли;
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				
			КонецЕсли;
			
			ДокОбмена.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьГруппировкиКонтрагентов(ДокОбмена, МенеджерВТ)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "1E18C8DB-08F6-47DA-874B-100D6E109AB8");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по группе доступа");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	стррПоля = Новый Структура("GUID,Name");
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппКонтрагентов());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ВыборкаГрупп = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл 
		стррПоля.GUID = ВыборкаГрупп.Ссылка.УникальныйИдентификатор(); //XMLСтрока(ВыборкаГрупп.Ссылка); // //так быстрее  
		стррПоля.Name = ВыборкаГрупп.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "8E502A85-8DD4-41CF-A7A4-17AB50872D36");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппНоменклатуры());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ДеревоГрупп.Строки);
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();
	
	//В УНФ нет видов номенклатуры
	
	//// Объявление группировки по видам номенклатуры
	//ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	//ДобавитьПоле(ДокОбмена, "GUID", "E42DA5B9-E29B-43E1-B7E3-9B500879D6B7");
	//ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по видам номенклатуры");
	//ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//Запрос = Новый Запрос(ТекстЗапросаВыборкиВидовНоменклатуры());
	//дзГруппы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//РекурсивноЗаписатьГруппуСправочника(ДокОбмена, дзГруппы.Строки);
	//ДокОбмена.ЗаписатьКонецЭлемента();
	//ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура РекурсивноЗаписатьГруппуСправочника(ДокОбмена, Строки)

	стррПоля = Новый Структура("GUID,Name,ParId");
	
	Для каждого ТекГруппа Из Строки Цикл
		
		Если ЗначениеЗаполнено(ТекГруппа.Родитель) И ТекГруппа.Ссылка = ТекГруппа.Родитель.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		стррПоля.GUID = ТекГруппа.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = ТекГруппа.Наименование;

		Если ЗначениеЗаполнено(ТекГруппа.РодительЭл) Тогда
			стррПоля.ParId = ТекГруппа.РодительЭл.УникальныйИдентификатор();
		Иначе
			стррПоля.ParId = "";
		КонецЕсли; 

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ТекГруппа.Строки);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ЕдиницыИзмерения");

	Результат = ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ);
	
	стррПоля = Новый Структура("GUID,Name,Code,A02,A03,A04,A05,A06,A07");
	
	//|	КлассификаторЕдиницИзмерения.Ссылка КАК Классификатор,
	//|	КлассификаторЕдиницИзмерения.Наименование КАК Наименование,
	//|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
	//|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		// для номенклатуры без упаковок вместо ссылки единицы измерения подставляем ссылку номенклатуры
		// чтобы GUID'ы единиц измерения не пересекались и была возможность передавать вес в единицу измерения 
		
		стррПоля.GUID = Выборка.Классификатор.Ссылка.УникальныйИдентификатор(); //Выборка.Номенклатура.УникальныйИдентификатор();    //гуид ЕИ
		стррПоля.Name = Выборка.Наименование;                              //наименование ЕИ
		стррПоля.Code = ""; 	//Выборка.КодОКЕИ; //унф                   //
		стррПоля.A02 =  Выборка.Коэффициент;	//Выборка.Коэффициент;     //число коэфицент
		стррПоля.A03 = 	Выборка.Номенклатура.УникальныйИдентификатор();    //гуид номенклатуры
		стррПоля.A04 = 	""; //Выборка.Вес; //унф                           //число вес единицы товара
		стррПоля.A05 = 	""; //Выборка.ЭтоНаборУпаковок; //унф              //число 1 если элемент является группой 
		стррПоля.A06 = 	"";  //Выборка.ВладелецНаборУпаковок; //унф        //гуид группы
		стррПоля.A07 = 	Выборка.Классификатор;                             //строка класификатор
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ)
	
	//УНФ 
	
	Если Не ВыгружатьИсториюПродаж Или ГлубинаИсторииПродаж = 0 Или КоличествоИнтерваловИстории = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Интервалы.НачалоИнтервала,
	        |	Интервалы.КонецИнтервала,
	        |	Интервалы.НомерИнтервала
	        |ПОМЕСТИТЬ Интервалы
	        |ИЗ
	        |	&Интервалы КАК Интервалы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВЫБОР
	        |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	        |				И Таблица.День <= Интервалы.КонецИнтервала
	        |			ТОГДА Интервалы.НомерИнтервала
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК НомерИнтервала,
	        |	Таблица.Контрагент КАК Контрагент,
	        |	Таблица.Номенклатура КАК Номенклатура,
	        |	СУММА(Таблица.Количество) КАК Количество,
	        |	СУММА(Таблица.Выручка) КАК Выручка
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		Продажи.Номенклатура КАК Номенклатура,
	        |		Продажи.Контрагент КАК Контрагент,
	        |		Продажи.ПериодДень КАК День,
	        |		Продажи.ПериодНеделя КАК Неделя,
	        |		Продажи.ПериодДекада КАК Декада,
	        |		Продажи.ПериодМесяц КАК Месяц,
	        |		Продажи.ПериодКвартал КАК Квартал,
	        |		Продажи.ПериодПолугодие КАК Полугодие,
	        |		Продажи.ПериодГод КАК Год,
	        |		Продажи.КоличествоОборот КАК Количество,
	        |		Продажи.СуммаОборот КАК Выручка
	        |	ИЗ
	        |		РегистрНакопления.Продажи.Обороты(
	        |				&НачПериода {(&НачалоПериода)},
	        |				&КонПериода {(&ОкончаниеПериода)},
	        |				Авто,
	        |				Номенклатура В
	        |						(ВЫБРАТЬ
	        |							ВТ_Ассортимент.Ссылка
	        |						ИЗ
	        |							ВТ_Ассортимент)
	        |					И Контрагент В
	        |						(ВЫБРАТЬ
	        |							ВТ_Контрагенты.Ссылка
	        |						ИЗ
	        |							ВТ_Контрагенты)) КАК Продажи) КАК Таблица,
	        |	Интервалы КАК Интервалы
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	        |					И Таблица.День <= Интервалы.КонецИнтервала
	        |				ТОГДА Интервалы.НомерИнтервала
	        |			ИНАЧЕ 0
	        |		КОНЕЦ > 0
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	Таблица.Номенклатура,
	        |	Таблица.Контрагент,
	        |	ВЫБОР
	        |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	        |				И Таблица.День <= Интервалы.КонецИнтервала
	        |			ТОГДА Интервалы.НомерИнтервала
	        |		ИНАЧЕ 0
	        |	КОНЕЦ
	        |ИТОГИ ПО
	        |	Контрагент,
	        |	Номенклатура"; 	  
	
	КонПериода = ТекущаяДата();
	НачПериода = НачалоДня(КонПериода - ГлубинаИсторииПродаж * 86400);
		
	тзИнтервалы = Новый ТаблицаЗначений;	
	тзИнтервалы.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));			
	тзИнтервалы.Колонки.Добавить("КонецИнтервала",  Новый ОписаниеТипов("Дата"));		
	тзИнтервалы.Колонки.Добавить("НомерИнтервала",  Новый ОписаниеТипов("Число"));
	
	РазмерИнтервала = Окр((КонПериода - НачПериода) / КоличествоИнтерваловИстории, 0, РежимОкругления.Окр15как20);
	
	НачалоИнтервала = НачПериода;
	Для Индекс = 1 По КоличествоИнтерваловИстории Цикл		
		КонецИнтервала = ?(Индекс < КоличествоИнтерваловИстории, НачалоИнтервала + РазмерИнтервала, КонПериода);
		СтрокаТ = тзИнтервалы.Добавить();
		СтрокаТ.НачалоИнтервала = НачалоИнтервала;
		СтрокаТ.КонецИнтервала  = КонецИнтервала;
		СтрокаТ.НомерИнтервала  = Индекс;
		НачалоИнтервала = КонецИнтервала;
	КонецЦикла;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("НачПериода",	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",	КонПериода);
	Запрос.УстановитьПараметр("Интервалы",	тзИнтервалы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ИсторияПродаж", Истина);
	
		стррПоля = Новый Структура("GUID,A02,A04,A07,A08");
		стррПоля.A08 = 0;
		
		стррПоиск = Новый Структура("НомерИнтервала");
	
		ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаПартнер.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
			Пока ВыборкаНоменклатура.Следующий() Цикл
				 						
				ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
				
				стрИстория = "";
				
				Для Индекс = 1 По КоличествоИнтерваловИстории Цикл
					стррПоиск.НомерИнтервала = Индекс;
					ВыборкаДетали.Сбросить();
					Если ВыборкаДетали.НайтиСледующий(стррПоиск) Тогда
						стрИстория = СтрИстория + Формат(ВыборкаДетали.Количество, "ЧГ=0") + " ";		
					Иначе
						стрИстория = СтрИстория + "0" + " ";		
					КонецЕсли;				
				КонецЦикла;
				
				стррПоля.GUID = Новый УникальныйИдентификатор();
				стррПоля.A02 = ВыборкаНоменклатура.Контрагент;
				стррПоля.A04 = ВыборкаНоменклатура.Номенклатура;
				стррПоля.A07 = СокрЛП(стрИстория);
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);				
			КонецЦикла; //Пока ВыборкаНоменклатура.Следующий() Цикл  
					
		КонецЦикла; //Пока ВыборкаПартнер.Следующий() Цикл
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры //Процедура ВыгрузитьИсториюПродаж()

Функция ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ)
	
 	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияКонтрагентов Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	тзКартинки = Новый ТаблицаЗначений;
	тзКартинки.Колонки.Добавить("Ссылка");
	тзКартинки.Колонки.Добавить("Описание");
	тзКартинки.Колонки.Добавить("ИмяФайла");
	
	Текст = ТекстЗапросаПолученияИзображений();	
	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ФотоСправочников");
	
	стрРасширения = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	стррПоля = Новый Структура("GUID,Name,A01,A02,A03");
	
	ТипХранилищеЗначения	  = Тип("ХранилищеЗначения");
	ТипСправочникНоменклатура = Тип("СправочникСсылка.Номенклатура");
	ТипСправочникКонтрагенты  = Тип("СправочникСсылка.Контрагенты"); //УНФ
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 				
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = ТипХранилищеЗначения Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		ВыборкаСсылка = Выборка.Ссылка;
		
		Если Найти(стрРасширения, Выборка.Расширение) = 0 Или (Картинка = Неопределено И ВыборкаСсылка.Том.Пустая()) Тогда
			Продолжить;
		КонецЕсли;	
		
		ВладелецФайла = Выборка.ВладелецФайла;
		
		Если ТипЗнч(ВладелецФайла) = ТипСправочникНоменклатура Тогда
			стррПоля.A02 = ВладелецФайла;
			стррПоля.A03 = Неопределено;
		ИначеЕсли ТипЗнч(ВладелецФайла) = ТипСправочникКонтрагенты Тогда
			стррПоля.A02 = Неопределено;
			стррПоля.A03 = ВладелецФайла;
		Иначе
			Продолжить;
		КонецЕсли;
		
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;		
		стррПоля.A01  = ВыборкаСсылка;
		
		СтрокаТ = тзКартинки.Добавить();
		СтрокаТ.Ссылка 	 = ВыборкаСсылка;
		СтрокаТ.Описание = Выборка.Описание;
		СтрокаТ.ИмяФайла = ВРег(стррПоля.GUID) + "." + Выборка.Расширение;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);	
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Возврат тзКартинки;

КонецФункции //Функция ВыгрузитьСправочникИзображений()

Процедура ВыгрузитьПечатныеФормы(ДокОбмена)
	
	стррВидыДокументов = Новый Структура(
		"Заказ,Реализация,ПКО",
		"e070d148-8c9c-4e5f-afda-2838d5be6618", "3b95d27f-7d6f-401c-aaf3-bd3dc78a1e82", "fcdd8d0b-6e35-401f-bc28-8527fd2f4d3a");
	
	тзПФД = Новый ТаблицаЗначений;
	тзПФД.Колонки.Добавить("Идентификатор");
	тзПФД.Колонки.Добавить("Наименование");
	тзПФД.Колонки.Добавить("Код");
	тзПФД.Колонки.Добавить("ВидДокумента");
	тзПФД.Колонки.Добавить("ЧислоКопий");
	тзПФД.Колонки.Добавить("Ориентация");
	
	ДобавитьПечатнуюФорму(тзПФД, "СчетНаОплату", "Счет", стррВидыДокументов.Заказ, "1", "0");
	
	ДобавитьПечатнуюФорму(тзПФД, "Торг12", "ТОРГ-12", стррВидыДокументов.Реализация, "2", "0");
	ДобавитьПечатнуюФорму(тзПФД, "РасходнаяНакладная", "Расходная накладная", стррВидыДокументов.Реализация, "1", "0");
	ДобавитьПечатнуюФорму(тзПФД, "СчетФактура", "Счет-фактура", стррВидыДокументов.Реализация, "1", "0");
	ДобавитьПечатнуюФорму(тзПФД, "ТТН", "ТТН", 	стррВидыДокументов.Реализация, "1", "0");
	ДобавитьПечатнуюФорму(тзПФД, "СправкаБТТН", "Справка 'Б' к ТТН", стррВидыДокументов.Реализация, "1", "0");
	ДобавитьПечатнуюФорму(тзПФД, "УПД", "УПД", 	стррВидыДокументов.Реализация, "1", "0");
	
	ДобавитьПечатнуюФорму(тзПФД, "ПриходныйКассовыйОрдер", "ПКО", стррВидыДокументов.ПКО, "1", "0");
	
	стррПоля = Новый Структура("GUID,Name,Code,A01,A02,A03");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыДокументов", Истина);
	
	Для Каждого СтрокаТ Из тзПФД Цикл 
		стррПоля.GUID	= СтрокаТ.Идентификатор;
		стррПоля.Name	= СтрокаТ.Наименование;
		стррПоля.Code	= СтрокаТ.Код;
		стррПоля.A01 	= СтрокаТ.ВидДокумента;
		стррПоля.A02 	= СтрокаТ.ЧислоКопий;
		стррПоля.A03 	= СтрокаТ.Ориентация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	стррПоля = Новый Структура("GUID,A01,A02");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыОрганизаций", Истина);
	
	мОрганизации = ОрганизацииВыгрузки();

	Для Каждого ОрганизацияСсылка Из мОрганизации Цикл
		
		Для Каждого СтрокаТ Из тзПФД Цикл 
			стррПоля.GUID	= Новый УникальныйИдентификатор();
			стррПоля.A01 	= ОрганизацияСсылка;
			стррПоля.A02 	= СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ДобавитьПечатнуюФорму(тз, Код, Наименование, ИдВидаДокумента, ЧислоКопий, Ориентация)
	
	СтрокаТ = тз.Добавить();
	СтрокаТ.Идентификатор 	= Новый УникальныйИдентификатор();
	СтрокаТ.Наименование	= Наименование; 
	СтрокаТ.Код				= Код;
	СтрокаТ.ВидДокумента 	= ВРег(ИдВидаДокумента); 
	СтрокаТ.ЧислоКопий 		= ЧислоКопий; 
	СтрокаТ.Ориентация 		= Ориентация; 
	
КонецПроцедуры

// Процедура выгружает ветку картинок ("PICTURES") в файл выгрузки.
// Параметры:
//		ДокОбмена  - ЗаписьXML - XML-документ выгрузки.
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
Процедура ВыгрузитьИзображения(ДокОбмена, тзКартинки)
	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	стррПоля = Новый Структура("GUID,FileName,Description");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Картинки");	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для каждого СтрокаТ Из тзКартинки Цикл
		стррПоля.GUID		 = ВРег(СтрокаТ.Ссылка.УникальныйИдентификатор());
		стррПоля.FileName	 = СтрокаТ.ИмяФайла;
		стррПоля.Description = СтрокаТ.Описание;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 	
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); // PICTURES
	
КонецПроцедуры

// ВыгрузкаСправочников
#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьДокументы(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Документы");

	ВыгрузитьДокументыЗаказ(ДокОбмена); 
	
	ВыгрузитьДокументыПродажи(ДокОбмена); //в УНФ это документ ПриходнаяНакладная 
	
	ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ); 
	
	//Документ "Перемещение" предназначен для оформления операций погрузки товаров в передвижной склад (автомобиль торгового агента) и выгрузки товаров из передвижного склада.
	ВыгрузитьДокументыПеремещения(ДокОбмена); // sd_22082017 //УНФ 
	
	ВыгрузитьМаршруты(ДокОбмена); 
	
	Если ОчищатьДокументыПередЗагрузкой Тогда 
		// нужно выгрузить пустые тэги с атрибутом KillAll для невыгруженных видов документов, указанных в списке СписокОчищаемыхДокументов
		ИсключитьВидыДокументов = "Заказ,Долг,Реализация,Перемещение"; // // sd_22082017 добавил перемещение.
		ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, СтрРазделить_(ИсключитьВидыДокументов));
	КонецЕсли;

	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS

КонецПроцедуры

Процедура ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, мИсключитьВидыДокументов)
	
	Если ОчищатьДокументыПередЗагрузкой Тогда
		Для Каждого Элемент Из СписокОчищаемыхДокументов Цикл
			Если Неопределено = мИсключитьВидыДокументов.Найти(Элемент.Значение) Тогда
				ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ." + Элемент.Значение, 1); // с признаком удаления всех документов данного вида
				ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДокументыЗаказ(ДокОбмена)

	Запрос = ДанныеПоДокументамЗаказПокупателя();
	ВыборкаРезультат = Запрос.Выполнить().Выгрузить();
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A016,A019"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "0738E61B-F06F-464A-8483-4249E0254819", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	СписокЗаказов = Новый Массив;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Заказ");
	
	Для Каждого ВыборкаДок Из ВыборкаРезультат Цикл
		
		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаДок.СуммаДокумента, ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
		
		ЕстьПодчиненныеРеализацииДляЗаказа = ПодчиненныеРеализацииДляЗаказа(ВыборкаДок.Ссылка);
		Если ЕстьПодчиненныеРеализацииДляЗаказа Тогда 
			СписокЗаказов.Добавить(ВыборкаДок.Ссылка);
		КонецЕсли;
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Дата;
		СтррПоля.IsPost = ВыборкаДок.Проведен;
		СтррПоля.A02 = ВыборкаДок.Организация;
		СтррПоля.A03 = ВыборкаДок.Контрагент;
		СтррПоля.A04 = "";
		СтррПоля.A05 = ВыборкаДок.Договор;
		СтррПоля.A06 = "";
		СтррПоля.A07 = "";
		СтррПоля.A08 = СуммаДокумента;
		СтррПоля.A09 = "";  												//Вес
		СтррПоля.A010 = ВыборкаДок.ДатаОтгрузки;
		СтррПоля.A011 = ВыборкаДок.Комментарий;
		СтррПоля.A016 = ЕстьПодчиненныеРеализацииДляЗаказа;
		СтррПоля.A019 = ""; //ВыборкаДок.ТипДенежныхСредств; //унф //ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ); 
		
		ВыборкаТЧЗапасы = ВыборкаДок.Запасы;
		
		Для Каждого ВыборкаТабличнойЧасти Из ВыборкаТЧЗапасы Цикл
			
			Количество 	  = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена		  = ВыборкаТабличнойЧасти.Цена;
			
			стррПоляТЧ.GUID  = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01   = ВыборкаТабличнойЧасти.Номенклатура;
			
			стррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			
			стррПоляТЧ.A02 =СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");; 
			стррПоляТЧ.A03 = ВыборкаТабличнойЧасти.ЕдиницаИзмерения;
			стррПоляТЧ.A04 = Количество;
			стррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, 							 ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, 				 ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A08 = "";	//ВыборкаТабличнойЧасти.Вес;
			стррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентСкидкиНаценки;
			//УНФ
			//стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			
			//vd_180507
			//стррПоляТЧ.A010 = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			
			//(( sk_190425 Исправлено получение ставки НДС в рамках (MOD-522)  
			//стррПоляТЧ.A010 = ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			стррПоляТЧ.A010 = ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			//)) sk_190425
			
			//УНФ
			стррПоляТЧ.A011 = ВыборкаДок.СтруктурнаяЕдиницаПродажи;
			стррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество * Цена - СуммаСтрокиТЧ, ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015 = ВыборкаДок.ВидЦен;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		КонецЦикла;
		
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Если СписокЗаказов.Количество() > 0 Тогда 
		гКэшСпискиОбъектов.Вставить("СписокЗаказов", СписокЗаказов);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьДокументыПродажи(ДокОбмена)
	
	//УНФ все переделано
	
	ВыборкаРезультат = ДанныеПоДокументамПродажи();
	
	стррПоля 		= Новый Структура("GUID,dt,IsPost,A01,A02,A03,A04,A05,A06,A07,A08,A09,A011,A018"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A", "Табличная часть 'Товары'");	
	стррПоляТЧ 		= Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
		
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Реализация");
		
	Для Каждого ВыборкаДок Из ВыборкаРезультат Цикл
		
		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаДок.СуммаДокумента, ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
	
		СтррПоля.GUID   = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt		= ВыборкаДок.Дата;
		СтррПоля.IsPost = ВыборкаДок.Проведен;
		СтррПоля.A01 	= ВыборкаДок.Организация;
		СтррПоля.A02 	= ВыборкаДок.Контрагент;
		//СтррПоля.A03 	= ВыборкаДок.Контрагент; //унф возможно нужно выводить контрагентов //ВыборкаДок.Контрагент;
		СтррПоля.A04 	= ВыборкаДок.Договор;
		СтррПоля.A05 	= "";
		СтррПоля.A06 	= ВыборкаДок.ВидЦен; /////////
		СтррПоля.A07 	= СуммаДокумента;
		СтррПоля.A09 	= ВыборкаДок.Комментарий;
		СтррПоля.A011 	= ВыборкаДок.Заказ;
		СтррПоля.A018 	= ""; // унф не уверен что нужно// ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
	
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
	
		ВыборкаТЧ = ВыборкаДок.Запасы;
		Для Каждого ВыборкаТабличнойЧасти Из ВыборкаТЧ Цикл
			
			Количество 	  = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена		  = ВыборкаТабличнойЧасти.Цена;
			
			стррПоляТЧ.GUID  = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01 	 = ВыборкаТабличнойЧасти.Номенклатура;
			
			стррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			стррПоляТЧ.A02 	 = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			стррПоляТЧ.A03	 = ВыборкаТабличнойЧасти.ЕдиницаИзмерения;
			стррПоляТЧ.A04   = Количество;
			стррПоляТЧ.A05 	 = СуммаВВалютеУчетаАгента(Цена, 		  				   ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A06 	 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ,				   ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A07 	 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата);
			стррПоляТЧ.A09 	 = ВыборкаТабличнойЧасти.ПроцентАвтоматическойСкидки;
			
			//УНФ  
			//стррПоляТЧ.A010  = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			
			//vd_180507
			//стррПоляТЧ.A010  = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100; 
			
			//(( sk_190425 Исправлено получение ставки НДС в рамках (MOD-522)
			//стррПоляТЧ.A010  = ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100; //УНФ  
			стррПоляТЧ.A010  = ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			//)) sk_190425
			
			стррПоляТЧ.A011  = ВыборкаДок.СтруктурнаяЕдиница;
			стррПоляТЧ.A012  = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ,ВыборкаДок.ВалютаДокумента, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015  = ВыборкаДок.ВидЦен;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
			
		КонецЦикла;
	
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьМаршруты(ДокОбмена)
	
	//унф  все переделано
	
	Если Не ВыгружатьМаршруты Тогда
		Возврат;
	КонецЕсли; 
	
	стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // получили список торговых точек
	Если стррОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СмещениеОтНачалаПлана = ДеньНедели(ТекущаяДата()) - 1;
	ПериодПлана = стррОбъект.ПериодГрафикаПлана;
	Если ПериодПлана > 7 И стррОбъект.ДатаНачала <> '00010101' Тогда
		Дней = (НачалоДня(ТекущаяДата()) - стррОбъект.ДатаНачала) / 86400;
		СмещениеОтНачалаПлана = Дней % стррОбъект.ПериодГрафикаПлана;
	КонецЕсли; 
	
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	Если Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП) Тогда
	    Возврат;
	КонецЕсли; 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Маршрут", 1);  // с признаком удаления всех документов Маршрут
		
	СтррПоля = Новый Структура("GUID,dt,IsPost");
	СтррПоля.IsPost = Истина; // признак, что документ проведен
	СтррПункт = Новый Структура("GUID,DocId,A01,A02,A03,A04");	
	
	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	
	Если ИспользуетсяПП Тогда // если детализация по плану посещения - то выгружаем данные из плана посещения
		
		тзПланПосещений = СтррОбъект.ПланПосещений;
		тзПланПосещений.Сортировать("День,Порядок,Контрагент");

		мДниПлана = Новый Массив(ПериодПлана);
		ТекДень   = Неопределено;
		Для каждого СтрокаТ Из тзПланПосещений Цикл
			Если СтрокаТ.День <> ТекДень Тогда
				Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
					Прервать; 						  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
				КонецЕсли; 
				ТекДень = СтрокаТ.День;
				мДниПлана[ТекДень-1] = тзПланПосещений.Индекс(СтрокаТ);
			КонецЕсли; 
		КонецЦикла;
		
		ИспользоватьПорядок = СтррОбъект.ИспользоватьПорядок;
		
		КоличествоСтрокПлана = тзПланПосещений.Количество();
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ИндексСтроки = мДниПлана[(ДеньПериода + СмещениеОтНачалаПлана) % ПериодПлана];
			Если ИндексСтроки = Неопределено Тогда // на этот день не запланировано посещений
				Продолжить;
			КонецЕсли; 
			
			// Открываем тэги нового дня (нового документа МТ "Маршрут")
			стррПоля.GUID = Новый УникальныйИдентификатор();
			стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
			// Заполняем табличные части документа
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			// Заполняем табличную часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
			ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
			
			Порядок = 0;
			
			ТекДень = тзПланПосещений[ИндексСтроки].День;
			
			Пока ИндексСтроки < КоличествоСтрокПлана Цикл
				
				СтрокаТ = тзПланПосещений[ИндексСтроки];
				Если СтрокаТ.День <> ТекДень Тогда
					Прервать;
				КонецЕсли; 
				
				СтррПункт.GUID  = Новый УникальныйИдентификатор();
				СтррПункт.DocId = стррПоля.GUID;
				СтррПункт.A01 = СтрокаТ.Контрагент;	 // в МТ - это поле "Контрагент"
				СтррПункт.A03 = СтрокаТ.Время;
				СтррПункт.A04 = СтрокаТ.Комментарий;
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);	
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла; 
			
			// закрываем тэги текущего документа Маршрут
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			
		КонецЦикла; 
		
	Иначе // Детализация только по графику посещения, выгружаем данные из желательного графика посещений.
		
		тзСостав = стррОбъект.Состав;
		Пункт = Неопределено;
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ОткрытТэгМаршрута = Ложь;
			
			Для каждого СтрокаТ Из тзСостав Цикл
				
				стррГрафик = СтрокаТ.График;
				Если стррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				стррПункты = стррГрафик.Пункты;
				Если стррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = стррГрафик.ПериодГрафика;
				ДеньГрафика = (ДеньПериода + СмещениеОтНачалаПлана) % ПериодГрафика;
				УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;
				
				Если стррПункты.Свойство("П"+Строка(ДеньГрафика), Пункт) И Пункт.Выбран Тогда
					
					Если Не ОткрытТэгМаршрута Тогда
						ОткрытТэгМаршрута = Истина;
						Порядок = 0;
						// Открываем тэги нового дня (нового документа МТ "Маршрут")
						стррПоля.GUID = Новый УникальныйИдентификатор();
						стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
						ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
						// Заполняем табличные части документа
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						// Заполняем табличную часть контрагентов маршрута		
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
						ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
					КонецЕсли; 
					
					СтррПункт.GUID  = Новый УникальныйИдентификатор();
					СтррПункт.DocId = стррПоля.GUID;
					СтррПункт.A01 = СтрокаТ.Контрагент;	 // в МТ - это поле "Контрагент"
					СтррПункт.A03 = ?(УчитыватьВремяПосещения, Лев(Пункт.Время, 5), "");
					СтррПункт.A04 = ""; // Комментарий
				
					ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);	
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ОткрытТэгМаршрута Тогда
				// закрываем тэги текущего документа Маршрут
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; // Если ИспользуетсяПП Тогда
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ)

	Запрос = Новый Запрос;
	
	//vd_180530 Запрос и процедура переделана.
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	               |	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	               |	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	               |	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	               |	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	               |	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК Валюта,
	               |	РасчетыСПокупателямиОстатки.СуммаОстаток КАК ДЗадолженность,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПокупателямиОстатки.Документ) = ТИП(Документ.ЗаказПокупателя)
	               |				И РасчетыСПокупателямиОстатки.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	               |			ТОГДА РасчетыСПокупателямиОстатки.Документ.Финиш
	               |		ИНАЧЕ РасчетыСПокупателямиОстатки.Документ.Дата
	               |	КОНЕЦ КАК ДатаРасчетногоДокумента,
	               |	РасчетыСПокупателямиОстатки.Договор.СрокОплатыПокупателя КАК СрокОплатыОтПокупателя,
	               |	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток
	               |ПОМЕСТИТЬ Вт_РасчетыСПокупателями
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПокупателями.Остатки КАК РасчетыСПокупателямиОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	               |		ПО РасчетыСПокупателямиОстатки.Организация = ВТ_Организации.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ПО РасчетыСПокупателямиОстатки.Контрагент = ВТ_Контрагенты.Ссылка
	               |ГДЕ
	               |	РасчетыСПокупателямиОстатки.Документ <> НЕОПРЕДЕЛЕНО
	               |	И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	               |	И РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	               |	И РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	               |	И РАЗНОСТЬДАТ(РасчетыСПокупателямиОстатки.Документ.Дата, &Период, ДЕНЬ) >= 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСПокупателями.Организация КАК Организация,
	               |	РасчетыСПокупателями.Контрагент КАК Контрагент,
	               |	РасчетыСПокупателями.Договор КАК Договор,
	               |	РасчетыСПокупателями.Документ КАК Документ,
	               |	РасчетыСПокупателями.Документ.Номер КАК ДокументНомер,
	               |	РасчетыСПокупателями.Документ.Комментарий КАК ДокументКомментарий,
	               |	РасчетыСПокупателями.Документ.СуммаДокумента КАК ДокументСуммаДокумента,
	               |	РасчетыСПокупателями.Заказ КАК Заказ,
	               |	РасчетыСПокупателями.Валюта КАК Валюта,
	               |	РасчетыСПокупателями.СуммаОстаток КАК СуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПокупателями.СрокОплатыОтПокупателя > 0
	               |				И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПокупателями.СрокОплатыОтПокупателя
	               |			ТОГДА РасчетыСПокупателями.СуммаОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ДПросроченнаяЗадолженность,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПокупателями.СрокОплатыОтПокупателя > 0
	               |				И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПокупателями.СрокОплатыОтПокупателя
	               |			ТОГДА РасчетыСПокупателями.СуммаВалОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ДВПросроченнаяЗадолженность,
	               |	РасчетыСПокупателями.ДатаРасчетногоДокумента КАК ДатаРасчетногоДокумента,
	               |	РасчетыСПокупателями.СрокОплатыОтПокупателя КАК КоличествоДнейПросрочкиПоДоговору
	               |ИЗ
	               |	Вт_РасчетыСПокупателями КАК РасчетыСПокупателями";
	
				
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата); 
	
	//ТестВыгрузки = Запрос.Выполнить().Выгрузить();
	
	//Возврат;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Долг", 1);  // с признаком удаления всех документов Долг
	
	НеУчитыватьПросрочку = Не ЗначениеЗаполнено(СпособРасчетаПросроченныхДолгов) Или СпособРасчетаПросроченныхДолгов = "НеУчитывать";
	
	стррПоля      = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A05,A06,A07,A08,A011,A014,A015");
	стррДокумент  = Новый Структура("Дата, Проведен, Номер, Ссылка");
	
	ДолгПросрочен = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ДатаРасчетногоДокумента  = Выборка.ДатаРасчетногоДокумента;
		Комментарий  			 = Выборка.ДокументКомментарий;
		НомерДок     			 = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Выборка.ДокументНомер);

		Если НеУчитыватьПросрочку = Истина Тогда
			ДатаОплатыЗадолжности = ДатаРасчетногоДокумента;
			ДолгПросрочен = Ложь;
		ИначеЕсли СпособРасчетаПросроченныхДолгов = "ПоДоговору" Тогда
			ДатаОплатыЗадолжности = ДатаРасчетногоДокумента + (Выборка.КоличествоДнейПросрочкиПоДоговору * 86400);
			ДолгПросрочен =  ?(ТекущаяДата >= ДатаОплатыЗадолжности, Истина, Ложь);
	    ИначеЕсли СпособРасчетаПросроченныхДолгов = "ПоКоличествуДнейПросрочки" Тогда
			ДатаОплатыЗадолжности = ДатаРасчетногоДокумента + (ИнтервалПросроченныхДолгов * 86400);
			ДолгПросрочен =  ?(ТекущаяДата >= ДатаОплатыЗадолжности, Истина, Ложь);
	    Иначе
			ДатаОплатыЗадолжности = ДатаРасчетногоДокумента;
			ДолгПросрочен = Ложь;
		КонецЕсли;
		
		Если НЕ НеУчитыватьПросрочку И ВыгружатьТолькоПросроченныеДолги И НЕ ДолгПросрочен Тогда 
			Продолжить;	
		КонецЕсли;
		
		стррДокумент.Дата 		= ДатаРасчетногоДокумента;
		стррДокумент.Проведен	= Истина; 
		стррДокумент.Номер 		= Выборка.ДокументНомер; 
		стррДокумент.Ссылка 	= Выборка.Документ;
		
		СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(Выборка.ДокументСуммаДокумента, Выборка.Валюта, ДатаРасчетногоДокумента);
		ПредставлениеДок = Выборка.Документ.Метаданные().Синоним + " №" + НомерДок + Нстр("ru = ' от '; uk = ' від '") + Формат(Выборка.ДатаРасчетногоДокумента, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
		
		ЗаполнитьОсновныеПоляДокумента(стррПоля, стррДокумент, Ложь, Истина);
				
		стррПоля.A02 = Выборка.Организация;
		стррПоля.A03 = Выборка.Контрагент;
		стррПоля.A05 = Выборка.Договор;
		стррПоля.A06 = ДатаОплатыЗадолжности;
		стррПоля.A07  = СуммаВВалютеУчетаАгента(Выборка.СуммаОстаток, Выборка.Валюта, ТекущаяДата);
		стррПоля.A08 = Комментарий;
		стррПоля.A011 = Выборка.Договор.Ссылка.УникальныйИдентификатор(); 
		
		Если НеУчитыватьПросрочку = Ложь И ВыделятьЦветомПросроченныеДолги И ДолгПросрочен Тогда
			стррПоля.A014 = Истина;
		Иначе
			стррПоля.A014 = Ложь;
		КонецЕсли; 
		
		стррПоля.A015 = ПредставлениеДок;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
			
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьДокументыПеремещения(ДокОбмена) 
	
	//УНФ все переделано
	
	Результат = ДанныеПоДокументамПеремещения();
	ВыборкаДок = Результат.Выбрать();
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A03,A04,A05,A06,A07,A08,A09"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06"); // ТЧ документа
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура"); 
	
	//унф в унф в док перемещение нет вида цены, поэтому аозьмем его с настроек агентов
	спрВидЦены = ВыбНастройкиАгента.ОсновнойТипЦены;
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Перемещение");
	
				   //|	ПеремещениеЗапасов.Ссылка,
				   //|	ПеремещениеЗапасов.Дата,
				   //|	ПеремещениеЗапасов.Проведен,
				   //|	ПеремещениеЗапасов.Организация,
				   //|	ПеремещениеЗапасов.СтруктурнаяЕдиница,
				   //|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель,
				   //|	ПеремещениеЗапасов.Комментарий,
				   //|	ПеремещениеЗапасов.Запасы.(
				   //|		Ссылка,
				   //|		Номенклатура,
				   //|		Характеристика,
				   //|		Количество,
				   //|		ЕдиницаИзмерения,
				   //|		Сумма
				   //|	)

	Пока ВыборкаДок.Следующий() Цикл 
		Док = ВыборкаДок.Ссылка;
		СтррПоля.GUID   = Док.УникальныйИдентификатор();
		СтррПоля.dt 	= ВыборкаДок.Дата;
		СтррПоля.IsPost = ВыборкаДок.Проведен;
		СтррПоля.A01 	= ВыборкаДок.Организация;
		СтррПоля.A03	= ВыборкаДок.СтруктурнаяЕдиница;
		СтррПоля.A04 	= ВыборкаДок.СтруктурнаяЕдиницаПолучатель;
		СтррПоля.A05	= 0; // СуммаДокумента
		СтррПоля.A06 	= ВыборкаДок.Комментарий;
		СтррПоля.A07 	= ""; // широта
		СтррПоля.A08 	= ""; // долгота
		//СтррПоля.A09 	= Док.ВидЦены; //в унф в док ПеремещениеЗапасов нет вида цены 
		//Если ЗначениеЗаполнено(спрВидЦены) Тогда
		//	СтррПоля.A09 	= спрВидЦены;
		//Иначе
		//	СтррПоля.A09 	= "";
		//КонецЕсли;
		СтррПоля.A09 	= спрВидЦены;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		Если Док.Запасы.Количество() > 0 Тогда 
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
			
			Для Каждого СтрокаТ Из Док.Запасы Цикл 
				
				Номенклатура 		 = СтрокаТ.Номенклатура;
				Количество		 	 = СтрокаТ.Количество;
				Характеристика		 = СтрокаТ.Характеристика;
				ЕдиницаИзмерения	 = СтрокаТ.ЕдиницаИзмерения;
				
				Если ЗначениеЗаполнено(спрВидЦены) Тогда
					Если ЗначениеЗаполнено(Характеристика) Тогда
						ЦенаНоменклатуры = ПолучитьЦенуНоменклатуры(Номенклатура, спрВидЦены, Характеристика);
					Иначе
						ЦенаНоменклатуры = ПолучитьЦенуНоменклатуры(Номенклатура, спрВидЦены);
					КонецЕсли;
				Иначе
					ЦенаНоменклатуры = 0;
				КонецЕсли;
				
				стррПоляТЧ.GUID  = Новый УникальныйИдентификатор();
				стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
				стррПоляТЧ.A01   = Номенклатура;
				
				стррПоискХарактеристики.Номенклатура = Номенклатура;  
				стррПоискХарактеристики.Ссылка  	 = Характеристика; 
				стррПоляТЧ.A02 = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
				
				стррПоляТЧ.A03 = ЕдиницаИзмерения;
				стррПоляТЧ.A04 = Количество;
				стррПоляТЧ.A05 = ЦенаНоменклатуры;
				стррПоляТЧ.A06 = ЦенаНоменклатуры * Количество;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
				
			КонецЦикла;
			
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
		КонецЕсли;
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

// ВыгрузкаДокументов
#КонецОбласти

#Область ОтборыВыгрузки

Функция ОрганизацииВыгрузки(МенеджерВТ = Неопределено)

	Значение = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");
	Если Значение = Неопределено Тогда
		Если МенеджерВТ = Неопределено Тогда
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
		КонецЕсли; 
		МенеджерВТОрганизации(МенеджерВТ);
		Значение = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ВидыКонтактнойИнформацииВыгрузки()

	Возврат ВыборкаИзСправочника(ТекстЗапросаВыборкиВидовКонтактнойИнформации());
	
КонецФункции

Функция ВидыЦенВыгрузки()

	ЭлементОтбора = ЭлементОтбораПоЛевомуЗначению("ВидыЦен");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыЦен.Ссылка КАК Ссылка
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|{ГДЕ
		|	ВидыЦен.Ссылка.* КАК ВидыЦен}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЦен.Наименование";
	
	Возврат ВыборкаИзСправочника(ТекстЗапроса, ЭлементОтбора);
	
КонецФункции

Функция СкладыВыгрузки(МенеджерВТ, ВернутьМассив)

	Если ВернутьМассив И гмСкладыВыгрузки <> Неопределено Тогда
		Возврат гмСкладыВыгрузки;
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТ_Склады.Ссылка КАК Ссылка,
	                      |	ВТ_Склады.Ссылка.Наименование КАК НаименованиеВТ
	                      |ИЗ
	                      |	ВТ_Склады КАК ВТ_Склады
	                      |ГДЕ
	                      |	ВТ_Склады.Ссылка.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	РезультатТеста = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если гмСкладыВыгрузки = Неопределено Тогда
		гмСкладыВыгрузки = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
	Если ВернутьМассив Тогда
		Возврат гмСкладыВыгрузки;
	Иначе
		Возврат РезультатЗапроса;
	КонецЕсли; 
	
КонецФункции

Функция СтатусыКонтрагентовВыгрузки()
	
	//++унф всн переделано
	Если ВременныеТаблицы.Свойство("СтатусыКонтрагентов") Тогда 
		Возврат ВременныеТаблицы.СтатусыКонтрагентов;
	Иначе
		Возврат Новый ТаблицаЗначений;  // значит статусы контрагентов не задавались
	КонецЕсли;
	//замена
	//Если Не ВременныеТаблицы.Свойство("ВТ_СтатусыКонтрагентов") Тогда // значит статусы партнеров не задавались
	//	Возврат Новый ТаблицаЗначений;
	//Иначе
	//	Возврат ВременныеТаблицы.ВТ_СтатусыКонтрагентов;
	//КонецЕсли;
	//--унф
	
КонецФункции

// Функция возвращает признак - выгружать характеристики номенклатуры или нет
Функция ВыгружатьХарактеристикиНоменклатуры()
	
	//++унф
	Возврат	КонстантыПолучитьЗначение("ФункциональнаяОпцияИспользоватьХарактеристики");
	//Замена
	//Возврат	КонстантыПолучитьЗначение("ФункциональнаяОпцияИспользоватьХарактеристики") И ИспользоватьХарактеристики;
	//--унф
	
	//Возврат Ложь; //УНФ

КонецФункции 

Функция ВыгружатьДоговоры()
	
	//++УНФ
	//Возврат ИспользоватьСоглашения 
	//	И КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать;
	Возврат ИспользоватьДоговоры;	
	//--унф
КонецФункции 

// ОтборыВыгрузки
#КонецОбласти 

#Область ГенерацияXMLФайлаВыгрузки

Процедура ВыгрузитьПоляВЭлемент(ПоляЭлемента, ВыборкаЭлементов, КоличествоРеквизитов, ИмяПоля, ПолеВыгрузки)

	Счетчик = -1;
	Пока ВыборкаЭлементов.Следующий() Цикл
		Счетчик = Счетчик + 1;
		ПоляЭлемента.Вставить(ПолеВыгрузки + Строка(Счетчик), ВыборкаЭлементов[ИмяПоля]);

		Если Счетчик = КоличествоРеквизитов-1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррПараметры)

	ВыборкаЭлементов = стррПараметры.ВыборкаЭлементов;
	МаксЗначениеСчетчика = стррПараметры.КоличествоРеквизитов - 1;
	ИмяПоля = стррПараметры.ИмяПоля;	
	ПолеВыгрузки = стррПараметры.ПолеВыгрузки;
	
	стррПоля = Новый Структура("GUID,CtlgId," + ПолеВыгрузки);
	
	Для СчСтрок = 1 По стррПараметры.КоличествоСтрок Цикл
		
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.CtlgId = стррПараметры.Номенклатура;
		стррПоля[ПолеВыгрузки] = СчСтрок;
		Сч = 0;
		Пока ВыборкаЭлементов.Следующий() Цикл
			Сч = Сч + 1;
			стррПоля.Вставить("A0" + Строка(Сч), ВыборкаЭлементов[ИмяПоля]);
			Если Сч = МаксЗначениеСчетчика Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG или DOCUMENT

КонецПроцедуры

Процедура ЗаписатьНачалоВеткиОбъекта(ДокОбмена, ВидОбъектаДляМТ, УдалитьВсе = Неопределено)

	КорневойВид = Неопределено;
	СвойстваВида = СвойстваВидаОбъекта(ВидОбъектаДляМТ, "ВидДляМТ", КорневойВид);
	
	ДокОбмена.ЗаписатьНачалоЭлемента(?(КорневойВид = "Документ", "DOCUMENT", "CATALOG"));
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(СвойстваВида.ИдентификаторВида)); // gi_170902
	УстановитьПризнакОчисткиОбъекта(ДокОбмена, СвойстваВида.ВидДляМТ, КорневойВид, УдалитьВсе);
	ДобавитьПоле(ДокОбмена, "Comment", ПредставлениеВида(КорневойВид, СвойстваВида));
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

КонецПроцедуры

Процедура УстановитьПризнакОчисткиОбъекта(ДокОбмена, ВидДляМТ, КорневойВид, Принудительно)

	Если Принудительно = Истина Тогда // параметр Принудительно может быть со значением Неопределено
		ДобавитьПоле(ДокОбмена, "KILLALL", "1");
	ИначеЕсли Принудительно = Ложь Тогда 	
		Возврат;
	Иначе
		
		Если КорневойВид = "Документ" И ОчищатьДокументыПередЗагрузкой Тогда
			Список = СписокОчищаемыхДокументов;
		ИначеЕсли КорневойВид = "Справочник" И ОчищатьСправочникиПередЗагрузкой Тогда
			Список = СписокОчищаемыхСправочников;
		Иначе
			Возврат;
		КонецЕсли;
			
		ИскатьЗначение = ВРег(ВидДляМТ);
		Для Каждого Элемент Из Список Цикл
			Если ВРег(Элемент.Значение) = ИскатьЗначение Тогда // пометку элемента не проверяем, т.к. в списке у нас только очищаемые справочники
				ДобавитьПоле(ДокОбмена, "KILLALL", "1");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметры)

	ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	ДобавитьПоле(ДокОбмена, "GUID", СтррПараметры.GUID);
	ДобавитьПоле(ДокОбмена, "Comment", СтррПараметры.Comment);

КонецПроцедуры

Процедура ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE

КонецПроцедуры

Процедура ДобавитьКонстанту(ДокОбмена, Идентификатор, Значение)

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(Идентификатор));
	ДобавитьПоле(ДокОбмена, "VALUE", Значение);
	ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ДобавитьПоле(ДокОбмена, Имя, Значение)

	ДокОбмена.ЗаписатьАтрибут(Имя, ЗначениеВСтрокуДляXML(Значение));

КонецПроцедуры

Процедура ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей, ЗакрытьЭлемент = Истина)

	Если СтруктураПолей.Свойство("GUID") И Не ЗначениеЗаполнено(СтруктураПолей.GUID) Тогда
		Возврат;
	КонецЕсли;

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ДокОбмена, ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

// ГенерацияXMLФайлаВыгрузки
#КонецОбласти 

Процедура ВставитьНомерДокументаВСтруктуру(стррПоля, Док)

	НомерДляXML = СокрП(Док.Номер);

	// Проверка последнего элемента номера
	Код = КодСимвола(Прав(НомерДляXML, 1));
	Если Код < 48 Или Код > 57 Тогда
		ТекстСообщения = СтрШаблон_(НСтр("ru = 'В номере документа ""%1"" последний символ не цифра.'; uk = 'У номері документа ""%1"" останній символ не цифри.'"),
							Строка(Док));
		ОповеститьОСобытии("", "ОшибкаПрочее", Док, "ТекущийАгент");
	КонецЕсли;

	стррПоля.Вставить("DocNumber", НомерДляXML);
	
КонецПроцедуры

Функция НачалоВыгрузкиДокументов(ИнтервалВыгрузки)

	Возврат НачалоДня(ТекущаяДата()) - ?(ИнтервалВыгрузки <> Неопределено, 86400 * ИнтервалВыгрузки, 0);
	
КонецФункции

Функция ПодчиненныеРеализацииДляЗаказа(ЗаказСсылка)
	
	//унф все переделано
	
	Запрос = Новый Запрос();	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Заказ = &ЗаказСсылка";

	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	Конецесли;

КонецФункции

Функция ПредопределенныеПоляДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	СтруктураПолей = Новый Структура;

	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID", ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;

	СтруктураПолей.Вставить("dt", ТекДокумент.Дата);
	СтруктураПолей.Вставить("IsPost", ТекДокумент.Проведен);
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);
	КонецЕсли;

	Возврат СтруктураПолей;
КонецФункции

Процедура ЗаполнитьОсновныеПоляДокумента(стррПоля, ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	Если СоздаватьИдентификатор Тогда
		стррПоля.GUID = Новый УникальныйИдентификатор();
	Иначе
		стррПоля.GUID = ТекДокумент.Ссылка.УникальныйИдентификатор();
	КонецЕсли;

	стррПоля.dt 	= ТекДокумент.Дата;
	стррПоля.IsPost = ТекДокумент.Проведен;
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(стррПоля, ТекДокумент.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция СуммаВВалютеУчетаАгента(Сумма, ВалютаДокумента, НаДату)

	СуммаПересчитанная = Сумма;
	
	//УНФ
	//ВалютаУчетаАгента = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	ВалютаУчетаАгента = КонстантыПолучитьЗначение("ВалютаУчета");
	//УНФ
	Если Не ВалютаДокумента = ВалютаУчетаАгента Тогда
		//УНФ
		//СуммаПересчитанная = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(Сумма, ВалютаДокумента, ВалютаУчетаАгента, НаДату);
		СуммаПересчитанная = РаботаСКурсамиВалют.ПересчитатьВВалюту(Сумма, ВалютаДокумента, ВалютаУчетаАгента, НаДату);
		//УНФ
	КонецЕсли;

	Возврат СуммаПересчитанная;
	
КонецФункции

Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦены, Характеристика = Неопределено) 
	
	//УНФ сильно переделпана
	
	//стррОтбор = Новый Структура("Дата, Номенклатура, Характеристика, Упаковка, ВидЦены, Валюта");
	//стррОтбор.Дата 				= ТекущаяДата();
	//стррОтбор.Номенклатура 		= Номенклатура;
	//стррОтбор.Характеристика	= ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика);
	//стррОтбор.Упаковка 	    	= Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	//стррОтбор.ВидЦены			= ВидЦены;
	//стррОтбор.Валюта			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	//
	//ЦенаНоменклатуры = ПродажиСервер.ПолучитьЦенуПоОтбору(стррОтбор);
	
	Если Характеристика = Неопределено Тогда 
		стррОтбор = Новый Структура("Номенклатура, ВидЦен", Номенклатура, ВидЦены);
	Иначе
		стррОтбор = Новый Структура("Номенклатура, ВидЦен, Характеристика", Номенклатура, ВидЦены, Характеристика);
	КонецЕсли;
			
	ВыборкаЦенаНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(), стррОтбор);
	
	Возврат ВыборкаЦенаНоменклатуры.Цена;	

КонецФункции

Функция ПрефиксОрганизацииИБ(Префикс)

	ПрефиксНачальный = Прав("00" + СокрЛП(Префикс), 2);
	ПрефиксИБ 		 = Прав("00" + СокрЛП(КонстантыПолучитьЗначение("ПрефиксУзлаРаспределеннойИнформационнойБазы")), 2);
	
	Возврат ПрефиксНачальный + ПрефиксИБ + "-";

КонецФункции 

Функция КонтактнаяИнформацияОрганизации(Организация)

	стррРезультат = Новый Структура("Телефон,ФактАдрес,ЮрАдрес");
	Для Каждого СтрокаКИ Из Организация.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			стррРезультат.Телефон = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			стррРезультат.ФактАдрес = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			стррРезультат.ЮрАдрес = СокрЛП(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;

	Возврат стррРезультат;
	
КонецФункции // КонтактнаяИнформацияОрганизации()

Функция ТипыКонтактнойИнформации()

	ствРезультат = Новый Соответствие;
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ВРег("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВРег("52477200-af54-405b-9888-14b8bded0e19"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, ВРег("2c2cfc86-e2a0-414d-a116-5acadac53437"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, ВРег("e45419b3-0cfd-47ce-8b24-7037a1e86aed"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, ВРег("8fc8f351-14f0-48eb-952a-38bb313b28d5"));

	Возврат ствРезультат;
	
КонецФункции

Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт

	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");

	Если Тип = "Дата" Тогда
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда
		НужноеЗначение = НужноеВремя;
	Иначе
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()

Функция СписокЗначенийВСтрокуМТ20(Список)
	
	Стр = Строка(Список);
	Возврат СтрЗаменить(Стр, "; ", ",");
	
КонецФункции

Функция ЗначениеВСтрокуДляXML(Значение)

	Тип = ТипЗнч(Значение);
	
	Если Тип = Тип("Строка") Тогда
		
		Возврат XMLСтрока(Значение);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Если Значение = 0 Тогда
			Возврат "0";
		Иначе
			Возврат Формат(Значение, "ЧГ=0;ЧРД='.'");
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат ВРег(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Если Значение Тогда
			Возврат "1";
		Иначе
			Возврат "0";	
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяВФорматXMLИз1СМТ(Значение);
		
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда
		
		Возврат XMLСтрока(СписокЗначенийВСтрокуМТ20(Значение));
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветВСтроку(Значение);
		
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		
		Возврат "";
		
	Иначе // тип Справочник или Документ
		
		Возврат ВРег(Значение.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеИзСтрокиXML(Значение, Тип)

	Если Тип = Тип("Строка") Тогда
		
		Возврат Значение;
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяXMLВФормат1С(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Булево(Число(Значение)), Ложь);
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветИзСтроки(Значение);
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Новый УникальныйИдентификатор(Значение);
		
	Иначе 
		
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции

Функция СформированныйМакетКомпоновкиДанных(Отбор, ТекстЗапроса)

	СхемаКомпоновки = СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса);
	НастройкиКомпоновки = КомпоновщикНастроекАгента(СхемаКомпоновки);
	Если ТипЗнч(Отбор) <> Тип("Массив")  Тогда
		ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Отбор);
	Иначе	
		 Для каждого Элемент Из Отбор Цикл
			ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		 КонецЦикла; 
	КонецЕсли; 
	
	//УНФ
	//МакетКомпоновки = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	//так не работает
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//УНФ

	Возврат МакетКомпоновки;

КонецФункции 

#Область ВыборкиДанныхПоСправочникам

Функция ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ)
	
	//1 Автоматическая скидка (автоматически, ручками не правится, по договору) 
	//ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки
	
	//2 Ручная скидка (выставленная в ручную)
	//ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи
	//КонстантыПолучитьЗначение("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки")
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СтатусыКонтрагентов.Контрагент,
	               |	СтатусыКонтрагентов.Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыКонтрагентов_Временная
	               |ИЗ
	               |	&СтатусыКонтрагентов КАК СтатусыКонтрагентов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатусыКонтрагентов.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыКонтрагентов.Контрагент,
	               |	СтатусыКонтрагентов.Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыКонтрагентов
	               |ИЗ
	               |	ВТ_СтатусыКонтрагентов_Временная КАК СтатусыКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ПО СтатусыКонтрагентов.Контрагент = ВТ_Контрагенты.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатусыКонтрагентов.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_СтатусыКонтрагентов_Временная" ;
	
	
	ТекстЗапроса = ТекстЗапроса 
				   + "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////"
				   + Символы.ПС;
	
	
	//НЕРИАЛИЗОВАНА выгрузка персональных цен
	
		Если ИспользоватьДоговоры Тогда
			МенеджерВТДоговоры(МенеджерВТ); // проверка на существование и создание временной таблица "ВТ_Договоры" в МенеджерВТ
			ТекстЗапроса = ТекстЗапроса +
					   "ВЫБРАТЬ
					   |	ВТ_Контрагенты.Ссылка КАК Ссылка,
					   |	МАКСИМУМ(ЕСТЬNULL(ВТ_СтатусыКонтрагентов.Статус, """")) КАК Статус,
					   |	МАКСИМУМ(ВЫБОР
					   |			КОГДА ВТ_Договоры.Контрагент ЕСТЬ NULL
					   |				ТОГДА ЛОЖЬ
					   |			ИНАЧЕ ИСТИНА
					   |		КОНЕЦ) КАК ИспользоватьДоговоры
					   |ИЗ
					   |	ВТ_Контрагенты КАК ВТ_Контрагенты
					   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыКонтрагентов КАК ВТ_СтатусыКонтрагентов
					   |		ПО ВТ_Контрагенты.Ссылка = ВТ_СтатусыКонтрагентов.Контрагент
					   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
					   |		ПО ВТ_Контрагенты.Ссылка = ВТ_Договоры.Контрагент
					   |
					   |СГРУППИРОВАТЬ ПО
					   |	ВТ_Контрагенты.Ссылка";
		Иначе
			ТекстЗапроса = ТекстЗапроса +
				       "ВЫБРАТЬ
				       |	ВТ_Контрагенты.Ссылка КАК Ссылка,
				       |	МАКСИМУМ(ЕСТЬNULL(ВТ_СтатусыКонтрагентов.Статус, """")) КАК Статус,
				       |	ЛОЖЬ КАК ИспользоватьДоговоры
				       |ИЗ
				       |	ВТ_Контрагенты КАК ВТ_Контрагенты
				       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыКонтрагентов КАК ВТ_СтатусыКонтрагентов
				       |		ПО ВТ_Контрагенты.Ссылка = ВТ_СтатусыКонтрагентов.Контрагент
				       |
				       |СГРУППИРОВАТЬ ПО
				       |	ВТ_Контрагенты.Ссылка";	
		КонецЕсли;
	
	тзСтатусыКонтрагентов = СтатусыКонтрагентовИзНастроек();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтатусыКонтрагентов", тзСтатусыКонтрагентов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактнымЛицамКонтрагентовВыгрузки(МенеджерВТ)
	
	Запрос = Новый Запрос;
	
	//vd_180625 Начиная с версии 1.6.15.36 у Справочник.КонтактныеЛица убран Владелец
	//vd_181010 Добавлено условие для УНФ Украины
	Если НЕ гКонфигурация = "УНФ_UA" И ПоколениеКонфигурации(">=УНФ_1.6.15.36") Тогда 
		//УНФ >= 1.6.15.36
		Запрос.Текст = "ВЫБРАТЬ
	               |	СвязиКонтрагентКонтактСрезПоследних.Контрагент.Ссылка КАК Контрагент,
	               |	СвязиКонтрагентКонтактСрезПоследних.Контакт КАК Контакт
	               |ПОМЕСТИТЬ ВТ_КонтактныеЛицаВсехКонтрагентов
	               |ИЗ
	               |	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, СвязьНедействительна = ЛОЖЬ) КАК СвязиКонтрагентКонтактСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КонтактныеЛицаВсехКонтрагентов.Контрагент КАК Контрагент,
	               |	ВТ_КонтактныеЛицаВсехКонтрагентов.Контакт КАК Контакт
	               |ПОМЕСТИТЬ ВТ_КонтактныеЛицаКонтрагентов
	               |ИЗ
	               |	ВТ_КонтактныеЛицаВсехКонтрагентов КАК ВТ_КонтактныеЛицаВсехКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ПО ВТ_КонтактныеЛицаВсехКонтрагентов.Контрагент = ВТ_Контрагенты.ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Контакт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
	               |	ВТ_КонтактныеЛицаКонтрагентов.Контрагент КАК Контрагент,
	               |	КонтактныеЛицаКонтрагентов.Наименование КАК Наименование,
	               |	КонтактныеЛицаКонтрагентов.Комментарий КАК Комментарий
	               |ИЗ
	               |	ВТ_КонтактныеЛицаКонтрагентов КАК ВТ_КонтактныеЛицаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
	               |		ПО ВТ_КонтактныеЛицаКонтрагентов.Контакт = КонтактныеЛицаКонтрагентов.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КонтактныеЛицаВсехКонтрагентов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КонтактныеЛицаКонтрагентов";
		
	Иначе
		//УНФ 	 >= 1.6.15.36
	   	//УНФ_UA 1.6.6.1
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
		               |	КонтактныеЛицаКонтрагентов.Владелец КАК Контрагент,
		               |	КонтактныеЛицаКонтрагентов.Наименование КАК Наименование,
		               |	КонтактныеЛицаКонтрагентов.Комментарий КАК Комментарий
		               |ИЗ
		               |	ВТ_Контрагенты КАК ВТ_Контрагенты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
		               |		ПО ВТ_Контрагенты.Ссылка = КонтактныеЛицаКонтрагентов.Владелец";
	Конецесли;
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактамКонтрагентов(МенеджерВТ)
	
	//УНФ запрос сильно переделан
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент,
	|	ВТ_Контрагенты.Ссылка.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ВТ_Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоНоменклатуре(МенеджерВТ, ДоступныеВидыЦен)

	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;
	
	МенеджерВТКурсыВалют(МенеджерВТ); // добавляем в МенеджерВТ таблицу ВТ_КурсыВалют, если ее еще нет.

	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиНоменклатуры());
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	//Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	//Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
	Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен);
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
	Запрос.УстановитьПараметр("МобильныйСклад", ВыбНастройкиАгента.МобильныйСклад);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос;
	
КонецФункции 

Функция ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ, ДоступныеВидыЦен)

	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;

	Запрос = Новый Запрос(ТекстЗапросаПолученияХарактеристикНоменклатуры());
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	//Запрос.УстановитьПараметр("КратностьВалюты", КратностьВалюты);
	//Запрос.УстановитьПараметр("КурсВалюты", КурсВалюты);
	Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
	//Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен);
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
	Запрос.УстановитьПараметр("МобильныйСклад", ВыбНастройкиАгента.МобильныйСклад);

	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос;

КонецФункции 
 
Функция ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос(ТекстЗапросаВыборкиЕдиницИзмерения());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//Унф
	//Запрос.УстановитьПараметр("ПустойНаборУпаковок", Справочники.НаборыУпаковок.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустойНаборУпаковок", Справочники.НаборыУпаковок.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ДанныеПоЕдиницамИзмеренияВыгрузки()

#КонецОбласти

#Область ВыборкиДанныхПоДокументам

Функция ДанныеПоДокументамЗаказПокупателя()

	//унф все переделано
	
	Запрос = Новый Запрос(); //унф//Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовЗаказПокупателя());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.Проведен КАК Проведен,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
		|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказПокупателя.Договор КАК Договор,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПокупателя.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиницаПродажи,
		|	ЗаказПокупателя.Запасы.(
		|		Ссылка КАК Ссылка,
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		Сумма КАК Сумма,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		ДатаОтгрузки КАК ДатаОтгрузки,
		|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|		Количество КАК Количество
		|	) КАК Запасы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.Ответственный = &Агент
		|	И ЗаказПокупателя.Проведен = ИСТИНА
		|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос;
	
КонецФункции 

Функция ДанныеПоДокументамПродажи()

	//унф все переделано
	
	Если гКэшСпискиОбъектов.Получить("СписокЗаказов") = Неопределено Тогда 
		СписокЗаказов = "";
	Иначе 
		СписокЗаказов = гКэшСпискиОбъектов.Получить("СписокЗаказов");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	//УНФ - запрос исправленный под УНФ
	
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ДокументыРеализация.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ ДокументыПродажи
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		РасходнаяНакладная.Ссылка КАК Ссылка
	//	|	ИЗ
	//	|		Документ.РасходнаяНакладная КАК РасходнаяНакладная
	//	|	ГДЕ
	//	|		ВЫРАЗИТЬ(РасходнаяНакладная.Заказ КАК Документ.ЗаказПокупателя) В (&СписокЗаказов)
	//	|	
	//	|	ОБЪЕДИНИТЬ ВСЕ
	//	|	
	//	|	ВЫБРАТЬ
	//	|		РасходнаяНакладная.Ссылка
	//	|	ИЗ
	//	|		Документ.РасходнаяНакладная КАК РасходнаяНакладная
	//	|	ГДЕ
	//	|		РасходнаяНакладная.Ответственный = &Агент) КАК ДокументыРеализация
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ДокументыПродажи.Ссылка КАК Ссылка,
	//	|	ДокументыПродажи.Ссылка.Дата КАК Дата,
	//	|	ДокументыПродажи.Ссылка.Номер,
	//	|	ДокументыПродажи.Ссылка.Проведен,
	//	|	ДокументыПродажи.Ссылка.Контрагент КАК Контрагент,
	//	|	ДокументыПродажи.Ссылка.Организация КАК Организация,
	//	|	ДокументыПродажи.Ссылка.Договор КАК Соглашение,
	//	|	ДокументыПродажи.Ссылка.ВалютаДокумента КАК Валюта,
	//	|	ДокументыПродажи.Ссылка.СуммаДокумента КАК СуммаДокумента,
	//	|	ДокументыПродажи.Ссылка.СтруктурнаяЕдиница КАК Склад,
	//	|	"""" КАК ФормаОплаты,
	//	|	РеализацияТоваровУслугТовары.Номенклатура,
	//	|	РеализацияТоваровУслугТовары.Характеристика,
	//	|	ДокументыПродажи.Ссылка.ВидЦен,
	//	|	РеализацияТоваровУслугТовары.Цена,
	//	|	РеализацияТоваровУслугТовары.Сумма,
	//	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	//	|	РеализацияТоваровУслугТовары.СуммаНДС,
	//	|	РеализацияТоваровУслугТовары.Всего КАК СуммаСНДС,
	//	|	РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки,
	//	|	РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки,
	//	|	РеализацияТоваровУслугТовары.Ссылка.Комментарий,
	//	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Заказ КАК Документ.ЗаказПокупателя) КАК ДокументЗаказ
	//	|ИЗ
	//	|	Документ.РасходнаяНакладная.Запасы КАК РеализацияТоваровУслугТовары
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
	//	|		ПО (ДокументыПродажи.Ссылка = РеализацияТоваровУслугТовары.Ссылка)
	//	|ГДЕ
	//	|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//	|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления";
	
	
		//УНФ более оптимизированый и простой запрос
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладная.Ссылка КАК Ссылка,
		|	РасходнаяНакладная.Номер КАК Номер,
		|	РасходнаяНакладная.Дата КАК Дата,
		|	РасходнаяНакладная.Проведен КАК Проведен,
		|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
		|	РасходнаяНакладная.ВидЦен КАК ВидЦен,
		|	РасходнаяНакладная.Договор КАК Договор,
		|	РасходнаяНакладная.Комментарий КАК Комментарий,
		|	РасходнаяНакладная.Контрагент КАК Контрагент,
		|	РасходнаяНакладная.Организация КАК Организация,
		|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	"""" КАК ФормаОплаты,
		|	РасходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
		|	ВЫРАЗИТЬ(РасходнаяНакладная.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ,
		|	РасходнаяНакладная.Запасы.(
		|		Номенклатура КАК Номенклатура,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	) КАК Запасы
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	(ВЫРАЗИТЬ(РасходнаяНакладная.Заказ КАК Документ.ЗаказПокупателя) В (&СписокЗаказов)
		|			ИЛИ РасходнаяНакладная.Ответственный = &Агент)
		|	И РасходнаяНакладная.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ РасходнаяНакладная.ПометкаУдаления
		|	И РасходнаяНакладная.Проведен = ИСТИНА
		|	И РасходнаяНакладная.ПометкаУдаления = ЛОЖЬ";

	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("Агент", ВыбАгент); //унф до изменения пользователей в сотрудники	//Запрос.УстановитьПараметр("Агент", ПолучитьСотрудникаПоПользователю(ВыбАгент)); 
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСотрудникаПоПользователю(спрПользователь) Экспорт
	
	//унф
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	НастройкиПользователей.Значение КАК Сотрудник
	                |ИЗ
	                |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                |ГДЕ
	                |	НастройкиПользователей.Настройка = &Настройка
	                |	И НастройкиПользователей.Пользователь = &Пользователь" ;
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный);
	Запрос.УстановитьПараметр("Пользователь", спрПользователь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Сотрудник = Результат[0].Сотрудник;	
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат Сотрудник;
		КонецЕсли;
	КонецЕсли;
		
	Возврат неопределено;
КонецФункции

Функция ПолучитьПользователяПоСотруднику(спрСотрудник) Экспорт
	
	//унф
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	НастройкиПользователей.Пользователь
	                |ИЗ
	                |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                |ГДЕ
	                |	НастройкиПользователей.Настройка = &Настройка
	                |	И НастройкиПользователей.Значение = &Сотрудник" ;
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный);
	Запрос.УстановитьПараметр("Сотрудник", спрСотрудник);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Пользователь = Результат[0].Пользователь;	
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Пользователь;
		КонецЕсли;
	КонецЕсли;
		
	Возврат неопределено;
КонецФункции

Функция ДанныеПоДокументамПеремещения()
	
	//унф переделан один параметр
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовПеремещение());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиПеремещений));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад", ВыбНастройкиАгента.МобильныйСклад);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение); //унф переделано Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПеремещенийТоваров.Принято);	
	//Запрос.УстановитьПараметр("Агент", ВыбАгент); //унф

	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Функция СтатусыКонтрагентовИзНастроек()

	тзКонтрагентыСтатусы = Новый ТаблицаЗначений;
	тзКонтрагентыСтатусы.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	тзКонтрагентыСтатусы.Колонки.Добавить("Статус",     Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	
	Статусы = СтатусыКонтрагентовВыгрузки();
	Для Каждого ЭлементСтатуса Из Статусы Цикл
		КонтрагентыСтауса = ЭлементСтатуса.Контрагенты;
		Если КонтрагентыСтауса <> Неопределено Тогда
			Для Каждого ЭлементСписка Из КонтрагентыСтауса Цикл
				СтрокаТ = тзКонтрагентыСтатусы.Добавить();
				СтрокаТ.Контрагент = ЭлементСписка.Значение;
				СтрокаТ.Статус	   = ВРег(ЭлементСтатуса.Идентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат тзКонтрагентыСтатусы;
	
КонецФункции // СтатусыКонтрагентовИзНастроек()

Функция СтавкаНДСЧислом(Знач СтавкаНДС, НДСпоСтавкам4и2 = Ложь) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.02, 0.1);
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.04, 0.18);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВыгрузкиОрганизаций()

	//стррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение");
	//
	//Если гКонфигурация = "УТ_UA" Тогда
	//	стррЛитералы.ИНН_ИПрочее = "
	//		|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС КАК ИНН,
	//		|	УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
	//		|	УчетнаяПолитикаОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов,
	//		|	"""" КАК КПП,
	//		|	"""" КАК ОГРН";
	//	стррЛитералы.Соединение = "
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
	//		|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
	//		|";
	//Иначе
	//	стррЛитералы.ИНН_ИПрочее = "
	//		|	СправочникОрганизации.ИНН КАК ИНН,
	//		|	СправочникОрганизации.КПП КАК КПП,
	//		|	СправочникОрганизации.ОГРН КАК ОГРН";
	//	стррЛитералы.Соединение = "";
	//КонецЕсли;
	//
	//ТекстЗапроса = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	Организации.Ссылка КАК Ссылка,
	//	|	СправочникОрганизации.Наименование КАК Наименование,
	//	//УНФ
	//	//|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,
	//	|	СправочникОрганизации.Наименование КАК НаименованиеПолное,
	//	|	СправочникОрганизации.Префикс КАК Префикс,
	//	|	[ИНН_ИПрочее]
	//	|{ВЫБРАТЬ
	//	|	Ссылка.*}
	//	|ИЗ
	//	|	ВТ_Организации КАК Организации
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
	//	|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
	//	|		[Соединение]
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	СправочникОрганизации.Наименование
	//	|";
	//	
	//ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	//ДОРАБОТАТЬ убрать левое соедин
	//ТекстЗапроса = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	Организации.Ссылка КАК Ссылка,
	//	|	СправочникОрганизации.Наименование КАК Наименование,
	//	//УНФ
	//	//|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,
	//	|	СправочникОрганизации.Наименование КАК НаименованиеПолное,
	//	|	СправочникОрганизации.Префикс КАК Префикс,
	//	|	СправочникОрганизации.ИНН КАК ИНН,
	//	|	СправочникОрганизации.КПП КАК КПП,
	//	|	СправочникОрганизации.ОГРН КАК ОГРН
	//	|{ВЫБРАТЬ
	//	|	Ссылка.*}
	//	|ИЗ
	//	|	ВТ_Организации КАК Организации
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
	//	|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	СправочникОрганизации.Наименование
	//	|";
		
		//{{vd_181001
		//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		//|	Организации.Ссылка КАК Ссылка,
		//|	СправочникОрганизации.Наименование КАК Наименование,
		//|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,
		//|	СправочникОрганизации.Префикс КАК Префикс,
		//|	СправочникОрганизации.ИНН КАК ИНН,
		//|	СправочникОрганизации.КПП КАК КПП,
		//|	СправочникОрганизации.ОГРН КАК ОГРН
		//|{ВЫБРАТЬ
		//|	Ссылка.*}
		//|ИЗ
		//|	ВТ_Организации КАК Организации
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
		//|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	СправочникОрганизации.Наименование
		//|";
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Организации.Ссылка КАК Ссылка,
		               |	СправочникОрганизации.Наименование КАК Наименование,
		               |	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,
		               |	СправочникОрганизации.Префикс КАК Префикс,
		               |	СправочникОрганизации.ИНН КАК ИНН,
					   |	[КПП] КАК КПП,
		               |	СправочникОрганизации.ОГРН КАК ОГРН
		               |{ВЫБРАТЬ Ссылка}
		               |ИЗ
		               |	ВТ_Организации КАК Организации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
		               |		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СправочникОрганизации.Наименование";
		
		Если гКонфигурация = "УНФ_UA" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КПП]", """""");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КПП]", "СправочникОрганизации.КПП");
		КонецЕсли;
		//}}vd_181001		
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиВидовКонтактнойИнформации()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Договор.Ссылка КАК Ссылка,
		|	Договор.НомерДоговора КАК Номер,
		|	Договор.ДатаДоговора КАК Дата,
		|	Договор.ВидДоговора КАК Типовое,
		|	Договор.ВидЦен КАК ВидЦен,
		|	Договор.ДоговорОбслуживанияДатаНачала КАК ДатаНачалаДействия,
		|	Договор.ДоговорОбслуживанияДатаОкончания КАК ДатаОкончанияДействия,
		|	Договор.Наименование КАК Наименование,
		|	Договор.Организация КАК Организация,
		//унф 20180116
		//|	Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК СегментПартнеров, 
		|	Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК СегментКонтрагентов,
		//(( sk_190415 Атрибут "ИспользоватьНДС" в справочнике "ДоговорыКонтрагентов" не зайдействован (MOD-481) 
		//|	Договор.ЭтоДоговорОбслуживания КАК НалогообложениеНДС,
		|	ЛОЖЬ КАК НалогообложениеНДС,
		//)) sk_190415
		|	Договор.Владелец КАК Контрагент,
		|	СкидкаПоДоговору.Процент КАК Скидка
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договор
		|		ПО ВТ_Контрагенты.Ссылка = Договор.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСкидокНаценок КАК СкидкаПоДоговору
		|		ПО (Договор.ВидСкидкиНаценки = СкидкаПоДоговору.Ссылка)
		|ГДЕ
		|	Договор.Организация В(&Организации)
		|	И НЕ Договор.ПометкаУдаления";

	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаОтбораНоменклатуры()
	
	//УНФ Запрос переделан под УНФ

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		//|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры, //нет вида попробуем использовать тип
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ВТ_Ассортимент
		|{ВЫБРАТЬ
		|	Ссылка.*,
		|	ЕдиницаИзмерения.*,
		|	ЕдиницаИзмеренияНаименование,
		//|	ВидНоменклатуры.*,
		|	ТипНоменклатуры.*,
		|	ПометкаУдаления
//		|	,ИндивидуальныйНабор
		|}
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|{ГДЕ
		|	Номенклатура.Ссылка.* КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения.*,
		|	Номенклатура.ЕдиницаИзмерения.Наименование,
		//|	Номенклатура.ВидНоменклатуры.*,
		|	Номенклатура.ТипНоменклатуры.*,
		|	Номенклатура.ПометкаУдаления
		|}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиНоменклатуры()

Процедура ЗаменитьЛитералы(Шаблон, стррЛитералы)
	
	Для Каждого Литерал Из стррЛитералы Цикл
		Шаблон = СтрЗаменить(Шаблон, "[" + Литерал.Ключ + "]", 
			?(Литерал.Значение <> Неопределено, Литерал.Значение, Литерал.Ключ)); // если значение литерала не указано, заменяем его на наименование литерала
	КонецЦикла
	
КонецПроцедуры

//УНФ полностью изменен
Функция ТекстЗапросаВыгрузкиНоменклатуры()
	
	//((vd_190405 У справочника номенклатура удален реквизит Справочник.Номенклатура.СтавкаНДС, вместо него добавлен ВидСтавкиНДС
	Если ПоколениеКонфигурации(">=УНФ_1.6.17.128") Тогда
		стрЛитералНДС = "ВТ_НоменклатураСклады.Номенклатура.ВидСтавкиНДС"; // ЛитералНДС = "ВТ_НоменклатураСклады.Номенклатура.ВидСтавкиНДС"; sk_190415 Изменено название переменной
	Иначе
		стрЛитералНДС = "ВТ_НоменклатураСклады.Номенклатура.СтавкаНДС";	
	КонецЕсли;
	//))vd_190405
	
	//В справочнике Номенклатура
	//УНФ 1.6.9.54  - Нет реквизита Вес
	//УНФ 1.6.10.38 - Есть реквизит Вес
	//(( sk_190424
	Если ПоколениеКонфигурации(">=УНФ_1.6.10.38") Тогда 
		стрВесовой = "ВЫБОР КОГДА ВТ_НоменклатураСклады.Номенклатура.Вес > 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ"; // sk_190415 Определяем признак "Весовой" в рамках (MOD-480)
	Иначе
		стрВесовой = "ЛОЖЬ";
	КонецЕсли;
	//)) sk_190424 
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Ассортимент.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстатка
		|ИЗ
		|	ВТ_Ассортимент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки() КАК Резерв
		|		ПО (ВТ_Ассортимент.Ссылка = Резерв.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки() КАК Запас
		|		ПО (ВТ_Ассортимент.Ссылка = Запас.Номенклатура)		
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ВыгружатьТоварыСНулевымОстатком
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|						ТОГДА Запас.КоличествоОстаток - ЕСТЬNULL(Резерв.КоличествоОстаток, 0)
		|						ИНАЧЕ Запас.КоличествоОстаток
		|					   КОНЕЦ, 0) > 0
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
		|	ВТ_Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ ВТ_НоменклатураСклады
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстатка КАК ВТ_НоменклатураСУчетомОстатка,
		|	ВТ_Склады КАК ВТ_Склады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСклады.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСклады.Склад КАК Склад,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &УчитыватьРезервы
		|				ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
		|			ИНАЧЕ РегистрЗапас.КоличествоОстаток
		|		КОНЕЦ, 0) КАК Остаток,
		|	ВТ_НоменклатураСклады.Склад.Наименование КАК НаименованиеСклада,
		|	ВЫБОР
		|		КОГДА &РежимВыгрузкиКодов = ""КОД""
		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Код
		|		КОГДА &РежимВыгрузкиКодов = ""АРТИКУЛ""
		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Артикул
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ВТ_НоменклатураСклады.Номенклатура.Наименование КАК Наименование,
		|	ВТ_НоменклатураСклады.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		//(( sk_190415 Исправление в рамках (MOD-480)
		//|	ВТ_НоменклатураСклады.Номенклатура.Ячейка Как Весовой,
		|	&Весовой Как Весовой,
		//)) sk_190415
		//|	ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		//dm_180615
		|	ВТ_НоменклатураСклады.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_НоменклатураСклады.Номенклатура.ФайлКартинки КАК ФайлКартинки,
		//vd_190405 ВТ_НоменклатураСклады.Номенклатура.СтавкаНДС КАК СтавкаНДС 
		|	&ЛитералНДС КАК НДС,
		//dm_180615	ВТ_НоменклатураСклады.Номенклатура.Описание КАК Описание,
		|	ВТ_НоменклатураСклады.Номенклатура.Комментарий КАК Комментарий,
		|	ВТ_НоменклатураСклады.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВТ_НоменклатураСклады.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВТ_НоменклатураСклады.Номенклатура.Родитель КАК Родитель,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ИспользоватьХарактеристики = Ложь
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УчетПоХарактеристикам,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Склад = &МобильныйСклад
		|			ТОГДА ЕСТЬNULL(
		|			ВЫБОР
		|				КОГДА &УчитыватьРезервы
		|				ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
		|				ИНАЧЕ РегистрЗапас.КоличествоОстаток
		|			КОНЕЦ, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокМобСклада
		|ИЗ
		|	ВТ_НоменклатураСклады КАК ВТ_НоменклатураСклады
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки() КАК РегистрРезерв
		|		ПО (ВТ_НоменклатураСклады.Номенклатура = РегистрРезерв.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки() КАК РегистрЗапас
		|		ПО (ВТ_НоменклатураСклады.Номенклатура = РегистрЗапас.Номенклатура)
		|			И (ВТ_НоменклатураСклады.Склад = РегистрЗапас.СтруктурнаяЕдиница)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	НаименованиеСклада
		|ИТОГИ
		|	СУММА(Остаток),
		|	СУММА(ОстатокМобСклада)
		|ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка В(&ВидыЦен)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
		|	ВТ_ВидыЦен.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦен
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстатка,
		|	ВТ_ВидыЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураВидыЦен.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураВидыЦен.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ВТ_НоменклатураВидыЦен.ВидЦены.Наименование КАК НаименованиеВидаЦены
		|ИЗ
		|	ВТ_НоменклатураВидыЦен КАК ВТ_НоменклатураВидыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = ВТ_НоменклатураВидыЦен.Номенклатура)
		|			И (ЦеныНоменклатуры.ВидЦен = ВТ_НоменклатураВидыЦен.ВидЦены)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	НаименованиеВидаЦены
		|ИТОГИ ПО
		|	Номенклатура
		|";
		
		//vd_190405
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЛитералНДС", стрЛитералНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Весовой", стрВесовой); // sk_190415 В рамках (MOD-480)
		
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаПолученияХарактеристикНоменклатуры()
	
	//унф все переделано
	
	//старыйзапрос
	//ТекстЗапроса = "
	//	|ВЫБРАТЬ
	//	|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
	//	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	//	|ПОМЕСТИТЬ ВТ_Характеристики
	//	|ИЗ
	//	|	ВТ_Ассортимент КАК ВТ_Ассортимент
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//	|		ПО ВТ_Ассортимент.Ссылка = ХарактеристикиНоменклатуры.Владелец
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Номенклатура,
	//	|	Характеристика
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ВТ_Характеристики.Номенклатура КАК Номенклатура,
	//	|	ВТ_Характеристики.Характеристика КАК Характеристика
	//	|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстаткаХ
	//	|ИЗ
	//	|	ВТ_Характеристики КАК ВТ_Характеристики
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки() КАК РегистрЗапас
	//	|		ПО (ВТ_Характеристики.Номенклатура = РегистрЗапас.Номенклатура
	//	|		   И ВТ_Характеристики.Характеристика = РегистрЗапас.Характеристика)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки() КАК РегистрРезерв
	//	|		ПО (ВТ_Характеристики.Номенклатура = РегистрРезерв.Номенклатура
	//	|		   И ВТ_Характеристики.Характеристика = РегистрРезерв.Характеристика)
	//	|
	//	|ГДЕ
	//	|	ВЫБОР
	//	|			КОГДА &ВыгружатьТоварыСНулевымОстатком
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
	//	|						КОГДА &УчитыватьРезервы
	//	|						ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
	//	|						ИНАЧЕ РегистрЗапас.КоличествоОстаток
	//	|					КОНЕЦ, 0) > 0
	//	|	КОНЕЦ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
	//	|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
	//	|	ВТ_Склады.Ссылка КАК Склад
	//	|ПОМЕСТИТЬ ВТ_НоменклатураСкладыХ
	//	|ИЗ
	//	|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
	//	|	ВТ_Склады КАК ВТ_Склады
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Номенклатура,
	//	|	Характеристика,		
	//	|	Склад
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_НоменклатураСкладыХ.Номенклатура КАК Номенклатура,
	//	|	ВТ_НоменклатураСкладыХ.Характеристика КАК Характеристика,
	//	|	ВТ_НоменклатураСкладыХ.Склад КАК Склад,
	//	|	ЕСТЬNULL(
	//	|		ВЫБОР
	//	|			КОГДА &УчитыватьРезервы
	//	|			ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
	//	|			ИНАЧЕ РегистрЗапас.КоличествоОстаток
	//	|		КОНЕЦ, 0) КАК Остаток,
	//	|	ВТ_НоменклатураСкладыХ.Склад.Наименование КАК НаименованиеСклада,
	//	|	ВТ_НоменклатураСкладыХ.Номенклатура.Наименование КАК Наименование,
	//	|	ВТ_НоменклатураСкладыХ.Характеристика.НаименованиеДляПечати КАК НаименованиеХарактеристики,
	//	|	ВЫБОР
	//	|		КОГДА ВТ_НоменклатураСкладыХ.Склад = &МобильныйСклад
	//	|		ТОГДА ЕСТЬNULL(
	//	|				ВЫБОР
	//	|					КОГДА &УчитыватьРезервы
	//	|					ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
	//	|					ИНАЧЕ РегистрЗапас.КоличествоОстаток
	//	|				КОНЕЦ, 0)
	//	|		ИНАЧЕ 0
	//	|	КОНЕЦ КАК ОстатокМобСклада
	//	|ИЗ
	//	|	ВТ_НоменклатураСкладыХ КАК ВТ_НоменклатураСкладыХ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки() КАК РегистрЗапас
	//	|		ПО (ВТ_НоменклатураСкладыХ.Номенклатура = РегистрЗапас.Номенклатура)
	//	|			И (ВТ_НоменклатураСкладыХ.Характеристика = РегистрЗапас.Характеристика)
	//	|			И (ВТ_НоменклатураСкладыХ.Склад = РегистрЗапас.СтруктурнаяЕдиница)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки() КАК РегистрРезерв
	//	|		ПО (ВТ_НоменклатураСкладыХ.Номенклатура = РегистрРезерв.Номенклатура)
	//	|			И (ВТ_НоменклатураСкладыХ.Характеристика = РегистрРезерв.Характеристика)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Номенклатура,
	//	|	Характеристика,		
	//	|	НаименованиеСклада
	//	|ИТОГИ
	//	|	СУММА(Остаток),
	//	|	СУММА(ОстатокМобСклада)		
	//	|ПО
	//	|	Номенклатура,
	//	|	Характеристика
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
	//	|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
	//	|	ВТ_ВидыЦен.ВидЦены КАК ВидЦены
	//	|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦенХ
	//	|ИЗ
	//	|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
	//	|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Номенклатура,
	//	|	Характеристика,
	//	|	ВидЦены
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_НоменклатураВидыЦенХ.Номенклатура КАК Номенклатура,
	//	|	ВТ_НоменклатураВидыЦенХ.Характеристика КАК Характеристика,
	//	|	ВТ_НоменклатураВидыЦенХ.ВидЦены КАК ВидЦены,
	//	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(15, 2)) КАК Цена,
	//	|	ВТ_НоменклатураВидыЦенХ.ВидЦены.Наименование КАК НаименованиеВидаЦены
	//	|ИЗ
	//	|	ВТ_НоменклатураВидыЦенХ КАК ВТ_НоменклатураВидыЦенХ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатуры
	//	|		ПО  ЦеныНоменклатуры.Номенклатура = ВТ_НоменклатураВидыЦенХ.Номенклатура
	//	|			И ЦеныНоменклатуры.Характеристика = ВТ_НоменклатураВидыЦенХ.Характеристика
	//	|			И ЦеныНоменклатуры.ВидЦен = ВТ_НоменклатураВидыЦенХ.ВидЦены
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Номенклатура,
	//	|	Характеристика,
	//	|	НаименованиеВидаЦены
	//	|ИТОГИ ПО
	//	|	Номенклатура,
	//	|	Характеристика
	//	|";	

	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Характеристики
		|ИЗ
		|	ВТ_Ассортимент КАК ВТ_Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ВТ_Ассортимент.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ВТ_Характеристики.Номенклатура КАК Номенклатура,
		|	ВТ_Характеристики.Характеристика КАК Характеристика,
		|	ВТ_Склады.Ссылка КАК Склад 
		|ПОМЕСТИТЬ ВТ_ХарактеристикиСклады
		|ИЗ
		|   ВТ_Характеристики, 
		|	ВТ_Склады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,Характеристика,Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХарактеристикиСклады.Номенклатура КАК Номенклатура,
		|	ВТ_ХарактеристикиСклады.Характеристика КАК Характеристика,
		|	ВТ_ХарактеристикиСклады.Склад КАК Склад,
		|	ЕстьNULL(РегистрЗапас.КоличествоОстаток, 0) КАК КоличествоОстатокЗапас,
		|	ЕстьNULL(РегистрЗапас.КоличествоОстаток, 0) КАК КоличествоОстатокРезерв
		|ПОМЕСТИТЬ ВТ_ХарактеристикиСкладыОстатки
		|ИЗ
		|	ВТ_ХарактеристикиСклады КАК ВТ_ХарактеристикиСклады
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки() КАК РегистрЗапас
		|		ПО (ВТ_ХарактеристикиСклады.Номенклатура = РегистрЗапас.Номенклатура
		|		   И ВТ_ХарактеристикиСклады.Характеристика = РегистрЗапас.Характеристика
		|		   И ВТ_ХарактеристикиСклады.Склад = РегистрЗапас.СтруктурнаяЕдиница)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки() КАК РегистрРезерв
		|		ПО (ВТ_ХарактеристикиСклады.Номенклатура = РегистрРезерв.Номенклатура
		|		   И ВТ_ХарактеристикиСклады.Характеристика = РегистрРезерв.Характеристика)
		|
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВыгружатьТоварыСНулевымОстатком
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|						ТОГДА РегистрЗапас.КоличествоОстаток - ЕстьNULL(РегистрРезерв.КоличествоОстаток, 0)
		|						ИНАЧЕ РегистрЗапас.КоличествоОстаток
		|					КОНЕЦ, 0) > 0
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Характеристики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ХарактеристикиСклады
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХарактеристикиСкладыОстатки.Номенклатура КАК Номенклатура,
		|	ВТ_ХарактеристикиСкладыОстатки.Характеристика КАК Характеристика,
		|	ВТ_ХарактеристикиСкладыОстатки.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &УчитыватьРезервы
		|		ТОГДА ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокЗапас - ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокРезерв
		|		ИНАЧЕ ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокЗапас
		|	КОНЕЦ КАК Остаток,
		|	ВТ_ХарактеристикиСкладыОстатки.Склад.Наименование КАК НаименованиеСклада,
		|	ВТ_ХарактеристикиСкладыОстатки.Номенклатура.Наименование КАК Наименование,
		|	ВТ_ХарактеристикиСкладыОстатки.Характеристика.НаименованиеДляПечати КАК НаименованиеХарактеристики,
		|	ВЫБОР
		|		КОГДА ВТ_ХарактеристикиСкладыОстатки.Склад = &МобильныйСклад
		|		ТОГДА	ВЫБОР
		|			    	КОГДА &УчитыватьРезервы
		|					ТОГДА ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокЗапас - ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокРезерв
		|					ИНАЧЕ ВТ_ХарактеристикиСкладыОстатки.КоличествоОстатокЗапас
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокМобСклада
		|ИЗ
		|	ВТ_ХарактеристикиСкладыОстатки КАК ВТ_ХарактеристикиСкладыОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,		
		|	НаименованиеСклада
		|ИТОГИ
		|	СУММА(Остаток),
		|	СУММА(ОстатокМобСклада)		
		|ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|//222222222222222222222222222///////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ХарактеристикиСкладыОстатки.Номенклатура,
		|   ВТ_ХарактеристикиСкладыОстатки.Характеристика
		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстаткаХ
		|ИЗ
		|  ВТ_ХарактеристикиСкладыОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,Характеристика
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////	
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
		|	ВТ_ВидыЦен.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦенХ
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
		|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураВидыЦенХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураВидыЦенХ.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураВидыЦенХ.ВидЦены КАК ВидЦены,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВТ_НоменклатураВидыЦенХ.ВидЦены.Наименование КАК НаименованиеВидаЦены
		|ИЗ
		|	ВТ_НоменклатураВидыЦенХ КАК ВТ_НоменклатураВидыЦенХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатуры
		|		ПО  ЦеныНоменклатуры.Номенклатура = ВТ_НоменклатураВидыЦенХ.Номенклатура
		|			И ЦеныНоменклатуры.Характеристика = ВТ_НоменклатураВидыЦенХ.Характеристика
		|			И ЦеныНоменклатуры.ВидЦен = ВТ_НоменклатураВидыЦенХ.ВидЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	НаименованиеВидаЦены
		|ИТОГИ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ХарактеристикиСкладыОстатки
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НоменклатураСУчетомОстаткаХ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НоменклатураВидыЦенХ
		|
		|";	
		
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаВыборкиЕдиницИзмерения()

	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	КлассификаторЕдиницИзмерения.Ссылка КАК Классификатор,
	//               |	КлассификаторЕдиницИзмерения.Наименование КАК Наименование,
	//               |	ВТ_Ассортимент.Ссылка КАК Номенклатура
	//               |ИЗ
	//               |	ВТ_Ассортимент КАК ВТ_Ассортимент
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	//               |		ПО ВТ_Ассортимент.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка";
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КлассификаторЕдиницИзмерения.Ссылка КАК Классификатор,
		               |	КлассификаторЕдиницИзмерения.Наименование КАК Наименование,
		               |	ВТ_Ассортимент.Ссылка КАК Номенклатура,
		               |	ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК Коэффициент
		               |ИЗ
		               |	ВТ_Ассортимент КАК ВТ_Ассортимент
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		               |		ПО ВТ_Ассортимент.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |		ПО ВТ_Ассортимент.Ссылка = ЕдиницыИзмерения.Владелец";          	
	
	//ТекстЗапроса = 
	//		"ВЫБРАТЬ
	//		|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
	//		|	"""" КАК КодОКЕИ,
	//		|	Номенклатура.ЕдиницаИзмеренияНаименование КАК Наименование,
	//		|	1 КАК Коэффициент,
	//		|	Номенклатура.Ссылка КАК Номенклатура,
	//		//Унф
	//		//|	[НоменклатураВес] Как Вес,
	//		|	ЛОЖЬ КАК ЭтоНаборУпаковок,
	//		|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
	//		|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
	//		|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
	//		|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
	//		|ИЗ
	//		|	ВТ_Ассортимент КАК Номенклатура
	//		|ГДЕ
	//		|	(НЕ Номенклатура.ИспользоватьУпаковки
	//		|			ИЛИ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	//		|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
	//		|
	//		|ОБЪЕДИНИТЬ
	//		|
	//		|ВЫБРАТЬ
	//		|	Упаковки.Ссылка,
	//		|	"""",
	//		|	Упаковки.Наименование,
	//		|	[УпаковкиКоэффициент],
	//		|	Упаковки.Владелец,
	//		|	Упаковки.Вес,
	//		|	ЛОЖЬ,
	//		|	&ПустойНаборУпаковок,
	//		|	Упаковки.ЕдиницаИзмерения,
	//		|	ЛОЖЬ
	//		|ИЗ
	//		|	Справочник.[Упаковки] КАК Упаковки
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
	//		|		ПО Упаковки.Владелец = Номенклатура.Ссылка
	//		|ГДЕ
	//		|	Номенклатура.ИспользоватьУпаковки
	//		|	И Номенклатура.ИндивидуальныйНабор
	//		|
	//		|ОБЪЕДИНИТЬ
	//		|
	//		|ВЫБРАТЬ
	//		|	Упаковки.Ссылка,
	//		|	"""",
	//		|	Упаковки.Наименование,
	//		|	[УпаковкиКоэффициент],
	//		|	&ПустаяНоменклатура,
	//		|	Упаковки.Вес,
	//		|	ИСТИНА,
	//		|	Упаковки.Владелец,
	//		|	Упаковки.ЕдиницаИзмерения,
	//		|	ЛОЖЬ
	//		|ИЗ
	//		|	Справочник.[Упаковки] КАК Упаковки
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	//		|		ПО Упаковки.Владелец = НаборыУпаковок.Ссылка
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
	//		|		ПО (НаборыУпаковок.Ссылка = Номенклатура.НаборУпаковок)
	//		|ГДЕ
	//		|	Номенклатура.ИспользоватьУпаковки
	//		|	И НЕ Номенклатура.ИндивидуальныйНабор";
	//	
	//	
	//ТекстЗапроса = ТекстЗапроса + ";
	//	|
	//	|////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЕдиницыБезКлассификаторов.Ссылка КАК Ссылка,
	//	|	ЕдиницыБезКлассификаторов.КодОКЕИ КАК КодОКЕИ,
	//	|	ЕдиницыБезКлассификаторов.Наименование КАК Наименование,
	//	|	ЕдиницыБезКлассификаторов.Коэффициент КАК Коэффициент,
	//	|	ЕдиницыБезКлассификаторов.Номенклатура КАК Номенклатура,
	//	//унф
	//	//|	ЕдиницыБезКлассификаторов.Вес КАК Вес,
	//	//|	ЕдиницыБезКлассификаторов.ЭтоНаборУпаковок КАК ЭтоНаборУпаковок,
	//	//|	ЕдиницыБезКлассификаторов.ВладелецНаборУпаковок КАК ВладелецНаборУпаковок,
	//	|	ЕдиницыБезКлассификаторов.Классификатор КАК Классификатор,
	//	|	ЕдиницыБезКлассификаторов.ЭтоЕдиницаНоменклатуры КАК ЭтоЕдиницаНоменклатуры
	//	|ИЗ
	//	|	ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов
	//	|
	//	////Унф
	//	//|ОБЪЕДИНИТЬ
	//	//|
	//	//|ВЫБРАТЬ
	//	//|	Классификатор.Ссылка,
	//	//|	Классификатор.Код,
	//	//|	Классификатор.Наименование,
	//	//|	1,
	//	//|	&ПустаяНоменклатура,
	//	//|	0,
	//	//|	ЛОЖЬ,
	//	//|	&ПустойНаборУпаковок,
	//	//|	&ПустойНаборУпаковок,
	//	//|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
	//	//|ИЗ
	//	//|	Справочник.[УпаковкиЕдиницыИзмерения] КАК Классификатор
	//	//|ГДЕ
	//	//|	Классификатор.Ссылка В
	//	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	//|				ЕдиницыБезКлассификаторов.Классификатор
	//	//|			ИЗ
	//	//|				ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов)
	//	|";
	//
	////ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВsборкиЕдиницИзмерения()

Функция ТекстЗапросаВыборкиГруппКонтрагентов()
	
	//УНФ ВСЕ переделано	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Контрагенты.Ссылка.ГруппаДоступа КАК Ссылка,
	|	ВТ_Контрагенты.Ссылка.ГруппаДоступа.Наименование КАК Наименование
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|ГДЕ
	|	ВТ_Контрагенты.Ссылка.ГруппаДоступа <> Значение(Справочник.ГруппыДоступаКонтрагентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиГруппНоменклатуры()

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Родитель
	|ПОМЕСТИТЬ РодителиТоваров
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
	|		ПО Номенклатура.Ссылка = ВТ_Ассортимент.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Родитель КАК РодительЭл
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодителиТоваров КАК РодителиТоваров
	|		ПО Номенклатура.Ссылка = РодителиТоваров.Родитель
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиГруппНоменклатуры()

Функция ТекстЗапросаВыборкиДокументовПеремещение()
	
	//УНФ все переделано
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремещениеЗапасов.Ссылка,
	               |	ПеремещениеЗапасов.Дата,
	               |	ПеремещениеЗапасов.Проведен,
	               |	ПеремещениеЗапасов.Организация,
	               |	ПеремещениеЗапасов.СтруктурнаяЕдиница,
	               |	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель,
	               |	ПеремещениеЗапасов.Комментарий,
	               |	ПеремещениеЗапасов.Запасы.(
	               |		Ссылка,
	               |		Номенклатура,
	               |		Характеристика,
	               |		Количество,
	               |		ЕдиницаИзмерения,
	               |		Сумма
	               |	)
	               |ИЗ
	               |	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	               |ГДЕ
	               |	НЕ ПеремещениеЗапасов.ПометкаУдаления
	               |	И ПеремещениеЗапасов.Проведен
	               |	И ПеремещениеЗапасов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (ПеремещениеЗапасов.СтруктурнаяЕдиница = &Склад
	               |			ИЛИ ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель = &Склад)
	               |	И ПеремещениеЗапасов.ВидОперации = &ВидОперации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеЗапасов.МоментВремени
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияИзображений()
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияКонтрагентов Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	стрОбласть = "";
	
	Если ВыгружатьИзображенияТоваров Тогда
		
		стрОбласть = стрОбласть + "
		    |ВЫБРАТЬ
		    |	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		    |	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		    |	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		    |	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
		    |	НоменклатураПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище
		    |ИЗ
		    |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		    |ГДЕ
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
		    |	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ НоменклатураПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	Если ВыгружатьИзображенияКонтрагентов Тогда
		
		стрОбласть = стрОбласть + ?(стрОбласть = "", "", " ОБЪЕДИНИТЬ ВСЕ ") +
		 "ВЫБРАТЬ
		  |	КонтрагентыПрисоединенныеФайлы.Ссылка,
		  |	КонтрагентыПрисоединенныеФайлы.ВладелецФайла,
		  |	КонтрагентыПрисоединенныеФайлы.Наименование,
		  |	КонтрагентыПрисоединенныеФайлы.Расширение,
		  |	КонтрагентыПрисоединенныеФайлы.Описание,
		  |	КонтрагентыПрисоединенныеФайлы.ФайлХранилище
		  |ИЗ
		  |	Справочник.КонтрагентыПрисоединенныеФайлы КАК КонтрагентыПрисоединенныеФайлы
		  |ГДЕ
		  |	КонтрагентыПрисоединенныеФайлы.ВладелецФайла В
		  |			(ВЫБРАТЬ
		  |				ВТ_Контрагенты.Ссылка
		  |			ИЗ
		  |				ВТ_Контрагенты)
		  |	И НЕ КонтрагентыПрисоединенныеФайлы.ПометкаУдаления
		  |	И НЕ КонтрагентыПрисоединенныеФайлы.Зашифрован";	
		
	КонецЕсли; 
	
	//vd_180226 добавил условия по версиям	
	
	//стррВерсияУНФ = ВерсияУчетнойСистемы;
	//стрВерсияПараметр = Число(стррВерсияУНФ.КонфигурацияПодВерсияПараметр1);
	
	Если ПоколениеКонфигурации("<УНФ_1.6.10.0") Тогда 
		Текст = "
			|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	ПрисоединенныеФайлы.ХранимыйФайл,
		    |	ФайлыСправочников.Ссылка,
		    |	ФайлыСправочников.ВладелецФайла,
		    |	ФайлыСправочников.Наименование,
		    |	ФайлыСправочников.Расширение,
		    |	ФайлыСправочников.Описание
		    |ИЗ
		    |	([Область]) КАК ФайлыСправочников
		    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		    |		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
			|";		
	ИначеЕсли ПоколениеКонфигурации(">=УНФ_1.6.10.0") Тогда
		Текст = "
			|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	ПрисоединенныеФайлы.ДвоичныеДанныеФайла КАК ХранимыйФайл,
		    |	ФайлыСправочников.Ссылка,
		    |	ФайлыСправочников.ВладелецФайла,
		    |	ФайлыСправочников.Наименование,
		    |	ФайлыСправочников.Расширение,
		    |	ФайлыСправочников.Описание
		    |ИЗ
		    |	([Область]) КАК ФайлыСправочников
		    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ПрисоединенныеФайлы
		    |		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.Файл
			|";	
	КонецЕсли;	
	
	Текст = СтрЗаменить(Текст, "[Область]", стрОбласть);
	
	Возврат Текст; 
	
КонецФункции

// ТекстыЗапросов
#КонецОбласти

#Область ФормированиеВремеменныхТаблиц

Функция МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Если ТипЗнч(ОтборыСКД) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборыСКД.Использование Тогда
		ИспользоватьМакетКомпоновки = Истина;
	ИначеЕсли ТипЗнч(ОтборыСКД) = Тип("Массив") Тогда
		ИспользоватьМакетКомпоновки = Истина;
	Иначе
		ИспользоватьМакетКомпоновки = Ложь;
	КонецЕсли; 
	
	Если ИспользоватьМакетКомпоновки Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.НаборДанных.Запрос);
		Для Каждого ЭлементОтбора Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
	КонецЕсли; 
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос;
	
КонецФункции

Процедура МенеджерВТВыполнитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса);
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Организации (если такой еще не добавлено).
// Дополнительно обновляет кэш значений гКэшСпискиОбъектов - добавляет в свойство "ОрганизацииВыгрузки" массив выгружаемых организаций.
Процедура МенеджерВТОрганизации(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Организации") = Неопределено Тогда 	
	
		Отбор = ЭлементОтбораПоЛевомуЗначению("Организации");
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_Организации
			|{ВЫБРАТЬ
			|	Ссылка.*}
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ 
			|	Не Организации.ПометкаУдаления
			|{ГДЕ
			|	Организации.Ссылка.* КАК Организации}
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|";
			
		МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отбор, ТекстЗапроса);
		
		ВключенОтборПоОрганизациям = ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И Отбор.Использование И ЗначениеЗаполнено(Отбор.ПравоеЗначение);
		
		// помещаем массив организаций в кэш
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Организации").ПолучитьДанные();			
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки_ВключенОтбор", ВключенОтборПоОрганизациям); // признак, что в настройках агента включен отбор по организациям
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_КурсыВалют (если такой еще не добавлено)
Процедура МенеджерВТКурсыВалют(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_КурсыВалют") = Неопределено Тогда 
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	ВЫБОР
			|		КОГДА КурсыВалют.Курс ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Курс = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Курс
			|	КОНЕЦ / 
			|	ВЫБОР
			|		КОГДА КурсыВалют.Кратность ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Кратность = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Кратность
			|	КОНЕЦ КАК КурсКратный
			|ПОМЕСТИТЬ ВТ_КурсыВалют
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(,) КАК КурсыВалют
			|ИНДЕКСИРОВАТЬ ПО
			|	Валюта
		    |";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенеджерВТКонтрагенты(МенеджерВТ)

	Если Константы.ИспользоватьГруппыДоступаКонтрагентов.Получить() Тогда 
		Отборы = ЭлементОтбораПоЛевомуЗначению("Контрагенты", "ВидКонтрагента,ГруппаДоступа,Ответственный");
	Иначе
		Отборы = ЭлементОтбораПоЛевомуЗначению("Контрагенты", "ВидКонтрагента,Ответственный");	
	КонецЕсли;  	
		
		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Контрагенты
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|{ГДЕ
		|	Контрагенты.Ссылка.* КАК Контрагенты}
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
	
	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);

КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Соглашения (если такой еще не добавлено)
Процедура МенеджерВТДоговоры(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_Договоры") = Неопределено Тогда 	
		мОрганизации = ОрганизацииВыгрузки(МенеджерВТ);
		ВключитьОтборПоОрганизациям = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки_ВключенОтбор");
		Запрос = Новый Запрос(ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям));
		Запрос.УстановитьПараметр("Организации", мОрганизации);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТНоменклатуры(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Номенклатура", "КатегорияНоменклатуры,ТипНоменклатуры,ЦеноваяГруппа");
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, Отборы, ТекстЗапросаОтбораНоменклатуры());
	
	//++УНФ
	//Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	//Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	//--УНФ
	
	// Так же необходимо сделать выгрузку номенклатуры по созданным документам
	Запрос.Выполнить();

КонецПроцедуры 

Процедура МенеджерВТСклады(МенеджерВТ)
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Склады");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Ссылка Как Ссылка
		|ПОМЕСТИТЬ ВТ_Склады
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК Склады
		|ГДЕ
		|	Склады.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
		|{ГДЕ
		|	Склады.Ссылка.* КАК Склады}";

	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
	гмСкладыВыгрузки = Неопределено; // сбрасываем глобальный массив складов выгрузки
	
КонецПроцедуры

Функция МенеджерВТПолучить(стрВидыОбъектов = "Номенклатура,Контрагенты,Склады")
	
	
	мВидыОбъектов = СтрРазделить_(стрВидыОбъектов);
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	//ВТВТВТ
	
	Для каждого стрВидОбъекта Из мВидыОбъектов Цикл
		Если стрВидОбъекта = "Номенклатура" Тогда
		    МенеджерВТНоменклатуры(МенеджерВТ);
		//ИначеЕсли стрВидОбъекта = "Партнеры" Тогда
		//	МенеджерВТПартнеров(МенеджерВТ);
		ИначеЕсли стрВидОбъекта = "Контрагенты" Тогда
			МенеджерВТКонтрагенты(МенеджерВТ);
		ИначеЕсли стрВидОбъекта = "Склады" Тогда
			МенеджерВТСклады(МенеджерВТ);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат МенеджерВТ;

КонецФункции 

// ФормированиеВремеменныхТаблиц
#КонецОбласти

// Функция создает zip-архив выгружаемых картинок.
// 
// Параметры:
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
//  
// Возвращаемое значение:
//  Строка   - полный путь к zip-архиву.
//  
Функция СформироватьАрхивСКартинками(тзКартинки)
	   	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
				
	КаталогКартинок = КаталогВременныхФайловДляТранспорта("Pictures");
	
	ПолноеИмяАрхиваКартинок = КаталогКартинок + "GoodsPhotosFromCDB.zip";
	
	АрхивКартинок = Новый ЗаписьZipФайла(ПолноеИмяАрхиваКартинок, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
	
	Для Каждого СтрокаТ Из тзКартинки Цикл			
		ФайлСсылка = СтрокаТ.Ссылка; 
		стррДанные = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка);	
		ПолноеИмяФайла = КаталогКартинок + СтрокаТ.ИмяФайла;
		Если Не ФайлСуществует(ПолноеИмяФайла) Тогда // если файла в каталоге нет, записываем его из БД
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(стррДанные.СсылкаНаДвоичныеДанныеФайла);
			Если ДвоичныеДанные = Неопределено Тогда
				Продолжить;
			Иначе
				ДвоичныеДанные.Записать(ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли; 
		АрхивКартинок.Добавить(ПолноеИмяФайла);
	КонецЦикла;	
	
	АрхивКартинок.Записать();
	
	Возврат ПолноеИмяАрхиваКартинок;
	
КонецФункции

// ВыгрузкаДанных
#КонецОбласти

#Область ЗагрузкаДанных

Процедура ОповеститьОСменеАгента(СтарыйАгент, НовыйАгент)
	
	Текст = НСтр("ru = 'В файле загузки данных указан агент (%1), отличающийся от текущего (%2). Загрузка проводится для агента из файла выгрузки (%1).'; uk = 'У файлі загузкі даних вказано агент (%1), що відрізняється від поточного (%2). Завантаження проводиться для агента з файлу вивантаження (%1).'");
	Текст = СтрШаблон_(Текст, Строка(НовыйАгент), Строка(СтарыйАгент));
	ОповеститьОСобытии(Текст, "ОшибкаНастройки", , СтарыйАгент);
	
КонецПроцедуры

//vd_181002 ЗагружаемыеОбъекты перенесена в параметры
// Функция возвращает Истина, если загрузка прошла корректно.
Функция ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты)

	Результат = Истина;	
	
	//ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла(); //vd_181002 Перенесена в параметры
	
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ФайлОбмена.ПолноеИмя);
	
	Пока ТекстXML.Прочитать() Цикл

		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ТекстXML.Имя = "DATA" Тогда
			НазваниеКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGNAME");
			ВерсияКонфигурации 	 = ТекстXML.ЗначениеАтрибута("CONFIGVERSION");
		КонецЕсли;

		Если ТекстXML.Имя = "CONSTANTS" Тогда
			Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			стррКонстанты = КонстантыИзФайлаОбмена(ТекстXML, "АгентЗагрузки,КодЗапроса");
			АгентЗагрузки = ТорговыйПредставительИзФайлаОбмена(стррКонстанты.АгентЗагрузки);
			Если Агент <> АгентЗагрузки Тогда
				
				Если Не ЗначениеЗаполнено(стррКонстанты.АгентЗагрузки) Тогда // константа отсутствует в файле
					Текст = СтрШаблон_(НСтр("ru='В файле загрузки отсуствтует константа ""ИдентификаторАгента""! (GUID=""%1"").';uk='У файлі завантаження отсуствтует константа ""ИдентификаторАгента""! (GUID = ""%1"").'"), 
						КонстантыМТПолучитьGUID("АгентЗагрузки"));
				ИначеЕсли ЗначениеЗаполнено(АгентЗагрузки) Тогда // константа присутствует в файле и ссылается на существующего агента
					Текст = НСтр("ru='Получен файл загрузки от агента: ';uk='Отримано файл завантаження від агента:'") + АгентЗагрузки;
				Иначе // константа присутствует в файле и ссылается на не существующего агента
					Текст = СтрШаблон_(НСтр("ru='В файле выгрузки указана ссылка на несуществующего агента ""%1"". Загрузка проигнорирована.';uk='У файлі вивантаження вказано посилання на неіснуючого агента ""%1"". Завантаження проігнорована.'"), стррКонстанты.АгентЗагрузки);
					ОповеститьОСобытии(Текст);
					Результат = Ложь;
					Прервать;
				КонецЕсли; 
				ОповеститьОСобытии(Текст);
				
				Если Не ЭтоСсылкаНаНайденныйОбъект(АгентЗагрузки) Тогда // Не можем определить по значению константы "АгентЗагрузки" из МУ от какого агента получен файл ...
					Если ЗначениеЗаполнено(Агент) Тогда // ... тогда загружаем файл для текущего выбранного агента - такое допустимо, например, при автообмене по FTP - мы точно знаем - нужно загружать для выбранного агента
						ОповеститьОСобытии(СтрШаблон_(НСтр("ru='Данные загружаются для текущего агента ""%1"".';uk='Дані завантажуються для поточного агента ""%1"".'"), Агент), "ОшибкаЗапись",, "ТекущийАгент");
					Иначе // ... тогда останавливаем загрузку - не понятно для какого агента грузить файл
						ОповеститьОСобытии(НСтр("ru='Загрузка проигнорирована.';uk='Завантаження проігнорована.'"));
						Результат = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					НастройкиАгента = ПолучитьНастройкиАгента(АгентЗагрузки);
					Если НастройкиАгента = Неопределено Тогда
						Если Не ЗначениеЗаполнено(Агент) Тогда
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru='Не найдены настройки для агента ""%1"". Загрузка проигнорирована.';uk='Не знайдені налаштування для агента ""%1"". Завантаження проігнорована.'"), АгентЗагрузки), "ОшибкаЗапись");
							Результат = Ложь;
							Прервать;
						Иначе
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru='Не найдены настройки для агента ""%1"". Загружаются данные с использованием настроек для агента ""%2"".';uk='Не знайдені налаштування для агента ""%1"". Завантажуються дані з використанням налаштувань для агента ""%2"".'"), 
								АгентЗагрузки, Агент), "ОшибкаЗапись",, "ТекущийАгент");
							Агент = АгентЗагрузки;						
						КонецЕсли; 
					Иначе
						ВыбНастройкиАгента = НастройкиАгента;
						ОповеститьОСменеАгента(Агент, АгентЗагрузки);
						Агент = АгентЗагрузки;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			ЗагрузитьФотографии(ТекстXML, ЗагружаемыеОбъекты);
		КонецЕсли;
		
	КонецЦикла;
	ТекстXML.Закрыть();

	Если Результат Тогда
		ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты); //vd_181002 Перенесена из УТ //gi_180415 добавлено для загрузки фотографий
		ПодтвержденияСохранитьВсе(ВыбНастройкиАгента.СсылкаМУ, ЗагружаемыеОбъекты); // сохранение подтверждений для всех объектов // мв_1801002 ПодтвержденияСохранить(ВыбНастройкиАгента.СсылкаМУ, ЗагружаемыеОбъекты);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

#Область ЗагрузкаСправочников
// sd_10082017
Процедура ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "CATALOGS" Тогда
				Прервать;
			ИначеЕсли Имя = "CATALOG" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдВидСправочникаМТ = Новый УникальныйИдентификатор(ИдСпрXML); // gi_170902
			ВидСправочника = ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Истина, "Справочник");
			Если ВидСправочника = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ);
				ИначеЕсли Имя = "KILLEDS" Или Имя = "GROUPS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "CATALOG" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла; // Пока ТекстXML.Прочитать() Цикл
	
КонецПроцедуры

// Функция загружает элемент справочника из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидСправочника - Строка - вид справочника в 1С:Предприятии
//		ИдВидСправочникаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если элемент справочника успешно записан в БД, иначе Ложь.
//  
Функция ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ)
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//{{vd_181002
	//Если ВидСправочника = "НастройкиОбмена" Тогда // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут
	//	Текст = СтрШаблон_("Пропущена загрузка справочника %1", ВидСправочника);
	//	ОповеститьОСобытии(Текст); 
	//	ТекстXML.Пропустить();
	//	Возврат Истина;
	//КонецЕсли;
	Если ВидСправочника = "*НастройкиОбмена" ИЛИ ВидСправочника = "НастройкиОбмена" Тогда // Если ВидСправочника = "*НастройкиОбмена" Тогда sk_190409 Изменено условие в рамках (MOD-442) // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут // gi_180414 - заменено на "*НастройкиОбмена"
		// элементы справочника МТ "Настройки обмена" - это настройки обмена МУ (в т.ч., полученные из ЛК) - их нет смысла грузить в БД 1С
		ТекстXML.Пропустить();
		Возврат Истина;
	ИначеЕсли ВидСправочника = "СоставПланаПродаж" Тогда //vd_180705 Пропуск загрузки справочника МТ "СоставПланаПродаж".   	
		ТекстXML.Пропустить();
		Возврат Истина;
	ИначеЕсли ВидСправочника = "*ПечатныеФормыДокументов" Тогда //vd_180705 Пропуск загрузки справочника МТ "ПечатныеФормыДокументов".   	
		ТекстXML.Пропустить();
		Возврат Истина;
	ИначеЕсли ВидСправочника = "*ФотоДокументов" Тогда
		стррДанныеФото = Новый Структура;
		Если Не ПолучитьДанныеДляЗагрузкиФото(ТекстXML, стррДанныеФото) Тогда
			ОповеститьОСобытии(стррДанныеФото.ОписаниеОшибки);
			ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!'; uk = 'Пропущена завантаження елемента довідника ""%1"". Завантаження не передбачена!'"), ВидСправочника)); 
			ТекстXML.Пропустить();
			Возврат Ложь;
		Иначе                                                                  
			// фотографии загружаются в УТ в 3 этапа
			//1 Этап загрузка в ЗагружаемыеОбъекты.тзФотографии
			тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
			СтрокаТ = тзФотографии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, стррДанныеФото); 
			ТекстXML.Прочитать();
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	//}}vd_181002		
	
	СпрМенеджер = Справочники[ВидСправочника];
	ПредставлениеСпр = СпрМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
		ЭтоНовыйОбъект = Истина;
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	//унф
	//Если ВидСправочника = "Партнеры" Тогда   		
	//	Результат = ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);	
	//	ТекстXML.Прочитать();
	//Иначе
		
	Если ВидСправочника = "Контрагенты" Тогда
		Результат = ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "ВидыКонтактнойИнформации" Тогда
		Результат = ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "КонтактныеЛицаПартнеров" Тогда
		Результат = ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	Иначе // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут
		Текст = НСтр("ru = 'Пропущена загрузка справочника ""%1 (%2)"". Загрузка справочников не предусмотрена!'; uk = 'Пропущена завантаження довідника ""%1 (%2)"". Завантаження довідників не передбачена!'"); // sd_25082017
		ОповеститьОСобытии(СтрШаблон_(Текст, ПредставлениеСпр, ВидСправочника)); 
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
		СтрокаТ.Идентификатор 	 	= ИдОбъекта; // идентификатор (GUID) элемента справочника
		СтрокаТ.ИдВидСправочникаМТ	= ИдВидСправочникаМТ; // идентификатор (GUID) вида справочника в МТ
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)

	НаименованиеКонтрагента	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ТекстXML.ПолучитьАтрибут("A09");
	Широта	 				= ТекстXML.ПолучитьАтрибут("A010");
	
	ОбъектСпр.Наименование 				= НаименованиеКонтрагента;
	ОбъектСпр.НаименованиеПолное 		= НаименованиеКонтрагента;
	//(( sk_190409 Исправлена ошибка при загрузке элементов справочника "Контрагенты" в рамках (MOD-443)
	//ОбъектСпр.Контрагент				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "Контрагенты"); //ОбъектСпр.Партнер					= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "Партнеры");
	//ОбъектСпр.ЮрФизЛицо 				= Перечисления.ЮрФизЛицо.ЮрЛицо;
	//ОбъектСпр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	//)) sk_190409
	ОбъектСпр.ОбменДанными.Загрузка 	= Ложь;
	
	Если Не ЗначениеЗаполнено(ОбъектСпр.ГоловнойКонтрагент) Тогда // Если Не ЗначениеЗаполнено(ОбъектСпр.ГоловнойКонтрагент) И Не ОбъектСпр.ОбособленноеПодразделение Тогда sk_190409 Изменено условие в рамках (MOD-443)  
		ОбъектСпр.ГоловнойКонтрагент = ?(ЭтоНовыйОбъект, ОбъектСпр.ПолучитьСсылкуНового(), ОбъектСпр.Ссылка);
	КонецЕсли;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	Если Результат Тогда
		ЗаписьДопСвойствКонтрагента(ОбъектСпр, Новый Структура("Широта,Долгота", Широта, Долгота));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");

	Если ИдКонтактноеЛицо <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтактноеЛицо)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Контрагенты");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагент)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдТорговаяТочка, "Контрагенты");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдТорговаяТочка)); // sd_25082017
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ТипКИ = ПолучитьЗначениеПеречисленияПоИдентификатору("ТипыКонтактнойИнформации", ИдТип);
	ВидКИ = СсылкаИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если ТипКИ = "" Или ВидКИ.Пустая() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Значит, скорее всего, объект контактной информации еще не был загружен.
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		
		Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
			ТЗ = Новый ТаблицаЗначений();
			ТЗ.Колонки.Добавить("ОбъектСпр");
			ТЗ.Колонки.Добавить("ИдЭлемента");
			ТЗ.Колонки.Добавить("Тип");
			ТЗ.Колонки.Добавить("Вид");
			ТЗ.Колонки.Добавить("Представление");
			ЗагружаемыеОбъекты.Вставить("ТЗКонтактнаяИнформация", ТЗ);
		КонецЕсли;
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Добавить();
		СтрокаТ.ОбъектСпр		= ОбъектСпр;
		СтрокаТ.ИдЭлемента     	= ИдЭлемента;
		СтрокаТ.Тип            	= ТипКИ;
		СтрокаТ.Вид            	= ВидКИ;
		СтрокаТ.Представление  	= Представление;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСпр = ТекОбъект.ПолучитьОбъект();
	
	Если ОбъектСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
	Отбор = Новый Структура("Тип, Вид", ТипКИ, ВидКИ);
	
	мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
	
	Если мСтрокТ.Количество() = 0 Тогда
		СтрокаТЧ = тчКИ.Добавить();						
	Иначе  						
		СтрокаТЧ = мСтрокТ[0];
	КонецЕсли;
	
	СтрокаТЧ.Тип		   = ТипКИ;	
	СтрокаТЧ.Вид 		   = ВидКИ;	
	СтрокаТЧ.Представление = Представление;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	НаименованиеКЛ	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ДатаРождения 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A02"));
	ИдКонтрагент    = ТекстXML.ПолучитьАтрибут("A03");
	Комментарий		= ТекстXML.ПолучитьАтрибут("A05");
	
	Если ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Контрагенты", Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		Текст = СтрШаблон_(НСтр("ru = 'Не найден владелец контактного лица: %1. Загрузка не будет выполнена!'; uk = 'Не вдалося знайти власника контактної особи: %1. Завантаження не буде виконана!'"),
							 Строка(НаименованиеКЛ));
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСпр.Владелец 				= ТекОбъект;
	ОбъектСпр.Наименование 		 	= НаименованиеКЛ;
	ОбъектСпр.ДатаРождения			= ДатаРождения;
	ОбъектСпр.ДатаРегистрацииСвязи  = ТекущаяДата();
	ОбъектСпр.Автор  				= ВыбНастройкиАгента.Сотрудник;
	ОбъектСпр.Комментарий   		= Комментарий;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты)
	
	Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТ Из ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация Цикл 
		
		ОбъектСпр = СтрокаТ.ОбъектСпр.ПолучитьОбъект();
		
		Если ОбъектСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;          
		
		Тип 		  = СтрокаТ.Тип;
		Вид 		  = СтрокаТ.Вид;
		Представление = СтрокаТ.Представление;
		ИдЭлемента 	  = СтрокаТ.ИдЭлемента;
		  				
		тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
		Отбор = Новый Структура("Тип, Вид", Тип, Вид);
		
		мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
		
		Если мСтрокТ.Количество() = 0 Тогда
			СтрокаТЧ = тчКИ.Добавить();						
		Иначе  						
			СтрокаТЧ = мСтрокТ[0];
		КонецЕсли;
		
		СтрокаТЧ.Тип		   = Тип;	
		СтрокаТЧ.Вид 		   = Вид;	
		СтрокаТЧ.Представление = Представление;	  
		
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось записать элемент справочника: %1 в базу!'; uk = 'Не вдалося записати елемент довідника: %1 в базу!'"),
							 Строка(ОбъектСпр));
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
			Возврат;
		КонецЕсли;
		
		Текст = СтрШаблон_(НСтр("ru = 'Записана контактная информация для объекта: %1'; uk = 'Записана контактна інформація для об''єкта: %1'"),
							 ОбъектСпр);
		ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
		
		Если ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Найти(ИдЭлемента, "Идентификатор") = Неопределено Тогда 
			СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлемента;
			СтрокаТ.ИдВидСправочникаМТ	= "85B62882-0156-4881-85BA-B8FEF05C867B"; // идентификатор (GUID) вида справочника в МТ
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Очистить();
	
КонецПроцедуры

//vd_181002 Перенесена из УТ
// Функция возвращает вид справочника УТ для загрузки фотографии.
// в параметре стррПараметры возвращается структура с дополнительными данными для загрузки фотографии.
// Возвращает Истина, если предусмотрена загрузка данной фотографии.
Функция ПолучитьДанныеДляЗагрузкиФото(ТекстXML, стррДанные)

	стррДанные.Вставить("ВидСправочника"); 							 // вид справочника в УТ для загрузки фотографии
	стррДанные.Вставить("GUID",   ТекстXML.ПолучитьАтрибут("GUID")); // идентификатор элемента справочнка "ФотоДокументов" для подтверждения	
	стррДанные.Вставить("Время",  ТекстXML.ПолучитьАтрибут("A05"));  // время создания фотографии
	стррДанные.Вставить("ИдФото", ТекстXML.ПолучитьАтрибут("A04"));  // идентификатор изображения фотографии (используется в ветке PICTURES xml-файла)
	стррДанные.Вставить("ИдДокумента"); 						     // идентификатор документа, к которому прикреплена фотография - заполняется ниже в функции ЗаполненИдентификаторДокументаКфото()	
	стррДанные.Вставить("ВидДокумента");   							 // вид документа в УТ, за которым закреплена фотография	
	стррДанные.Вставить("ОписаниеОшибки"); 							 // описание ошибки
	
	идЗаказ 		 = ТекстXML.ПолучитьАтрибут("A01");
	идПКО	 		 = ТекстXML.ПолучитьАтрибут("A02");
	идМерчендайзинг  = ТекстXML.ПолучитьАтрибут("A03");
	идПосещение 	 = ТекстXML.ПолучитьАтрибут("A06");
	идРеализация 	 = ТекстXML.ПолучитьАтрибут("A07");
	идПеремещение 	 = ТекстXML.ПолучитьАтрибут("A08");
	идРКО			 = ТекстXML.ПолучитьАтрибут("A09");
	идПоступление	 = ТекстXML.ПолучитьАтрибут("A010");
	идВозвратТоваров = ТекстXML.ПолучитьАтрибут("A011");
	идЗадание		 = ТекстXML.ПолучитьАтрибут("A012");
	
	Если ЗаполненИдентификаторДокументаКфото(идЗаказ, стррДанные) Тогда
		Если РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда  
			стррДанные.ВидДокумента   = "РасходнаяНакладная";
		Иначе
			стррДанные.ВидДокумента   = "ЗаказПокупателя";
		КонецЕсли;
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идРеализация, стррДанные) Тогда
		стррДанные.ВидДокумента   = "РасходнаяНакладная";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идПоступление, стррДанные) Тогда
		//стррДанные.ВидДокумента   = ВидДокументаПоступлениеТоваровУслуг();
		стррДанные.ОписаниеОшибки = НСтр("ru = 'Пока не предусмотрена загрузка фотографий для документов ПоступлениеТоваровУслуг.'; uk = 'Поки не передбачена завантаження фотографій для документів ПоступлениеТоваровУслуг.'");
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идВозвратТоваров, стррДанные) Тогда
		//стррДанные.ВидДокумента = "ВозвратТоваровОтКлиента";
		стррДанные.ОписаниеОшибки = НСтр("ru = 'Пока не предусмотрена загрузка фотографий для документов возврата.'; uk = 'Поки не передбачена завантаження фотографій для документів повернення.'");
		
	ИначеЕсли ЗначениеЗаполнено(идПКО) Или ЗначениеЗаполнено(идРКО) Или ЗначениеЗаполнено(идПеремещение) Тогда
		стррДанные.ОписаниеОшибки = НСтр("ru = 'Не предусмотрена загрузка фотографий для документов ПКО, РКО, Перемещение.'; uk = 'Не передбачена завантаження фотографій для документів ПКО, РКО, Переміщення.'");
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идМерчендайзинг, стррДанные) Тогда
		//{{vd_180919
		//стррДанные.ОписаниеОшибки = "Пока не предусмотрена загрузка фотографий для виртуальных документов Мерчендайзинг.";
		стррДанные.ВидСправочника = "ВиртуальныйСправочник";
		стррДанные.ВидДокумента   = "Мерчендайзинг";
		Возврат Истина;
		//}}vd_180919
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идПосещение, стррДанные) Тогда
		стррДанные.ОписаниеОшибки =НСтр("ru = 'Пока не предусмотрена загрузка фотографий для виртуальных документов Посещение.'; uk = 'Поки не передбачена завантаження фотографій для віртуальних документів Відвідування.'");
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идЗадание, стррДанные) Тогда
		стррДанные.ОписаниеОшибки = НСтр("ru = 'Пока не предусмотрена загрузка фотографий для виртуальных документов Задание.'; uk = 'Поки не передбачена завантаження фотографій для віртуальних документів Завдання.'");
		
	Иначе
		ВызватьИсключение(НСтр("ru = 'Функция ПолучитьВидСправочникаДляЗагрузкиФото(): не определено условие загрузки фотографии.'; uk = 'Функція ПолучитьВидСправочникаДляЗагрузкиФото: не визначено умову завантаження фотографії.'"));
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(стррДанные.ВидДокумента) Тогда
		стррДанные.ВидСправочника = стррДанные.ВидДокумента + "ПрисоединенныеФайлы";
	КонецЕсли; 
	
	Возврат ЗначениеЗаполнено(стррДанные.ВидСправочника);

КонецФункции

//vd_181002 Перенесена из УТ
// Вспомогательная функция для функции ПолучитьДанныеДляЗагрузкиФото()
Функция ЗаполненИдентификаторДокументаКфото(идДокумента, стррПараметры)
	
	Если ЗначениеЗаполнено(идДокумента) Тогда
		стррПараметры.идДокумента = идДокумента;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

//vd_181002 Перенесена из УТ
// Процедура дополняет ТЗ в ЗагружаемыеОбъекты.тзФотографии дополнительными сведениями из XML-ветки PICTURES.
Процедура ЗагрузитьФотографии(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Если ПодтверждатьВсеФотографии Тогда // требуется сразу обновить данные для подтверждений тэга PICTURES
		тзPictures = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
		ТекДата = ТекущаяДата();
		БылиИзменения = Ложь;
	КонецЕсли;
		
	тзФотографии = ЗагружаемыеОбъекты.тзФотографии; // подтверждения только по указанным фотографиям в справочнике "*ФотоДокументов"
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаНачало Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				ИначеЕсли ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаКонец Тогда					
					
					GUID = ТекстXML.ПолучитьАтрибут("GUID"); // идентификатор изображения фотографии в платформе 2.0
					СтрокаТ = тзФотографии.Найти(GUID, "ИдФото");
					Если СтрокаТ <> Неопределено Тогда
						СтрокаТ.ИмяФайла = ТекстXML.ПолучитьАтрибут("FileName");
						СтрокаТ.Описание = ТекстXML.ПолучитьАтрибут("Description");
					КонецЕсли; 
					
					Если ПодтверждатьВсеФотографии Тогда
						
						ИдФото = Новый УникальныйИдентификатор(GUID); // идентификатор изображения фотографии в платформе 2.0
						СтрокаТ = тзPictures.Найти(ИдФото, "Идентификатор");
						Если СтрокаТ = Неопределено Тогда
							СтрокаТ = тзPictures.Добавить();
							СтрокаТ.Идентификатор = ИдФото;
						КонецЕсли;
						СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
						БылиИзменения = Истина;
						
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЦикла;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодтверждатьВсеФотографии И БылиИзменения = Истина Тогда
		ПодтвержденияСДСохранить("Фото", ВыбНастройкиАгента.СсылкаМУ, тзPictures);			
	КонецЕсли;
	
КонецПроцедуры

//vd_181002 Перенесена из УТ
Процедура ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты)
	
	тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
	Если тзФотографии.Количество() = 0 Тогда // в файле выгрузки отсутствовал справочник ФотоДокументов - мы не знаем к каким документам привязать фотографии
	    Возврат; 
	КонецЕсли;
	
	КаталогФото = ДополнитьСлешВПуть(ЗагружаемыеОбъекты.СведенияИзАрхива.КаталогФото); // временный каталог фотографий, куда распакованы фото из архива торгового агента

	//СправочникФотографии = ПрочитатьЗначениеНастройки("СправочникФотографии");
	//СправочникФотографии = ВОТЗЗагрузить("_Фотографии");
	
	//vd_181002 Не поддерживается загрузка ВО
	//стррВО = ВОСвойстваОбъекта("_Фотографии"); //vd_180919 Загрузка фото виртуальных док мерчиндайзин
		
	Для каждого СтрокаТ Из тзФотографии Цикл
		
		//vd_181002 Не поддерживается загрузка ВО
		//vd_180919 Загрузка фотографий для виртуальных документов. Добавлена функция, условие.
		Если СтрокаТ.ВидСправочника = "ВиртуальныйСправочник" Тогда
		//	ЗагрузитьФотоДляВиртуальногоДокумента(СтрокаТ, КаталогФото, стррВО);
			Продолжить;
		КонецЕсли;
		
		СпрМенеджер = Справочники[СтрокаТ.ВидСправочника];
		ИдОбъекта = Новый УникальныйИдентификатор(СтрокаТ.GUID);
		СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
		
		Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
			ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
			ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			СтрокаТ.ЭтоНовый = Истина;
		Иначе						
			ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
			ОбъектСпр.Разблокировать();
			СтрокаТ.ЭтоНовый = Ложь;
		КонецЕсли;
		
		ОбъектСпр.Наименование 	= СтрокаТ.ИдФото;
		ОбъектСпр.Автор 		= ВыбНастройкиАгента.Сотрудник; 
		ОбъектСпр.ДатаСоздания 	= ДатаВремяXMLВФормат1С(СтрокаТ.Время);
		ОбъектСпр.Описание 		= СтрокаТ.Описание;
		
		// определяем ссылку документа-владельца фотографии
		ДокументСсылка = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента));
		Если ЭтоСсылкаНаНайденныйОбъект(ДокументСсылка) Тогда
			ОбъектСпр.ВладелецФайла = ДокументСсылка;
		КонецЕсли;
		
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ФайлФото = Новый Файл(КаталогФото + СтрокаТ.ИмяФайла); // СтрокаТ.ИмяФайла может быть и пустым - из-за прерывания загрузки пользователем или возможных ошибок в обработке
		
		Если ФайлФото.Существует() И ЗначениеЗаполнено(СтрокаТ.ИмяФайла) Тогда // добавляем файл в справочник
			РасширениеБезТочки = СтрЗаменить(ФайлФото.Расширение, ".", "");
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогФото + СтрокаТ.ИмяФайла);
			СтрокаТ.Загружено = Истина; // ставим признак загрузки фотографии, только если есть файл фотографии
		Иначе // в качестве изображения подставляем картинку "Нет фото"
			РасширениеБезТочки = "png";			
			ДвоичныеДанные = ПолучитьМакет("NoPhoto");
			
			//vd_180712 добавлено условие
			Если ЗначениеЗаполнено(ОбъектСпр.Описание)  Тогда
				ОбъектСпр.Описание = НСтр("ru = '" + "Фото еще не отправлено из МУ. " + Символы.ПС + ОбъектСпр.Описание + "'");
			Иначе
				ОбъектСпр.Описание = НСтр("ru='Фото еще не отправлено из МУ';uk='Фото ще не відправлено з МУ'");
			КонецЕсли;
		КонецЕсли; 
		
		ИмяБезРасширения   			= ОбъектСпр.Наименование;		
		ОбъектСпр.Расширение 		= РасширениеБезТочки;		
		ОбъектСпр.ДатаМодификацииУниверсальная 	= ВремяИзмененияУниверсальное;		
		ОбъектСпр.ПодписанЭП       	= Ложь;		
		
		//vd_181003
		//УНФ_UA 1.6.6.1 	РаботаСФайламиСлужебный
		//УНФ 1.6.6.54 		ФайловыеФункцииСлужебный
		//УНФ 1.6.10.55     ФайловыеФункцииСлужебный
		//УНФ 1.6.12.12     РаботаСФайламиСлужебный
		//УНФ 1.6.13.60     РаботаСФайламиСлужебный
		//УНФ 1.6.14.96		РаботаСФайламиСлужебный
		//УНФ 1.6.15.39 	РаботаСФайламиСлужебный
		Если гКонфигурация = "УНФ_UA" ИЛИ (гКонфигурация = "УНФ" И ПоколениеКонфигурации(">УНФ_1.6.10.55")) Тогда
			ОбщМодульРаботысФайлами = Вычислить("РаботаСФайламиСлужебный");
		Иначе
			ОбщМодульРаботысФайлами = Вычислить("ФайловыеФункцииСлужебный");
		КонецЕсли;
			
		ОбъектСпр.ТипХраненияФайла  = ОбщМодульРаботысФайлами.ТипХраненияФайлов();
		ОбъектСпр.Размер           	= ДвоичныеДанные.Размер();
		
		Попытка
			Если ОбъектСпр.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				НачатьТранзакцию();
				СвояТранзакцияОткрыта = Истина;
				
				//vd_181003
				//УНФ 1.6.6.54 		ПрисоединенныеФайлыСлужебный
				//УНФ 1.6.10.55     ПрисоединенныеФайлыСлужебный
				//УНФ 1.6.12.12     РаботаСФайламиСлужебный
				//УНФ 1.6.13.60     РаботаСФайламиСлужебный
				//УНФ 1.6.14.96		РаботаСФайламиСлужебный
				//УНФ 1.6.15.39 	РаботаСФайламиСлужебный
				Если гКонфигурация = "УНФ_UA" ИЛИ (гКонфигурация = "УНФ" И ПоколениеКонфигурации(">УНФ_1.6.10.55")) Тогда
					общМодульДляПроцедурыЗаписатьФайлВИнформационнуюБазу = ОбщМодульРаботысФайлами;
				Иначе
					общМодульДляПроцедурыЗаписатьФайлВИнформационнуюБазу = Вычислить("ПрисоединенныеФайлыСлужебный");
				КонецЕсли;	
				общМодульДляПроцедурыЗаписатьФайлВИнформационнуюБазу.ЗаписатьФайлВИнформационнуюБазу(СсылкаОбъекта, ДвоичныеДанные);
				
				ОбъектСпр.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ОбъектСпр.ПутьКФайлу = "";
			Иначе
				// Добавление в один из томов (где есть свободное место).
				СведенияОФайле = ОбщМодульРаботысФайлами.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,	ИмяБезРасширения, РасширениеБезТочки, , ОбъектСпр.Зашифрован);
				ОбъектСпр.Том = СведенияОФайле.Том;
				ОбъектСпр.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			КонецЕсли;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			ОбъектСпр.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ОбъектСпр.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ОбъектСпр.Заполнить(Неопределено);
			
			ОбъектСпр.Записать();
			
			Если СвояТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если СвояТранзакцияОткрыта Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru='Ошибка при добавлении присоединенного файла ""%1"":"
"%2';uk='Помилка при додаванні приєднаного файлу ""%1"":"
"%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Файлы.Добавление присоединенного файла';uk='Файли. Додавання приєднаного файлу'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры


// ЗагрузкаСправочников
#КонецОбласти

#Область ЗагрузкаДокументов

Процедура ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты)

	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			//{{vd_181002
			//Если Имя = "DOCUMENTS" Или Имя = "DOCUMENT" Тогда
			//	Продолжить;
			//КонецЕсли;
			Если Имя = "DOCUMENTS" Тогда
				Прервать;
			ИначеЕсли Имя = "DOCUMENT" Тогда
				Продолжить;
			КонецЕсли;
			//}}vd_181002

		КонецЕсли;

		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдВидДокументаМТ = Новый УникальныйИдентификатор(ИдДокXML); // gi_170902
			ВидДокумента = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Истина, "Документ");
			Если ВидДокумента = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			

		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ);
				ИначеЕсли Имя = "KILLEDS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "DOCUMENT" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьДокументы

//УНФ все переделано
Функция ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры)
	
	ОбъектДок     = стррПараметры.ОбъектДокумента;
	Представление = стррПараметры.Представление;
	
	стррДанныеЗаполнения    = Новый Структура("Номер, Дата, ПометкаУдаления, Представление");
	стррДанныеДопРеквизитов = Новый Структура("ИдКатегории, Широта, Долгота, ВремяНачала, ВремяОкончания");

	//vd_180508
	//Если стррПараметры.ВидДокумента = "ЗаказПокупателя" Тогда   //это вид докуминте из МТ
	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЭтоДокументЗаказ = Истина; //Заказ
	Иначе
		ЭтоДокументЗаказ = Ложь;   //Реализация
	КонецЕсли;
	
	стррДанныеЗаполнения.Дата  = стррПараметры.Дата;  //vd_180510 стррДанныеЗаполнения.Дата = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДанныеЗаполнения.Номер = стррПараметры.Номер; //vd_180510 
	стррДанныеЗаполнения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	//стррДанныеЗаполнения.Представление = стррПараметры.Представление;
	
	ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтрагента	= ТекстXML.ПолучитьАтрибут("A03");
	ИдДоговора		= ТекстXML.ПолучитьАтрибут("A05");
	СуммаДокумента  = Число(ТекстXML.ПолучитьАтрибут("A08"));
	Комментарий 	= ТекстXML.ПолучитьАтрибут("A011");
	ОбщаяСкидка 	= Число(ТекстXML.ПолучитьАтрибут("A06"));
	ВидЦены 		= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A07"), "ВидыЦен");
	ДатаДоставки 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ВидОплаты 		= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	Склад 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "СтруктурныеЕдиницы");
	//Представление   = ?(ЭтоДокументЗаказ, "Заказ покупателя", "Расходная накладная") + " " + стррДанныеЗаполнения.Номер + " от " + стррДанныеЗаполнения.Дата; //В УНФ в представлении № не указывается
	
	стррДанныеДопРеквизитов.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A012");
	стррДанныеДопРеквизитов.Широта		 	= ТекстXML.ПолучитьАтрибут("A014");
	стррДанныеДопРеквизитов.Долгота	 		= ТекстXML.ПолучитьАтрибут("A014");
	стррДанныеДопРеквизитов.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	стррДанныеДопРеквизитов.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдКонтрагента, "Контрагенты", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Контрагент", РезультатПроверки);	
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдОрганизации, "Организации", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Организация", РезультатПроверки);	
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдДоговора, "ДоговорыКонтрагентов", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Договор", РезультатПроверки);	
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ВыбНастройкиАгента.Сотрудник.УникальныйИдентификатор(), "Сотрудники", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Ответственный", РезультатПроверки);	
	КонецЕсли;
	
	стррДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	
	стррДанныеЗаполнения.Вставить("Комментарий", Комментарий);
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ВидЦены.УникальныйИдентификатор(), "ВидыЦен", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("ВидЦен", РезультатПроверки);	
	КонецЕсли;
	
	стррДанныеЗаполнения.Вставить("ДатаОтгрузки", ДатаДоставки);
	
	Если ВидОплаты <> Неопределено Тогда
		стррДанныеЗаполнения.Вставить("ТипДенежныхСредств", ВидОплаты);
	Конецесли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(Склад.УникальныйИдентификатор(), "СтруктурныеЕдиницы", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("СтруктурнаяЕдиницаРезерв", РезультатПроверки);	
	КонецЕсли;
	
	ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения); //Функция УНФ
	
	// +АгентПлюс 2018-11-30 Виктор
	//ДозаполнитьПоУмолчанию
	Если гКонфигурация = "УНФ_UA" Тогда
		ОбщМодульЗаполнения = Вычислить("ЗаполнениеОбъектовУНФ");
		Если Не ЗначениеЗаполнено(ОбъектДок.ВидЗаказа) Тогда
			ОбъектДок.ВидЗаказа = ОбщМодульЗаполнения.ПолучитьВидЗаказаПокупателя();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектДок.СостояниеЗаказа) Тогда
			ОбъектДок.СостояниеЗаказа = ОбщМодульЗаполнения.ПолучитьСостояниеЗаказаПокупателя(ОбъектДок.ВидЗаказа);
		КонецЕсли;
	КонецЕсли;
	// -АгентПлюс 2018-11-30 Виктор 

	ПроверитьНомерДляНовогоДокумента(ОбъектДок, стррПараметры.ВидДокумента, стррПараметры.ЭтоНовый); //vd_180510
	
	//++ПРОВЕРКА установились ли все реквизиты , дополнительная проверка необязательна.
	Если ЭтоДокументЗаказ Тогда
		ПроверкиЗаполненияДокументаЗаказ(ОбъектДок);
	КонецЕсли;
	//--ПРОВЕРКА 
		
	//ТАБЛИЧНАЯ ЧАСТЬ /////////////////////////////////////////////////////////////////////////	
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Запасы.Очистить();		
	КонецЕсли;
	
	ИдТЧТовары = НРег("0738E61B-F06F-464A-8483-4249E0254819"); // идентификатор ТЧ "Товары" у Заказа в МТ 2.0
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница			= ТекНоменклатура.ЕдиницаИзмерения; //УНФ ТекЕдиница = ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= СсылкаИзСправочника(ИдСклад, "СтруктурныеЕдиницы"); 
				
				//vd_180508
				Если ТекСклад.Пустая() И ЭтоДокументЗаказ Тогда
					ТекСклад = ОбъектДок.СтруктурнаяЕдиницаРезерв;
				ИначеЕсли ТекСклад.Пустая() Тогда 
					ТекСклад = ОбъектДок.СтруктурнаяЕдиница;	
				КонецЕсли;
				
				НоваяСтрока = ОбъектДок.Запасы.Добавить();
				
				ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ); // СД_260617 доработать для ограничения скидки по агенту.
				
				НоваяСтрока.Номенклатура 		 = ТекНоменклатура;
				НоваяСтрока.ТипНоменклатурыЗапас = Истина;
				Если ЗначениеЗаполнено(ТекХарактеристика) Тогда
					НоваяСтрока.Характеристика = ТекХарактеристика;	
				Конецесли;
				НоваяСтрока.ЕдиницаИзмерения	 = ТекЕдиница;
				НоваяСтрока.Цена 				 = Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ПроцентРучнойСкидки;
				НоваяСтрока.Сумма				 = Сумма; 
				НоваяСтрока.Количество           = Количество;  // sk_190424

				
				//(( sk_190424 Изменено заполнение ставки НДС в рамках (MOD-521)
				//НЕРИАЛИЗОВАНО Оптимизировать Получать ставку ндс в процедуре выгрузить документы и передовать значения ставок как параметр или хотябы вынести из цикла таб части или подругому...
				//++ СпрСтавкиНДС
			//	СпрСтавкиНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			//	Если СтавкаНДС = 0 Тогда
			//		СпрСтавкиНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("НеОблагается", Истина);
			//		Если СпрСтавкиНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
			//			СпрСтавкиНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 0);
			//		КонецЕсли;
			//	Иначе
			//		Запрос = Новый Запрос;
			//		Запрос.Текст = "ВЫБРАТЬ
			//					   |    СтавкиНДС.Ссылка
			//					   |ИЗ
			//		               |	Справочник.СтавкиНДС КАК СтавкиНДС
			//		               |ГДЕ
			//		               |	СтавкиНДС.Ставка = &Ставка";
			//		
			//		Запрос.УстановитьПараметр("Ставка", СтавкаНДС / 100);
			//		
			//		//УНФ_UA 1.6.6.1 нет реквизита Расчетная
			//		Если НЕ гКонфигурация = "УНФ_UA" Тогда
			//			Запрос.Текст = Запрос.Текст + Символы.ПС + "	И СтавкиНДС.Расчетная = &Расчетная";
			//			Запрос.УстановитьПараметр("Расчетная", Ложь);
			//        КонецЕсли;
			//		
			//		СпрСтавкиНДС = Запрос.Выполнить().Выгрузить();
			//		Если СпрСтавкиНДС.Количество() = 1 Тогда
			//			СпрСтавкиНДС = СпрСтавкиНДС[0].Ссылка;
			//		ИначеЕсли НЕ гКонфигурация = "УНФ_UA" Тогда 
			//			Запрос.УстановитьПараметр("Расчетная", Истина);
			//			СпрСтавкиНДС = Запрос.Выполнить().Выгрузить();
			//			Если СпрСтавкиНДС.Количество() = 1 Тогда
			//				СпрСтавкиНДС = СпрСтавкиНДС[0].Ссылка;
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//	Если НЕ ЗначениеЗаполнено(СпрСтавкиНДС) Тогда 
			//		СпрСтавкиНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			//	КонецЕсли;
			//	
			//	Если НЕ ЗначениеЗаполнено(СпрСтавкиНДС) Тогда
			//		СпрСтавкиНДС = ОбъектДок.Организация.СтавкаНДСПоУмолчанию;
			//	Конецесли;
			//	//-- СпрСтавкиНДС
			//
			//	НоваяСтрока.СтавкаНДС = СпрСтавкиНДС;
			
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(НоваяСтрока);
			//)) sk_190424
							
			Если ЭтоДокументЗаказ Тогда
				НоваяСтрока.ДатаОтгрузки = ОбъектДок.ДатаОтгрузки;
			КонецЕсли;
			
			//(( sk_190424 Выполняем заполнение строки табличной части
			Если ПоколениеКонфигурации(">=УНФ_1.6.15.39") Тогда
				ОбщМодуль = Вычислить("НоменклатураВДокументахСервер");
			Иначе
				ОбщМодуль = Вычислить("РаботаСНоменклатуройСервер");
			КонецЕсли;
			
			ОбщМодуль.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ОбъектДок, "Запасы", НоваяСтрока);
			//)) sk_190424
			
			//(( sk_190424
			//НоваяСтрока.СуммаНДС  			 = СуммаНДС;
			//НоваяСтрока.Всего                = Сумма + СуммаНДС;
			//)) sk_190424
				
		КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗаписьДокумента(ОбъектДок, стррДанныеДопРеквизитов, стррПараметры.ЭтоНовый); //унф
	
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = СтрШаблон_(НСтр("ru = 'На основании документа ""%1"" не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.'; uk = 'На підставі документа ""%1"" не буде створено документ ""Реалізація товарів і послуг"", тому що він позначений на видалення.'"),
							 Строка(ОбъектДок.Ссылка));
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// vd_180510 Добавил
//
// Параметры:
//  ОбъектДок		 - Оюбект 	 - 
//  ВидДокумента	 - Строка	 - 
//  ЭтоНовыйДокумент - Будево	 - 
//
Процедура ПроверитьНомерДляНовогоДокумента(ОбъектДок, ВидДокумента, ЭтоНовыйДокумент)
	
	Если ЭтоНовыйДокумент И НЕ ИспользоватьНумерациюЦБД Тогда
		
		Если ВидДокумента = "ЗаказПокупателя" Тогда
			ДокМенеджер = Документы.ЗаказПокупателя;
		ИначеЕсли ВидДокумента = "РасходнаяНакладная" Тогда
			ДокМенеджер = Документы.РасходнаяНакладная;
		ИначеЕсли ВидДокумента = "СчетФактура" Тогда
			ДокМенеджер = Документы.СчетФактура;			
		Иначе 
			Возврат;
		Конецесли;
		
		ПоискДокумента = ДокМенеджер.НайтиПоНомеру(ОбъектДок.Номер, ТекущаяДата()); 
		
		Если ПоискДокумента = ДокМенеджер.ПустаяСсылка() ИЛИ ПоискДокумента = Неопределено Тогда
			//Документа с таким номером нет, можно создовать документ. 	
		Иначе
			Текст = СтрШаблон_(НСтр("ru = 'Номер документа ""%1"" не уникален. Для записи документа создан новый номер документа.'; uk = 'Номер документа ""%1"" не унікальний. Для запису документа створено новий номер документа.'")  // + "В учетной системе уже есть " + Строка(ПоискДокумента.Ссылка) + 
					,ОбъектДок.Номер);
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			//ОбъектДок.УстановитьНовыйНомер(стррПараметры.мтПрефиксНомера + "_");  
			ОбъектДок.УстановитьНовыйНомер(?(ПустаяСтрока(ВыбНастройкиАгента.Префикс), "", ВыбНастройкиАгента.Префикс + "-"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкиЗаполненияДокументаЗаказ(ОбъектДок)
	//унф написана для унф
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.БанковскийСчет) Тогда
	 	ОбъектДок.БанковскийСчет = ОбъектДок.Контрагент.БанковскийСчетПоУмолчанию;
		Если НЕ ЗначениеЗаполнено(ОбъектДок.БанковскийСчет) Тогда
			ОбъектДок.БанковскийСчет = ОбъектДок.Организация.БанковскийСчетПоУмолчанию;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
		ОбъектДок.ВалютаДокумента = ОбъектДок.Договор.ВалютаРасчетов;
		Если НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
				ОбъектДок.ВалютаДокумента = ОбъектДок.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств;
			Если НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
				ОбъектДок.ВалютаДокумента = КонстантыПолучитьЗначение("ВалютаУчета");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.ВидОперации) Тогда
		ОбъектДок.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	Конецесли;
		
	Если НЕ ЗначениеЗаполнено(ОбъектДок.Касса) Тогда	
		ОбъектДок.Касса = ОбъектДок.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.Кратность) ИЛИ НЕ ЗначениеЗаполнено(ОбъектДок.Курс) Тогда
		Отбор = Новый Структура("Валюта", ОбъектДок.ВалютаДокумента);
		ЗначениеКурсаВалют  = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектДок.Дата, Отбор);
		ОбъектДок.Кратность = ЗначениеКурсаВалют.Кратность;
		ОбъектДок.Курс 		= ЗначениеКурсаВалют.Курс;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.НДСВключатьВСтоимость) Тогда
		ОбъектДок.НДСВключатьВСтоимость = ОбъектДок.Организация.НДСВключатьВСтоимость;
		Если НЕ ЗначениеЗаполнено(ОбъектДок.НДСВключатьВСтоимость) Тогда
			ОбъектДок.НДСВключатьВСтоимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.СуммаВключаетНДС) Тогда
		ОбъектДок.СуммаВключаетНДС = ОбъектДок.НДСВключатьВСтоимость;
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.СостояниеЗаказа) Тогда
		ОбъектДок.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоКоду("000000003");  //Выполнен
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.НалогообложениеНДС) Тогда
		СтавкаНДСПоУмолчанию = ОбъектДок.Организация.СтавкаНДСПоУмолчанию;	
		Если ЗначениеЗаполнено(СтавкаНДСПоУмолчанию) Тогда
			Если СтавкаНДСПоУмолчанию.НеОблагается = Истина	Тогда
				ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
			ИначеЕсли СтавкаНДСПоУмолчанию.Ставка = 0 Тогда
				ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт;
			Иначе
				ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			КонецЕсли;		
		Иначе
			ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;	
		КонецЕсли;
	Конецесли;
				
	Если НЕ ЗначениеЗаполнено(ОбъектДок.ПоложениеВидаРабот) Тогда
		ОбъектДок.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.ПоложениеВидаРабот) Тогда
		ОбъектДок.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.ПоложениеВидаРабот) Тогда
		ОбъектДок.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;
	КонецЕсли;
	
	//ОбъектДок.ИспользоватьТовары = Ложь;
	//ОбъектДок.ИспользоватьМатериалыЗаказчика = Ложь;
	//ОбъектДок.ИспользоватьМатериалы = Ложь;
	//ОбъектДок.ИспользоватьЗарплатаИсполнителей = Ложь;
	//ОбъектДок.СкидкиРассчитаны = Ложь; //ВОЗМОЖНО нужно указать Истина, по умолчанию подставляется Ложь в запроснике	
	
КонецПроцедуры

Функция ЗагрузитьДокументРеализация(ТекстXML, стррПараметры)
	
	//УНФ все переделано
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррДанныеЗаполнения = Новый Структура("Номер, Дата, ПометкаУдаления");
	
	стррДанныеДопРеквизитов = Новый Структура("ИдКатегории, Широта, Долгота, ВремяНачала, ВремяОкончания");
	
	//стррДанныеЗаполнения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	//стррДанныеЗаполнения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДанныеЗаполнения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	стррДанныеЗаполнения.Дата  = стррПараметры.Дата;  //vd_180510 
	стррДанныеЗаполнения.Номер = стррПараметры.Номер; //vd_180510 
	
	ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	ИдКонтрагента	= ТекстXML.ПолучитьАтрибут("A02");
	ИдПунктРазгрузки= ТекстXML.ПолучитьАтрибут("A02"); 
	ИдДоговора		= ТекстXML.ПолучитьАтрибут("A04");
	ИдДокОснования 	= ТекстXML.ПолучитьАтрибут("A011");

	СуммаДокумента  = Число(ТекстXML.ПолучитьАтрибут("A07"));
	Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	ОбщаяСкидка 	= Число(ТекстXML.ПолучитьАтрибут("A05"));
	ИдВидЦены 		= ТекстXML.ПолучитьАтрибут("A06");
	ИдВидОплаты 		= ТекстXML.ПолучитьАтрибут("A018"); 
	Представление   = СтрШаблон_(НСтр("ru = 'Расходная накладная %1 от %2'; uk = 'Видаткова накладна %1 від %2'"), //В УНФ в представлении № не указывается
								стррДанныеЗаполнения.Номер,стррДанныеЗаполнения.Дата);
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаУчета");
	
	стррДанныеДопРеквизитов.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	стррДанныеДопРеквизитов.Широта		 	= ТекстXML.ПолучитьАтрибут("A012");
	стррДанныеДопРеквизитов.Долгота	 		= ТекстXML.ПолучитьАтрибут("A013");
	стррДанныеДопРеквизитов.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A016"));
	стррДанныеДопРеквизитов.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));	
	
	/////////////////////////////////////////

	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдОрганизации, "Организации", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Организация", РезультатПроверки);	
	КонецЕсли;

	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдКонтрагента, "Контрагенты", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Контрагент", РезультатПроверки);
	Иначе
		РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдПунктРазгрузки, "Контрагенты", Представление);
		Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
			стррДанныеЗаполнения.Вставить("Контрагент", РезультатПроверки);	
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдДоговора, "ДоговорыКонтрагентов", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Договор", РезультатПроверки);	
	КонецЕсли;
	
	ОснованиеЗаказ = СсылкаИзДокумента(ИдДокОснования, "ЗаказПокупателя");
	Если ЗначениеЗаполнено(ОснованиеЗаказ) Тогда
		ОбъектДок.Заказ = ОснованиеЗаказ;
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдВидЦены, "ВидыЦен", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("ВидЦен", РезультатПроверки);	
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ВыбНастройкиАгента.Сотрудник.УникальныйИдентификатор(), "Сотрудники", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Ответственный", РезультатПроверки);	
	КонецЕсли;

	
	стррДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	
	стррДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента); //сумма не записывается
	
	стррДанныеЗаполнения.Вставить("Комментарий", Комментарий);
	
	ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения); //Функция УНФ
	
	ПроверитьНомерДляНовогоДокумента(ОбъектДок, стррПараметры.ВидДокумента, стррПараметры.ЭтоНовый); //vd_180510
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Запасы.Очистить();		
	КонецЕсли;
	
	ИдТЧТовары = НРег("E4D61E0A-1D62-48D7-B70C-BCBA935D377A"); // идентификатор ТЧ "Товары" у Реализации в МТ 2.0
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			
			ИдСклад	= "";
			
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
				
				//vd_180511
				Если ИдСклад = "" Тогда
					ИдСклад	= ТекстXML.ПолучитьАтрибут("A011");
				КонецЕсли;				
		
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
	//			ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
		
				НоваяСтрокаТЧ = ОбъектДок.Запасы.Добавить();
				
				НоваяСтрокаТЧ.Номенклатура   	   = ТекНоменклатура;
				Если ЗначениеЗаполнено(ТекХарактеристика) Тогда
					НоваяСтрокаТЧ.Характеристика = ТекХарактеристика;	
				Конецесли;
				НоваяСтрокаТЧ.Количество 		   = Количество;
				НоваяСтрокаТЧ.Сумма 		 	   = Сумма;
				НоваяСтрокаТЧ.ТипНоменклатурыЗапас = Истина;
				
				Если СтавкаНДС > 0 Тогда
					НоваяСтрокаТЧ.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
				Если СуммаНДС > 0 Тогда
					НоваяСтрокаТЧ.СуммаНДС = СуммаНДС;
				КонецЕсли;
				
				Если СкидкаТЧ > 0 Тогда
					  НоваяСтрокаТЧ.ПроцентАвтоматическойСкидки = СкидкаТЧ;
				КонецЕсли; 			
				
				//ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, строкаЗаполнения);
				
				//{{vd_180621 
				//В 1.6.14.96 - РаботаСНоменклатуройСервер
				//В 1.6.15.39 - НоменклатураВДокументахСервер
				Если ПоколениеКонфигурации(">=УНФ_1.6.15.39") Тогда
					ОбщМодуль = Вычислить("НоменклатураВДокументахСервер");
					//ЗаполнениеОбъектов.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
				Иначе
					ОбщМодуль = Вычислить("РаботаСНоменклатуройСервер");
					//ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
				КонецЕсли;
				ОбщМодуль.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ОбъектДок, "Запасы", НоваяСтрокаТЧ);
				
				//РаботаСНоменклатуройСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ОбъектДок, "Запасы", НоваяСтрокаТЧ);    //Старая
				//НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ОбъектДок, "Запасы", НоваяСтрокаТЧ); //Новая
				//}}
				
			КонецЦикла;
			
			//vd_180511
			РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдСклад, "СтруктурныеЕдиницы", Представление);
			Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
				ОбъектДок.СтруктурнаяЕдиница = РезультатПроверки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок,  стррДанныеДопРеквизитов, стррПараметры.ЭтоНовый);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = СтрШаблон_(НСтр("ru = 'На основании документа ""%1"" не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.'; uk = 'На підставі документа ""%1"" не буде створено документ ""Реалізація товарів і послуг"", тому що він позначений на видалення.'"),
							 Строка(ОбъектДок.Ссылка));			
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДокументСчетФактура(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)
	
	Результат = Ложь;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	ИдДокОснования 	= ТекстXML.ПолучитьАтрибут("A01");
	ДокОснование 	= СсылкаИзДокумента(ИдДокОснования, "РасходнаяНакладная");
	Если ЗначениеЗаполнено(ДокОснование) Тогда
		ОбъектОснования = ДокОснование.ПолучитьОбъект(); 		
		Если ОбъектОснования <> Неопределено Тогда
			СсылкаОснования 			= ОбъектОснования.Ссылка; 
			ОбъектДок 					= стррПараметры.ОбъектДокумента;	
														
			//{{vd_180511
			//ОбъектДок.Организация 	  	= СсылкаОснования.Организация;
			ОбъектДок.Дата		    	= стррЗначения.Дата;
			//ОбъектДок.ДатаВыставления 	= стррЗначения.Дата;
			//СсылкаОснования.Дата;
			//стррДанныеЗаполнения = Новый Структура("ДокументОснование, Дата, Исправление", СсылкаОснования, СсылкаОснования.Дата, Ложь);
			//ОбъектДок.Заполнить(стррДанныеЗаполнения);
			ОбъектДок.Номер = стррЗначения.Номер;
			
			ПроверитьНомерДляНовогоДокумента(ОбъектДок, стррПараметры.ВидДокумента, стррПараметры.ЭтоНовый); //vd_180511
			
			//vd_180625 В версии 1.6.15.36 убран ЗаполнитьПоПрочимДокументам 
			Если ПоколениеКонфигурации(">=УНФ_1.6.15.36") Тогда
				Попытка
					ОбъектДок.Заполнить(СсылкаОснования);
					Результат = ЗаписьДокумента(ОбъектДок, стррЗначения, стррПараметры.ЭтоНовый);
				Исключение
					Сообщить(СтрШаблон_(НСтр("ru = 'Документ %1 не создан. По причине: Ввод счет фактуры для документа %2 не требуется.'; uk = 'Документ %1 не створений. По причині: Введення рахунок фактури для документа %2 не потрібно.'"),
										ОбъектДок,СсылкаОснования));
				КонецПопытки;                       
			Иначе
				ОбъектДок.ЗаполнитьПоПрочимДокументам(СсылкаОснования);
				Результат = ЗаписьДокумента(ОбъектДок, стррЗначения, стррПараметры.ЭтоНовый);
			Конецесли; 	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		стррПараметры.ПропускДокумента = Истина;
	КонецЕсли;			
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументСчетФактура()

// Функция возвращат структуру с общими свойствами для всех видов документов.
// В параметре передается строка с перечислением дополнительных свойств.
//	Параметры:
//		стрДополнительныеСвойства - Строка - список дополнительных свойств документов, разделенных через запятую.
//	Возвращаемое значение:
//	  Структура - свойства документа.
Функция СвойстваДокументаИзXML(стрДополнительныеСвойства = Неопределено)
	
	Реквизиты = "ПометкаУдаления,Номер,Дата,ИдОрганизации,ИдКлиента,ИдСоглашения,СуммаДокумента,Комментарий," // основные реквизиты
		+ "Широта,Долгота,ВремяНачала,ВремяОкончания,ИдКатегории" // дополнительные реквизиты
		+ ?(ИспользоватьПунктыРазгрузки, ",ИдПунктаРазгрузки", "");
		
	Если стрДополнительныеСвойства <> Неопределено Тогда
		Реквизиты = Реквизиты + "," + стрДополнительныеСвойства;
	КонецЕсли; 
		
	Возврат Новый Структура(Реквизиты);
	
КонецФункции

Процедура ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML)
	
	стррЗначения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррЗначения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррЗначения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
КонецПроцедуры

Функция ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры)
	
	//унф все переделано
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррДанныеЗаполнения 	= Новый Структура("Номер, Дата, ПометкаУдаления");
	стррДанныеДопРеквизитов = Новый Структура("ИдКатегории, Широта, Долгота, ВремяНачала, ВремяОкончания");
	
	стррДанныеЗаполнения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДанныеЗаполнения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДанныеЗаполнения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	ИдОрганизации 				 = ТекстXML.ПолучитьАтрибут("A01");
	СтруктурнаяЕдиница 		     = ТекстXML.ПолучитьАтрибут("A03");
	СтруктурнаяЕдиницаПолучатель = ТекстXML.ПолучитьАтрибут("A04");
	Комментарий 				 = ТекстXML.ПолучитьАтрибут("A06");
	Представление = СтрШаблон_(НСтр("ru = 'Перемещение запасов № %1 от %2'; uk = 'Переміщення запасів № %1 від %2'"),
							 стррДанныеЗаполнения.Номер, стррДанныеЗаполнения.Дата);
	
	стррДанныеДопРеквизитов.ИдКатегории		= ТекстXML.ПолучитьАтрибут("A02");
	стррДанныеДопРеквизитов.Широта 			= ТекстXML.ПолучитьАтрибут("A07");
	стррДанныеДопРеквизитов.Долгота 		= ТекстXML.ПолучитьАтрибут("A08");
	стррДанныеДопРеквизитов.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	стррДанныеДопРеквизитов.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A011"));
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдОрганизации, "Организации", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Организация", РезультатПроверки);	
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(СтруктурнаяЕдиница, "СтруктурныеЕдиницы", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("СтруктурнаяЕдиница", РезультатПроверки);
	Иначе
		//vd_181001 //Текст = "В документе Перемещение товаров № " + стррДанныеДопРеквизитов.Номер + " от " + стррДанныеДопРеквизитов.Дата + "  не указан склад-отправитель!";
		Текст = СтрШаблон_(НСтр("ru = 'В документе Перемещение запасов № %1 от %2 не указан склад-отправитель!'; uk = 'У документі Переміщення запасів № %1 від %2 не вказано склад-відправник!'"),
							 стррДанныеЗаполнения.Номер, стррДанныеЗаполнения.Дата);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(СтруктурнаяЕдиницаПолучатель, "СтруктурныеЕдиницы", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("СтруктурнаяЕдиницаПолучатель", РезультатПроверки);
	Иначе
		//vd_181001 //Текст = "В документе Перемещение товаров № " + стррДанныеДопРеквизитов.Номер + " от " + стррДанныеДопРеквизитов.Дата + "  не указан склад-получатель!";
		Текст = СтрШаблон_(НСтр("ru = 'В документе Перемещение запасов № %1 от %2 не указан склад-получатель!'; uk = 'У документі Переміщення запасів № %1 від %2 не вказано склад-одержувач!'"),
							 стррДанныеЗаполнения.Номер, стррДанныеЗаполнения.Дата);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	КонецЕсли;	

	стррДанныеЗаполнения.Вставить("Комментарий", Комментарий);
	
	стррДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение); 
	
	стррДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Справочники.ХозяйственныеОперации.Перемещение);
	
	стррДанныеЗаполнения.Вставить("Представление", Представление);
	
	ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения); //Функция УНФ
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Запасы.Очистить();		
	КонецЕсли;
	
	ИдТЧТовары = НРег("3097F10A-BEE6-4A76-AD7A-D4663C9B73EC"); // идентификатор ТЧ "Товары" у Перемещения в МТ 2.0
	
	ТекстXML.Прочитать();
	
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= СсылкаИзСправочника(ИдЕдиницыИзм, "КлассификаторЕдиницИзмерения");
				
				НоваяСтрока = ОбъектДок.Запасы.Добавить();
				
				ПоляСтруктуры = "Номенклатура, Характеристика, ЕдиницаИзмерения, Количество";
				
				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Количество);
				
				//унф
				//СтруктураДействий = Новый Структура("ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
				//СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
				//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок,  стррДанныеДопРеквизитов, стррПараметры.ЭтоНовый);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьДокументКассовыйОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)
	//!!! Переделать! Можно сразу загружать кассовый ордер в БД и после проставлять ссылки.
	
	//УНФ в модуле документа Поступления вкасуу есть ПроцедурыЗаполненияДокумента , ими можно тоже воспользоватся
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррДанныеЗаполнения 	= Новый Структура("Номер, Дата, ПометкаУдаления");
	стррДанныеДопРеквизитов = Новый Структура("ИдКатегории, Широта, Долгота, ВремяНачала, ВремяОкончания");
	
	стррДанныеЗаполнения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДанныеЗаполнения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДанныеЗаполнения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	ИдОрганизации	= ТекстXML.ПолучитьАтрибут("A01");
	ИдКонтрагента	= ТекстXML.ПолучитьАтрибут("A02");
	ИдДоговора	 	= ТекстXML.ПолучитьАтрибут("A04");
	Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	СуммаДокумента  = Число(ТекстXML.ПолучитьАтрибут("A07"));
	ИдДокОснования	= ТекстXML.ПолучитьАтрибут("A09");
	ВидОплаты 		= ТекстXML.ПолучитьАтрибут("A016");
	
	стрТипДокумента = ТипЗнч(ОбъектДок.Ссылка);
	Если стрТипДокумента = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		Представление = СтрШаблон_(НСтр("ru = 'Поступление в кассу %1 от %2'; uk = 'Надходження в касу %1 від %2'"),
								стррДанныеЗаполнения.Номер,стррДанныеЗаполнения.Дата);
	Иначе
		Представление = СтрШаблон_(НСтр("ru = 'Расход из кассы %1 от %2'; uk = 'Витрата з каси %1 від %2'"),
								стррДанныеЗаполнения.Номер,стррДанныеЗаполнения.Дата);
	КонецЕсли;	
	
	стррДанныеДопРеквизитов.ИдКатегории		= ТекстXML.ПолучитьАтрибут("A011");
	стррДанныеДопРеквизитов.Широта 			= ТекстXML.ПолучитьАтрибут("A012");
	стррДанныеДопРеквизитов.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	стррДанныеДопРеквизитов.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	стррДанныеДопРеквизитов.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015"));
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдОрганизации, "Организации", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Организация", РезультатПроверки);
		Касса = ПолучитьКассуПоОрганизации(РезультатПроверки, Представление);
		Если Касса <> Неопределено И Касса <> Ложь Тогда
			стррДанныеЗаполнения.Вставить("Касса", Касса);	
		КонецЕсли;
	КонецЕсли;
	
	//ПринятоОт
	//Основание
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдКонтрагента, "Контрагенты", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("Контрагент", РезультатПроверки);
	КонецЕсли;
	
	РезультатПроверки =	ПрочитатьИПроверитьРеквизит(ИдДоговора, "ДоговорыКонтрагентов", Представление);
	Если РезультатПроверки <> Неопределено И РезультатПроверки <> Ложь Тогда
		стррДанныеЗаполнения.Вставить("ДоговорДляЗачетаАвансаСПомощником", РезультатПроверки);
	КонецЕсли;
	
	стррДанныеЗаполнения.Вставить("Комментарий", Комментарий);
	стррДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	стррДанныеЗаполнения.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ОсновноеНаправление);
	стррДанныеЗаполнения.Вставить("УчитыватьВНУ", Истина);
	стррДанныеЗаполнения.Вставить("ВариантЗаполненияРасшифровки", Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную);
	
	 
	стррДанныеЗаполнения.Вставить("ОбъектДок_УДАЛИТЬ", ОбъектДок);
	
	                         
	//ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения); //Функция УНФ
	

//////////////////////////////////////////
	
	 
	//ОбъектДок.Кассир = ВыбНастройкиАгента.Пользователь;
	//
	//УстановитьКассуВКассовомОрдере(ОбъектДок);
	//
	//ОбъектДок.Валюта = ОбъектДок.Касса.ВалютаДенежныхСредств;

	//Если ИспользоватьПунктыРазгрузки Тогда
	//	Клиент	 	= СсылкаИзСправочника(стррЗначения.ИдКлиента, "Контрагенты"); 
	//	Соглашение 	= СсылкаИзСправочника(стррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
	//Иначе 
	//	Клиент	 	= СсылкаИзСправочника(стррЗначения.ИдКлиента, "Партнеры"); 
	//	Если ИспользоватьДоговоры() Тогда
	//	    Договор    = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
	//	Иначе			
	//		Соглашение = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "СоглашенияСКлиентами");
	//	КонецЕсли; 
	//КонецЕсли;	
	
	// Реквизитов "Договор" и "Соглашения" в документе ПКО в 1С нет.
	//
	//УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ОбъектДок);
	//УстановитьБанковскийСчетВКассовомОрдере(ОбъектДок);
	//ОбъектДок.Комментарий = стррЗначения.Комментарий;
	
	// Заполняем строку табличной части "Расшифровка платежа"
	//СтрокаПлатеж = ?(ОбъектДок.РасшифровкаПлатежа.Количество() > 0, ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.РасшифровкаПлатежа.Добавить());

	//СтрокаПлатеж.Партнер 				= ?(ИспользоватьПунктыРазгрузки, Клиент.Партнер, Клиент);
	//СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ОбъектДок.СтатьяДвиженияДенежныхСредств;
	//СтрокаПлатеж.Сумма 					= ОбъектДок.СуммаДокумента;
	//СтрокаПлатеж.ВалютаВзаиморасчетов 	= ОбъектДок.Валюта;
	//СтрокаПлатеж.СуммаВзаиморасчетов 	= ОбъектДок.СуммаДокумента;
	//СтрокаПлатеж.Подразделение 			= ОбъектДок.Кассир[РеквизитОбъекта("Спр_Пользователи_Подразделение")];

	
	СтрокаТ = ЗагружаемыеОбъекты.тзКассовыеДокументы.Добавить();
	СтрокаТ.Документ 	 = стррДанныеЗаполнения; //унф //ОбъектДок;
	СтрокаТ.стррЗначения = стррДанныеДопРеквизитов; // для записи значений доп. реквизитов
	СтрокаТ.ЭтоНовый 	 = стррПараметры.ЭтоНовый;
	СтрокаТ.ИдОснования  = ИдДокОснования;

КонецПроцедуры

Функция ПолучитьКассуПоОрганизации(Организация, Представление)

	//унф все переделана
	
	Валюта = КонстантыПолучитьЗначение("ВалютаУчета");
	Выборка = Справочники.Кассы.Выбрать( , Организация);
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления И Выборка.ВалютаПоУмолчанию = Валюта Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;

	Текст = СтрШаблон_(НСтр("ru = 'Не найдено ни одной кассы для организации ""%1"". Выберите кассу в документе вручную!'; uk = 'Не знайдено каси для організації ""%1"". Виберіть касу в документі вручну!'"),
								Организация);
	ОповеститьОСобытии(Текст,, Представление);
	
	Возврат Ложь;

КонецФункции

//УНФ все переделано
Функция ПрочитатьИПроверитьРеквизит(ИдентификаторGUID, ВидСправочника, ПредставлениеДокВМУ)

	Если ЭтоПустойИдентификатор(ИдентификаторGUID) Тогда
		Текст = СтрШаблон_(НСтр("ru = 'В документе ""%1"" не заполнен реквизит справочника ""%2""!'; uk = 'У документі ""%1"" не заповнений реквізит довідника ""%2""!'")
							,ПредставлениеДокВМУ,ВидСправочника);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", , "ТекущийАгент");
		Возврат Неопределено;
	Иначе
		Результат = СсылкаИзСправочника(ИдентификаторGUID, ВидСправочника);
		Если Результат = Справочники[ВидСправочника].Пустаяссылка() Тогда
			Возврат Ложь;
		Иначе
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

КонецФункции 

// Функция проверяет необходимость загрузки документа в БД 1С. И, если загрузка необходима, делает подготовку к загрузке документа.
// Возвращает структуру, в которой проставлены свойства для дальнейшей загрузки документа или для пропуска документа.
Функция ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты)

	стррПараметры = Новый Структура(
		"РезультатВозврата, Дата, Номер, ИдОбъекта, ЭтоНовый, Проведен, ПропускДокумента, " + 
			"ОбъектДокумента, Синоним, Представление, ЭтоВиртуальныйДокумент, ВидДокумента, мтПрефиксНомера, мтНомер");
	
	стррПараметры.Проведен		  = Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));
	стррПараметры.Дата 			  = Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	стррПараметры.ВидДокумента    =	ВидДокумента;
	стррПараметры.мтПрефиксНомера = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix"));
	стррПараметры.мтНомер 		  = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	стррПараметры.Номер 	      = ?(ИспользоватьНумерациюЦБД, "",стррПараметры.мтПрефиксНомера + стррПараметры.мтНомер);
	
	НомерДата = ?(ЗначениеЗаполнено(стррПараметры.Номер), " N " + СокрЛП(стррПараметры.Номер), "") + НСтр("ru = ' от '; uk = ' від '") + стррПараметры.Дата;
	
    стррПараметры.ЭтоВиртуальныйДокумент = Ложь;
	
	//vd_180508 Добавил условие
	Если ВидДокумента = "ЗаказПокупателя" И РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда  // "Заказ" должны загрузить как "РасходнаяНакладная" в УТ это "РеализацияТоваровУслуг"
		ДокМенеджер   = Документы.РасходнаяНакладная;
	ИначеЕсли ВидДокумента = "_Мерчендайзинг" ИЛИ ВидДокумента = "_Посещение" Тогда
		стррПараметры.ЭтоВиртуальныйДокумент = Истина;	
		стррПараметры.Вставить("ПричинаПропуска", НСтр("ru='Документы Мерчендайзинг и Посещение не поддерживается данной версией обработки!'"));
		стррПараметры.ПропускДокумента  = Истина;
		стррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат стррПараметры;
	ИначеЕсли гКонфигурация = "УНФ_UA" И ВидДокумента = "СчетФактура" Тогда	
		стррПараметры.ЭтоВиртуальныйДокумент = Ложь;	
		стррПараметры.Вставить("ПричинаПропуска", НСтр("ru='Документы Счет-фактура не поддерживается УНФ для Украины!'"));
		стррПараметры.ПропускДокумента  = Истина;
		стррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат стррПараметры;
	Иначе	
		ДокМенеджер = Документы[ВидДокумента];	
	КонецЕсли;
	
	стррПараметры.Синоним          = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	стррПараметры.Представление    = стррПараметры.Синоним + НомерДата;	
	стррПараметры.ПропускДокумента = Ложь;	
	
	Если Не стррПараметры.Проведен Тогда
		стррПараметры.Вставить("ПричинаПропуска", НСтр("ru='Документ не проведен в мобильном приложении!'"));
		стррПараметры.ПропускДокумента  = Истина; 
		стррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат стррПараметры;
	КонецЕсли;

	стррПараметры.ЭтоНовый = Истина;
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
	                                                                   
	Если ОбъектДок = Неопределено Тогда // загружаем новый документ
		ОбъектДок = ДокМенеджер.СоздатьДокумент();
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		стррПараметры.ЭтоНовый = Истина;
	Иначе
		Если Не ОбновлятьДокументыПриЗагрузке Тогда
			стррПараметры.ПропускДокумента  = Истина; // документ уже есть в БД, но его не обновляем
			стррПараметры.РезультатВозврата = Истина; // документ считаем успешно загруженным в БД
			стррПараметры.ОбъектДокумента = ОбъектДок;
			Возврат стррПараметры;
		КонецЕсли;
		ОбъектДок.Разблокировать();
		стррПараметры.ЭтоНовый = Ложь;
	КонецЕсли;
		
	стррПараметры.ОбъектДокумента = ОбъектДок;
	стррПараметры.ИдОбъекта = ИдОбъекта;
	
	Возврат стррПараметры;
КонецФункции 

// Функция загружает документ из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидДокумента - Строка - вид документа в 1С:Предприятии
//		ИдВидДокументаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если документ успешно записан в БД, иначе Ложь. Истина возвращается в случае, если документ был ранее записан
//  					в БД 1С, но не обновлен из-за настройки ОбновлятьДокументыПриЗагрузке = Ложь.
Функция ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ)

	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	стррПараметры = ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты);
	Результат = стррПараметры.РезультатВозврата;	
	
	Если Результат <> Ложь И Не стррПараметры.ПропускДокумента Тогда
		
		Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ВидДокумента = "ЗаказПокупателя" Тогда
			Результат = ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры);
			
		ИначеЕсли ВидДокумента = "ПоступлениеВКассу" Или ВидДокумента = "РасходИзКассы" Тогда
			ЗагрузитьДокументКассовыйОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты); //!!!! переделать - загрузка сделана сначала в ТЗ, можно сразу грузить в БД!!!!
			Результат = Истина; // !!!! убрать после переделки   
			
		ИначеЕсли ВидДокумента = "РасходнаяНакладная" Тогда 
			Результат = ЗагрузитьДокументРеализация(ТекстXML, стррПараметры);
			
		ИначеЕсли ВидДокумента = "ПеремещениеЗапасов" Тогда 
			Результат = ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры);
			
		ИначеЕсли ВидДокумента = "СчетФактура" Тогда
			Результат = ЗагрузитьДокументСчетФактура(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		
		
		//++УНФ
		//ИначеЕсли ВидДокумента = "_Мерчендайзинг" Тогда
		//	Результат = ЗагрузитьДокументМерчендайзинг(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		
		//ИначеЕсли ВидДокумента = "_Посещение" Тогда
			//Результат = ЗагрузитьДокументПосещение(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		//--УНФ
		
		Иначе // какой-то новый вид документа в МТ, про который модуль не знает
			стррПараметры.ПропускДокумента = Истина;
			стррПараметры.Вставить("ПричинаПропуска", НСтр("ru = 'Данный вид документов не поддерживается.'; uk = 'Даний вид документів не підтримується.'"));
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Если стррПараметры.ПропускДокумента Тогда
		
		стррСвойства = Новый Структура("Представление", стррПараметры.Представление);
		Если ТипСсылки(стррПараметры.ОбъектДокумента) = "Документ" Тогда
			стррСвойства.Вставить("СсылкаНаОбъект", стррПараметры.ОбъектДокумента.Ссылка);
		КонецЕсли;
		СообщитьОПропускеДокумента(стррСвойства, СтруктураЗначениеСвойства(стррПараметры, "ПричинаПропуска"));
		ТекстXML.Пропустить();
		
	КонецЕсли; 
		
	Если Результат Тогда // Сюда попадаем в одном из случаев:
		// 1. Новый документ успешно загружен в БД 1С. 
		// 2. Документ был ранее загружен в БД 1С и был обновлен или был пропущен, т.к. настройка ОбновлятьДокументыПриЗагрузке = Ложь.
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы.Добавить();
		СтрокаТ.Идентификатор 	 = стррПараметры.ИдОбъекта; 						// идентификатор (GUID) документа
		СтрокаТ.ВидДокумента  	 = стррПараметры.ОбъектДокумента.Метаданные().Имя;
		СтрокаТ.ИдВидДокументаМТ = ИдВидДокументаМТ; 								// идентификатор (GUID) вида документа в МТ
		СтрокаТ.ДатаДокумента    = стррПараметры.Дата;								// vd_181003 дата-время создания документа в МУ

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт

	СимвРазделителяА15 = " ";
	СимвРазделителяМТ  = "T";

	Поз = Найти(ДатаВремя, "-");
	Если Поз <> 0 Тогда	 
		Год = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;

	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	Часы = 0;
	Минуты = 0;
	Секунды = 0;
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;

	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;

	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции

Процедура СообщитьОПропускеДокумента(Объект, ПричинаПропуска = Неопределено)

	СсылкаНаОбъект = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		Объект.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);		
		Представление = Объект.Представление;
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
		Представление = Строка(Объект);
	КонецЕсли; 
	
	ПричинаПропуска = ?(ЗначениеЗаполнено(ПричинаПропуска), ПричинаПропуска, НСтр("ru = 'Документ был загружен ранее.'; uk = 'Документ був завантажений раніше'"));
	Текст = СтрШаблон_(НСтр("ru = 'Пропущена загрузка документа ""%1"". %2'; uk = 'Пропущена завантаження документа ""%1"". %2'"),
							 Представление, ПричинаПропуска,); 
	ОповеститьОСобытии(Текст,, СсылкаНаОбъект, "ТекущийАгент");
	
КонецПроцедуры

Процедура ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты)
	
	//УНФ все переделано
	
	тзКассовыеДокументы = ЗагружаемыеОбъекты.тзКассовыеДокументы;
	
	Если тзКассовыеДокументы <> Неопределено Тогда
		
		Для Каждого СтрокаТ Из тзКассовыеДокументы Цикл
			
			ОбъектДок = СтрокаТ.Документ.ОбъектДок_УДАЛИТЬ;
			стрТипДокумента = ТипЗнч(ОбъектДок.Ссылка);
			
			стррДанныеЗаполнения = СтрокаТ.Документ;
			стррДанныеЗаполнения.Удалить("ОбъектДок_УДАЛИТЬ");
		
			ДокОснование = УстановитьДокументОснованияОрдеру(СтрокаТ.ИдОснования);
			
			Если стрТипДокумента = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
				стррДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
				стррДанныеЗаполнения.Вставить("Статья",      Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
			Иначе
				//В настоящий момент,в  мт мы можем создать два документа основания, это поступление и возврат, тк эти документы не загружаются сейчас с мобильного устройства в УС то будем считать что мы создаем ПКО на основании поступления
				стррДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
				стррДанныеЗаполнения.Вставить("Статья",      Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);	
			КонецЕсли;
			
			//++Корректировка документа
			ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения); //Функция УНФ, заполняем документ
			//vd_180625 Возможно этот реквизит установлен верно через ЗаполнитьДокумент(). Требуется тестирование.
			//vd_181001 условие для украинской УНФ
			//УНФ_UA АналитикаДоходовИРасходов
			//УНФ 1.6.6.54 АналитикаПрочихДоходовИРасходов
			//УНФ 1.6.7.43 АналитикаДоходовИРасходов 
			// sk_190424 Изменено условие в рамках (MOD-518)
			// Если гКонфигурация = "УНФ_UA" ИЛИ ПоколениеКонфигурации(">=УНФ_1.6.15.36") Тогда
			Если гКонфигурация = "УНФ_UA" ИЛИ ПоколениеКонфигурации(">=УНФ_1.6.7.43") Тогда
				ОбъектДок.АналитикаПрочихДоходовИРасходов = ПланыВидовХарактеристик.АналитикаДоходовИРасходов.ПустаяСсылка();				
			Иначе
				ОбъектДок.АналитикаПрочихДоходовИРасходов = ПланыВидовХарактеристик.АналитикаПрочихДоходовИРасходов.ПустаяСсылка();
			КонецЕсли;
			//--Корректировка документа
			
			//++Корректирвка ТЧ
			ОбъектДок.ЗаполнитьРасшифровкуПлатежа();  //Функция УНФ, заполняем табличную часть
			
			РасшифровкаПлатежа = ОбъектДок.РасшифровкаПлатежа[0];
			РасшифровкаПлатежа.ПризнакАванса = Истина;	
			
			Если стрТипДокумента = Тип("ДокументСсылка.ПоступлениеВКассу") И ДокОснование <> Неопределено  Тогда
				стрТипДокОснование = типЗнч(ДокОснование);
				Если стрТипДокОснование = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
					РасшифровкаПлатежа.ПризнакАванса = Ложь;
					РасшифровкаПлатежа.Документ = ДокОснование; 	
				ИначеЕсли стрТипДокОснование = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
					РасшифровкаПлатежа.Документ = ДокОснование;
					РасшифровкаПлатежа.Заказ = ДокОснование;	
				ИначеЕсли стрТипДокОснование = Тип("ДокументСсылка.СчетНаОплату") Тогда 
					РасшифровкаПлатежа.Документ = ДокОснование;
					РасшифровкаПлатежа.СчетНаОплату = ДокОснование;		
				Иначе //ИначеЕсли стрТипДокОснование = "СчетФактура" Тогда 
					РасшифровкаПлатежа.ПризнакАванса = Ложь;
					РасшифровкаПлатежа.Документ = ДокОснование;
				КонецЕсли;
				РасшифровкаПлатежа.Документ = ДокОснование;
			КонецЕсли;
			//--Корректирвка ТЧ
			
			
			Результат = ЗаписьДокумента(ОбъектДок, СтрокаТ.стррЗначения, СтрокаТ.ЭтоНовый);
			
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(ОбъектДок);
			ИначеЕсли Результат И ПроводитьДокументыПриЗагрузке Тогда
				Попытка
					Если Не ДокОснование = Неопределено Тогда 
						ДокОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		тзКассовыеДокументы.Очистить();
		ЗагружаемыеОбъекты.тзКассовыеДокументы = тзКассовыеДокументы;
		
	КонецЕсли;

КонецПроцедуры

Функция УстановитьДокументОснованияОрдеру(ИдОснования)
	
	//УНФ все переделано
	
	иВидыДокументовОснования = Новый Массив;
	иВидыДокументовОснования.Добавить("ЗаказПокупателя");
	иВидыДокументовОснования.Добавить("РасходнаяНакладная");
	иВидыДокументовОснования.Добавить("СчетНаОплату");  // унф, возможно и не нужно
	
	Если НЕ гКонфигурация = "УНФ_UA" Тогда
		иВидыДокументовОснования.Добавить("СчетФактура"); //в унф украины нет счета-фактуры   
	КонецЕсли;
		
	//иВидыДокументовОснования.Добавить("ВозвратТоваровОтКлиента");  // унф нет аналогов
	//иВидыДокументовОснования.Добавить("ПоступлениеТоваровУслуг");  // унф нет аналогов

	Для Каждого стрВидДокумента Из иВидыДокументовОснования Цикл
		
		СсылкаОснования = СсылкаИзДокумента(ИдОснования, стрВидДокумента);
		
		Если ЗначениеЗаполнено(СсылкаОснования) Тогда
			Возврат СсылкаОснования;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;	

КонецФункции

Процедура ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты)
	
	Если ЗагружаемыеОбъекты.Свойство("ВидыВиртуальныхДокументовДляЗаписи") Тогда // были загружены виртуальные документы
		
		Для Каждого ВидДокумента Из ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи Цикл
			ВОСохранитьТЗ(ВидДокумента, ЗагружаемыеОбъекты[ВидДокумента]);
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьАдресКонтрагента(Контрагент, Знач СтррКонтекст = Неопределено) Экспорт
	
	//унф создана

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	Иначе
		мКонтрагенты = Новый Массив;
		мКонтрагенты.Добавить(Контрагент);
		
		мВидыКИ = Новый Массив;
		//мВидыКИ.Добавить(СтррКонтекст.СпрТоргТочки.Адрес);
		мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);		
		
		тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мКонтрагенты, , мВидыКИ);
		
		Если тзАдреса.Количество() > 0 Тогда 
			
			ЕСли СтррКонтекст <> Неопределено Тогда
								
				Если СтррКонтекст.СпрТоргТочки.Адрес = мВидыКИ[0] Тогда
					ПоискРезультата = тзАдреса.Найти(мВидыКИ[0], "Вид");
					Если ПоискРезультата <> Неопределено Тогда
						Возврат ПоискРезультата.Представление;
					КонецЕсли;
				ИначеЕсли СтррКонтекст.СпрТоргТочки.Адрес = мВидыКИ[1] Тогда
					ПоискРезультата = тзАдреса.Найти(мВидыКИ[1], "Вид");
					Если ПоискРезультата <> Неопределено Тогда
						Возврат ПоискРезультата.Представление;
					КонецЕсли;
				КонецЕсли;  	
				
			КонецЕсли;
			
			ПоискРезультата = тзАдреса.Найти(мВидыКИ[0], "Вид");
			Если ПоискРезультата <> Неопределено Тогда
				Возврат ПоискРезультата.Представление;
			КонецЕсли;
			
			ПоискРезультата = тзАдреса.Найти(мВидыКИ[1], "Вид");
			Если ПоискРезультата <> Неопределено Тогда
				Возврат ПоискРезультата.Представление;
			КонецЕсли;
			
			ПоискРезультата = тзАдреса.Найти(мВидыКИ[2], "Вид");
			Если ПоискРезультата <> Неопределено Тогда
				Возврат ПоискРезультата.Представление;
			КонецЕсли;
							
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли; 
		
КонецФункции 

// ЗагрузкаДокументов
#КонецОбласти

#Область ЗагрузкаТреков

Процедура ЗагрузитьТрек(ФайлТрека, СсылкаМУ)

	ТекущаяДатаТрека = Неопределено; // текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
	стррДанные		 = Неопределено; 	
	ДатаВремяТочки	 = Неопределено;
	БылиИзменения 	 = Ложь;
	Сортировать		 = Ложь;

	ЧтениеТрека 	    = Новый ЧтениеТекста(ФайлТрека.ПолноеИмя);
	
	КаталогТрековАгента = КаталогФайловТрековАгента();
	
	СтрокаФайла	= ЧтениеТрека.ПрочитатьСтроку();
	
	Пока СтрокаФайла <> Неопределено Цикл
		
		ДатаВремяТочки = ТрекДатаИзСтроки(Лев(СтрокаФайла, 19)); // дата-время в виде строки "YYYY-MM-DD HH-MM-SS"
		Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
			Если БылиИзменения Тогда			
				ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать);
			КонецЕсли;
			ТекущаяДатаТрека = НачалоДня(ДатаВремяТочки);
			стррДанные = ТрекОткрытьФайл(ТекущаяДатаТрека, КаталогТрековАгента);
			тзТрек				= стррДанные.Трек;						
			ВремяНачалаТрека 	= стррДанные.ВремяНачала;
			ВремяОкончанияТрека = стррДанные.ВремяОкончания;
			БылиИзменения 	 = Ложь;
			Сортировать		 = Ложь;
		КонецЕсли;

		Если ДатаВремяТочки > ВремяОкончанияТрека Тогда
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
			БылиИзменения = Истина;	
		ИначеЕсли ДатаВремяТочки < ВремяНачалаТрека Тогда // изменено время в МУ?
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
			БылиИзменения = Истина;
			Сортировать	= Истина;			
		КонецЕсли;
		
		СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать);
	КонецЕсли; 
	
	Если ДатаВремяТочки <> Неопределено Тогда // есть дата и время последней точки трека, нужно ее запомнить для подтверждения.
		Имя = СДИмяФайлаДляМУ(СсылкаМУ);
		стррЗначения = СДПрочитать(Имя, Истина);
		стррЗначения.Вставить("ПоследнееВремяТрека", ДатаВремяТочки);
		СДЗаписать(Имя, стррЗначения);
	КонецЕсли; 

КонецПроцедуры

Процедура ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать = Ложь)

	тзТрек = стррДанные.Трек;
	Если тзТрек.Количество() = 0 Тогда // пустой трек не записываем
		Возврат;
	КонецЕсли; 
	
	Если Сортировать Тогда
		тзТрек.Сортировать("Время");
	КонецЕсли; 
	
	стррДанные.ВремяНачала 		= тзТрек[0].Время;
	стррДанные.ВремяОкончания 	= тзТрек[тзТрек.Количество()-1].Время;
	ИмяФайла = ТрекИмяФайлаПоДате(стррДанные.ВремяНачала, КаталогТрековАгента);
	
	ЗначениеВФайл(ИмяФайла, стррДанные);

КонецПроцедуры

Функция ТрекОткрытьФайл(ДатаТочкиТрека, КаталогТрековАгента) Экспорт

	ИмяФайла = ТрекИмяФайлаПоДате(ДатаТочкиТрека, КаталогТрековАгента);
	Если ФайлСуществует(ИмяФайла) Тогда
		стррДанные = ЗначениеИзФайла(ИмяФайла);
	Иначе
		стррДанные = Новый Структура;
		стррДанные.Вставить("Версия", 1);
		стррДанные.Вставить("ВремяНачала", 		'00010101');
		стррДанные.Вставить("ВремяОкончания", 	'00010101');
		
		ТипДата	 = Новый ОписаниеТипов("Дата");
		ТипЧисло = Новый ОписаниеТипов("Число");
		
		тзТрек = Новый ТаблицаЗначений;
		тзТрек.Колонки.Добавить("Время", 	ТипДата);
		тзТрек.Колонки.Добавить("Широта", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Долгота", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Скорость",	ТипЧисло);
		тзТрек.Колонки.Добавить("ИсточникСигнала",  ТипЧисло);
		
		стррДанные.Вставить("Трек", тзТрек);

	КонецЕсли; 
	
	Возврат стррДанные;

КонецФункции 

// процедура не заполняет перевый параметр строки (Время), т.к. время устанавливается перед вызовом процедуры.
Процедура ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка)
	
	Разделитель = Символы.Таб;
	
	НомерПараметра = 0;
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		СтрЗначение = Лев(Строка, Позиция - 1);
		Если НомерПараметра > 0 Тогда
			стзТрек[НомерПараметра] = ?(ПустаяСтрока(СтрЗначение), 0, Число(СтрЗначение));
		КонецЕсли; 
		Строка = Сред(Строка, Позиция + 1);
		Позиция = Найти(Строка, Разделитель);
		НомерПараметра = НомерПараметра + 1;
	КонецЦикла;
	
	стзТрек[НомерПараметра] = ?(ПустаяСтрока(Строка), 0, Число(Строка));
	
КонецПроцедуры	

Функция ТрекДатаИзСтроки(СтрокаТрека)

	СтрокаДаты = СтрЗаменить(Лев(СтрокаТрека, 19), "-", "");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
	Возврат Дата(СтрокаДаты);

КонецФункции

Функция ТрекИмяФайлаПоДате(ДатаТрека, КаталогТрековАгента)

	Возврат КаталогТрековАгента + Формат(ДатаТрека, "ДФ=yyyyMMdd") + "_GPS.dat";
	
КонецФункции

// ЗагрузкаТреков
#КонецОбласти

// Загрузка значений всех реквизитов обработки. Таблицы значений загружаются в реквизит "ВременныеТаблицы" (тип - Структура).
Процедура ЗагрузитьНастройкиДляРаботыОбмена()

	Если гНастройкиОбменаЗагружены = Истина Тогда // настройки обмена уже загружены в память
		Возврат;
	КонецЕсли; 
	
	ОпределитьВерсиюКонфигурации();
	
	Имена = "";
	
	Для Каждого ЭлементМетаданных Из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Имя = ЭлементМетаданных.Имя;
		Если Имя <> "ВыбАгент" Тогда
			Имена = Имена + Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьЗначенияНастроекОбработки(Лев(Имена, СтрДлина(Имена)-1), Истина);
	
	гКэшЧтенияКонстант  		= Новый Структура;
	гКэшСравненияКонфигураций 	= Новый Соответствие;
	гКэшРеквизитыОбъектов 		= Новый Соответствие;
	гКэшСпискиОбъектов 			= Новый Соответствие;
	
	// чтение служебных таблиц (которых нет среди реквизитов обработки)
	Если ВыгружатьХарактеристикиНоменклатуры() Тогда
		СТЗЗагрузить("СпрХарактеристикиНоменклатурыСлужебный");
	КонецЕсли; 
	
	СТЗЗагрузить("СпрСоглашенияСКлиентамиСлужебный");	

КонецПроцедуры

Функция НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, ЭтоДополнительноеСведение, Подсказка)

	НовыйЭлемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	НовыйЭлемент.ДополнительныеЗначенияИспользуются = Истина;
	//Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		НовыйЭлемент.Доступен = Ложь;
	//КонецЕсли;
	НовыйЭлемент.Заголовок 		= ПредставлениеСвойства;
	НовыйЭлемент.Наименование 	= ИмяСвойства;
	НовыйЭлемент.ТипЗначения 	= ОписаниеТипа;
	НовыйЭлемент.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
	НовыйЭлемент.Подсказка 		= Подсказка;
	НовыйЭлемент.Записать();

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции 

//vd_181002 // gi_180415 добавлен параметр стррСведенияИзАрхива
// Функция возвращает структуру, используемую для запоминания загруженных объектов
// (документов, элементов справочников) из XML-файла, полученного от МТ.
Функция ЗагруженныеОбъектыИзФайла(стррСведенияИзАрхива) // gi_170902 переименовал из НовыйЗагруженныеОбъектыИзФайла

	стррРезультат = Новый Структура;
	
	ОписаниеТипаСтрока 			= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор"); 									// gi_170830
	ОписаниеТипаДата   			= Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)); 	// gi_180123
	ОписаниеТипаБулево 			= Новый ОписаниеТипов("Булево"); 													// gi_180417

	тзЗагруженныеДокументы = Новый ТаблицаЗначений;
	тзЗагруженныеДокументы.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);	// gi_170830 идентификатор документа
	тзЗагруженныеДокументы.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа в 1С
	тзЗагруженныеДокументы.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // gi_170830 // идентификатор (GUID) вида документа в МУ (на случай, если, например, Заказ в МУ загружался в 1С как РеализацияТоваровУслуг)
	тзЗагруженныеДокументы.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); //vd_181002 Добавлена колонка // gi_180123 дата-время создания документа в МУ
	стррРезультат.Вставить("тзЗагруженныеДокументы", 			тзЗагруженныеДокументы); // идентификаторы загруженных документов
	
	// sd_10082017 {
	тзЗагруженныеСправочники = Новый ТаблицаЗначений;
	тзЗагруженныеСправочники.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор);	// gi_170830 идентификатор элемента справочника
	тзЗагруженныеСправочники.Колонки.Добавить("ИдВидСправочникаМТ", ОписаниеТипаИдентификатор); // gi_170830 // идентификатор (GUID) вида справочника в МУ ? возможно не нужен
	стррРезультат.Вставить("тзЗагруженныеСправочники", 	тзЗагруженныеСправочники); // идентификаторы загруженных элементов справочников
	// } sd_10082017 
	
	тзКассовыеДокументы = Новый ТаблицаЗначений; // gi_170902 переименовал из ТаблицаКассовыхДокументов
	тзКассовыеДокументы.Колонки.Добавить("Документ"); 	  // объект документа или структура значений документа
	тзКассовыеДокументы.Колонки.Добавить("стррЗначения"); // значения дополнительных реквизитов документа
	тзКассовыеДокументы.Колонки.Добавить("ЭтоНовый");
	тзКассовыеДокументы.Колонки.Добавить("ИдОснования");
	стррРезультат.Вставить("тзКассовыеДокументы", тзКассовыеДокументы);

	//{{vd_181002 Перенесена из УТ 
	стррРезультат.Вставить("СведенияИзАрхива", стррСведенияИзАрхива); 
	тзФотографии = Новый ТаблицаЗначений;
	тзФотографии.Колонки.Добавить("GUID", 	ОписаниеТипаСтрока); // идентификатор элемента справочника МТ "*ФотоДокументов" для выгрузки подтверждений
	тзФотографии.Колонки.Добавить("ИдФото", ОписаниеТипаСтрока); // идентификатор изображения фотографии - используется для подтверждения элементов тэга PICTURES
	тзФотографии.Колонки.Добавить("Время",  ОписаниеТипаСтрока); // время создания фотографии в формате XML
	тзФотографии.Колонки.Добавить("ИдДокумента",  ОписаниеТипаСтрока);   // идентификатор документа, за которым закреплена фотография 
	тзФотографии.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа-владельца фотографии
	тзФотографии.Колонки.Добавить("ВидСправочника", ОписаниеТипаСтрока); // вид справочника УТ, куда загружается фотография
	тзФотографии.Колонки.Добавить("ИмяФайла", 		ОписаниеТипаСтрока); // имя файла фотографии
	тзФотографии.Колонки.Добавить("Описание", 	ОписаниеТипаСтрока); // описание фотографии, которое ввел пользователь МУ после фотографирования
	тзФотографии.Колонки.Добавить("ЭтоНовый", 	ОписаниеТипаБулево); // признак, что фотография загружается в УТ впервые
	тзФотографии.Колонки.Добавить("Загружено", 	ОписаниеТипаБулево); // ссылка на элемент справочника УТ хранения фотографий (для разных видов документов это разные справочники в УТ)
	стррРезультат.Вставить("тзФотографии", тзФотографии);
	//}}vd_181002 Перенесена из УТ

	Возврат стррРезультат;
	
КонецФункции // ЗагруженныеОбъектыИзФайла()

Функция СсылкаИзДокумента(ИдДокумента, ВидДокумента)

	ДокМенеджер = Документы[ВидДокумента];		
	ТипИдентификатора = ТипЗнч(ИдДокумента);
	
	Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) Тогда
		ID = Новый УникальныйИдентификатор(ИдДокумента);
	ИначеЕсли ТипИдентификатора = Тип("УникальныйИдентификатор") Тогда
		ID = ИдДокумента;
	Иначе
		ID = Неопределено;
	КонецЕсли; 
	
	Если ID <> Неопределено Тогда
		Ссылка = ДокМенеджер.ПолучитьСсылку(ID);
		ОбъектДок = Ссылка.ПолучитьОбъект(); // будет возвращено Неопределено, если объект не найден
	КонецЕсли; 
	
	Возврат ?(ОбъектДок = Неопределено, ДокМенеджер.ПустаяСсылка(), Ссылка);
	
КонецФункции

Функция СсылкаИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	СпрМенеджер = Справочники[Спр];
	
	Если ИдЭлемента = Неопределено Или ЭтоПустойИдентификатор(ИдЭлемента) Тогда
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Неопределено;	

	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		Результат = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		Если Результат.ПолучитьОбъект() = Неопределено Тогда
			Если СоздаватьЭлемент Тогда // sd_10082017 
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				ЭлементОбъект.УстановитьСсылкуНового(Результат); 
				//ЭлементОбъект.апОбменДанными.Загрузка = Истина; // sd_10082017 свойства апОбменДанными не существует, скорее всего опечатка.
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда
					Текст = НСтр("ru = 'Не удалось записать элемент справочника: '; uk = 'Не вдалося записати елемент довідника: '") + Строка(ЭлементОбъект);
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", ЭлементОбъект, "ТекущийАгент");
					Возврат Результат;
				КонецЕсли;
				Результат = ЭлементОбъект.Ссылка;
			Иначе
				Результат = СпрМенеджер.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
Функция ЗаписьДокумента(Док, стррЗначенияДопРеквизитов, ЭтоНовый)
	
	//унф все переделано
	
	МожноПроводить = Истина;
	МетаданныеДок = Док.Метаданные();
	РеквизитыДок = МетаданныеДок.Реквизиты;

	Если ПроводитьДокументыПриЗагрузке Тогда
		
		//Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда
		//	Если Не ЗначениеЗаполнено(Док.Партнер) Тогда
		//		Текст = "В документе " + Строка(Док) + " не указан партнер. Документ не будет проведен!";
		//		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		//		МожноПроводить = Ложь;
		//	КонецЕсли;
		//КонецЕсли;

		Если РеквизитыДок.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				Текст = СтрШаблон_(НСтр("ru = 'В документе %1 не указан контрагент. Документ не будет проведен!'; uk = 'У документі %1 не вказано контрагент. Документ не буде проведено!'"),
							 Строка(Док));
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		//Если РеквизитыДок.Найти("Соглашение") <> Неопределено Тогда
		//	Если Не ЗначениеЗаполнено(Док.Соглашение) И ВыгружатьДоговоры() И Не ИспользоватьПунктыРазгрузки Тогда
		//		Текст = "В документе " + Строка(Док) + " не указано соглашение. Документ не будет проведен!";
		//		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		//		МожноПроводить = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если РеквизитыДок.Найти("Договор") <> Неопределено И ИспользоватьПунктыРазгрузки Тогда
			Если Не ЗначениеЗаполнено(Док.Договор) Тогда
				Текст = СтрШаблон_(НСтр("ru = 'В документе %1 не указан договор. Документ не будет проведен!'; uk = 'У документі %1 не вказано договір. Документ не буде проведено!'"),
							 Строка(Док));
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				Текст = СтрШаблон_(НСтр("ru = 'Сумма документа %1 равна 0. Документ не будет проведен!'; uk = 'Сума документа %1 дорівнює 0. Документ не буде проведено!'"),
							 Строка(Док));
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МожноПроводить = Ложь;
		
	КонецЕсли;

	//ЗАПИСЬ Документа
	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не удалось записать документ %1 в базу!'; uk = 'Не вдалося записати документ %1 в базу!'"),
							 Строка(Док));
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
		
	Если    ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		ИЛИ	ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") 
	  	ИЛИ ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") 
	  	ИЛИ ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная")
	Тогда 
		ЗаписатьДополнительныеСвойстваДокумента(Док.Ссылка, стррЗначенияДопРеквизитов);
	КонецЕсли;

	Если МетаданныеДок.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И ПроводитьДокументыПриЗагрузке И МожноПроводить Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда
			ТекстСообщения = СтрШаблон_(НСтр("ru = 'Не удалось провести документ: %1'; uk = 'Не вдалося провести документ: %1'"),
							 Строка(Док));
			ОповеститьОСобытии(ТекстСообщения, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			Возврат Истина; // 
		КонецЕсли;
	КонецЕсли;
	
	Текст = СтрШаблон_(НСтр("ru = '%1 документ %2'; uk = '%1 документ %2'"),
							?(ЭтоНовый, НСтр("ru = 'Создан'; uk = 'Створено'"), НСтр("ru = 'Перезаписан'; uk = 'Перезаписан'")),  Строка(Док));
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Док.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписьСправочника(Спр, НовыйСпр = Истина, ЭтоСправочникФото = Ложь)
	
	Если Не ВыполнитьОперациюДляОбъекта(Спр, "запись") Тогда
		Если ЭтоСправочникФото Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось записать фото %1 в базу!'; uk = 'Не вдалося записати фото %1 в базу!'"),
								 Строка(Спр));
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Спр.Ссылка, "ТекущийАгент");
		Иначе 
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось записать справочник %1 в базу!'; uk = 'Не вдалося записати довідник %1 в базу!'"),
								 Строка(Спр));
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Спр.Ссылка, "ТекущийАгент");
		КонецЕсли;		
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоСправочникФото Тогда
		Текст = СтрШаблон_(НСтр("ru = '%1 фото %2'; uk = '%1 фото %2'"),
								?(НовыйСпр, НСтр("ru = 'Создано'; uk = 'Створено'"), НСтр("ru = 'Перезаписано'; uk = 'Перезаписано'")),  Строка(Спр));
		ОповеститьОСобытии(Текст, "ИнфоОбмен", Спр.Ссылка);
	Иначе
		Текст = СтрШаблон_(НСтр("ru = '%1 справочник %2'; uk = '%1 довідник %2'"),
								?(НовыйСпр, НСтр("ru = 'Создан'; uk = 'Створено'"), НСтр("ru = 'Перезаписан'; uk = 'Перезаписан'")),  Строка(Спр));
		ОповеститьОСобытии(Текст, "ИнфоОбмен", Спр.Ссылка);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписьДопСвойствКонтрагента(Спр, стррСвойства)

	тзРеквизиты = Новый ТаблицаЗначений;
	тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	тзРеквизиты.Колонки.Добавить("Значение");
	
	стзШирота = тзРеквизиты.Добавить();	
	стзШирота.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаКонтрагент());	
	стзШирота.Значение	= стррСвойства.Широта;
	стзДолгота = тзРеквизиты.Добавить();
	стзДолгота.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаКонтрагент());
	стзДолгота.Значение = стррСвойства.Долгота;

	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Спр.Ссылка, тзРеквизиты);

КонецПроцедуры

Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации)
	
	Результат = Ложь;
	
	Попытка
		
		Если ВидОперации = "запись" Тогда
			
			Объект.Записать();
			
		ИначеЕсли ВидОперации = "проведение" Тогда
			
			Если Объект.ПометкаУдаления Тогда
				ОповеститьОСобытии(НСтр("ru = 'Документ помечен на удаление - проведение отменено!'; uk = 'Документ позначений на видалення - проведення скасовано!'"), "ОшибкаЗапись", Объект.Ссылка, "ТекущийАгент");
				Возврат Ложь;
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		ИначеЕсли ВидОперации = "создание" Тогда
			
			СтрОбъект = Строка(Объект);
			
			Если Лев(СтрОбъект, 10)     = "Справочник" Тогда
				Объект = Объект.СоздатьЭлемент();
			ИначеЕсли Лев(СтрОбъект, 8) = "Документ" Тогда
				Объект = Объект.СоздатьДокумент();
			ИначеЕсли Лев(СтрОбъект, 7) = "Регистр" Тогда
				Объект = Объект.СоздатьМенеджерЗаписи();
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	Исключение
		
		Текст = СтрШаблон_(НСтр("ru = 'Не удалось выполнить %1 для объекта: ""%2"". Причина:  %3'; uk = 'Не вдалося виконати %1 для об''єкта: ""%2"". Причина: %3'"),
							 ВидОперации,Строка(Объект),ОписаниеОшибки());
		Ссылка = ?(ЕстьРеквизитОбъекта("Ссылка", Объект), Объект.Ссылка, Неопределено);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Ссылка, "ТекущийАгент");
		
		Если ВидОперации = "проведение" И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			// запись документа прошла успешно, возвращаем Истина, чтобы документ был зарегистрирован в журнале обмена
			Результат = Истина;
		КонецЕсли; 
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

Функция ЭтоПустойИдентификатор(ИД)

	Возврат (ПустаяСтрока(ИД) Или СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000");

КонецФункции

Функция КонстантыИзФайлаОбмена(ТекстXML, ИменаКонстант)

	стррРезультат = Новый Структура(ИменаКонстант);
	ствКонстанты = КонстантыМТПолучитьСоответствие();
	
	Пока ТекстXML.Прочитать() Цикл
		Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяКонстанты = ствКонстанты.Получить(НРег(ТекстXML.ЗначениеАтрибута("GUID")));
			Если ЗначениеЗаполнено(ИмяКонстанты) Тогда
				стррРезультат[ИмяКонстанты] = ТекстXML.ЗначениеАтрибута("Value");
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат стррРезультат;
	
КонецФункции 

Функция ТорговыйПредставительИзФайлаОбмена(Идентификатор)

	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));		
	КонецЕсли;
	
КонецФункции

Функция НайтиФайлОбменаВКаталоге(Путь)

	Маска = "To*.zip";
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	ФайлАрхив = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлАрхив = НайденныеФайлы[0];
	КонецЕсли;

	Возврат ФайлАрхив;
	
КонецФункции 

Функция ФайлОбменаТрек(ПутьККаталогуФайла)

	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, "gps*.txt");
	Результат = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		Результат = НайденныеФайлы[0];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции 

Функция ФайлОбменаРаспакованный(ПутьККаталогуФайла)

	Маска = "To*.xml";
	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, Маска);
	ФайлОбмена = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлОбмена = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Не найден файл в папке ""%1"" по маске ""%2"".'; uk = 'Не вдалося знайти файл в папці ""%1"" по масці ""%2"".'"), 
								ПутьККаталогуФайла, Маска);
		ВызватьИсключение(Текст);
	КонецЕсли;

	Возврат ФайлОбмена;
	
КонецФункции 

Функция УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦеныДокумента) 
	
	ВидЦены = СсылкаИзСправочника(ИдВидЦены, "ВидыЦен");
	
	Если ВидЦены.Пустая() 
			И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.РазрешитьРедактироватьЦены.Значение
				И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспользоватьТипыЦенВТЧ.Значение Тогда 
		
		ВидЦены = ВидЦеныДокумента;
		
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция УстановитьОбеспечениеЗаказа()     
	
	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда // УНФ
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
		
	Возврат ВариантОбеспечения;
	
КонецФункции

// ЗагрузкаДанных
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти

#Область ФункцииДляУНФ

Процедура ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения)
	
	//стррВерсияУНФ = ВерсияУчетнойСистемы;
	//стрВерсияПараметр = Число(стррВерсияУНФ.КонфигурацияПодВерсияПараметр1);
	//Если стрВерсияПараметр < 9 Тогда
	//	ЗаполнениеОбъектов.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
	//ИначеЕсли стрВерсияПараметр >= 9 Тогда
	//	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);  
	//КонецЕсли;
	
	//vd_180507 Добавлено условие. ЗаполнениеОбъектов.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
	//{{vd_181001 Добавлено условие для УНФ_UA
	//Было:
	//Если ПоколениеКонфигурации("<УНФ_1.6.9.0") Тогда
	//	ОбщМодуль = Вычислить("ЗаполнениеОбъектов");
	//	//ЗаполнениеОбъектов.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
	//ИначеЕсли ПоколениеКонфигурации(">=УНФ_1.6.9.0") Тогда
	//	ОбщМодуль = Вычислить("ЗаполнениеОбъектовУНФ");
	//	//ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);
	//КонецЕсли;
	
	//vd_181002
	Если ИспользоватьНумерациюЦБД И стррДанныеЗаполнения.Свойство("Номер") Тогда 
		стррДанныеЗаполнения.Удалить("Номер");
	КонецЕсли;
	
	//УНФ 1.6.15.39 ЗаполнениеОбъектовУНФ 
	Если гКонфигурация = "УНФ_UA" ИЛИ (гКонфигурация = "УНФ" И ПоколениеКонфигурации(">=УНФ_1.6.9.0")) Тогда
		ОбщМодуль = Вычислить("ЗаполнениеОбъектовУНФ");
	Иначе	//ИначеЕсли ПоколениеКонфигурации("<УНФ_1.6.9.0") Тогда заменено на Иначе
		ОбщМодуль = Вычислить("ЗаполнениеОбъектов");	
	КонецЕсли;
	//}}vd_181001   		
	
	ОбщМодуль.ЗаполнитьДокумент(ОбъектДок, стррДанныеЗаполнения);

КонецПроцедуры

//vd_180507 Это функция ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(), ее убрали из типовой УНФ. 
//Описание из функции ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом()
// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		Возврат СтавкаНДС.Ставка;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// sk_190424 Добавлена в рамках (MOD-521)
// Возвращает ставку НДС
//
// Параметры:
//  СтрокаТЧ - ДокументТабличнаяЧастьСтрока - строка табличной части
//
// Возвращаемое значение:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка ндс
//
Функция ПолучитьСтавкуНДС(СтрокаТЧ)

	текНоменклатура = СтрокаТЧ.Номенклатура;
	
	Если ПоколениеКонфигурации(">=УНФ_1.6.17.128") Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(текНоменклатура.ВидСтавкиНДС);
	Иначе
		СтавкаНДС = текНоменклатура.СтавкаНДС;
	КонецЕсли;
			
	Возврат СтавкаНДС; 
	
КонецФункции; // ПолучитьСтавкуНДС()

////vd_181022 Больше не используется.
////vd_180507
//Функция ПолучитьВерсияОбработкиУНФ() Экспорт
//	
//	ВерсияОбработкиУНФ = 6;  //vd_180419
//	ВерсияОбработкиУНФ = 7;  //vd_180420
//	ВерсияОбработкиУНФ = 8;  //vd_180510
//	ВерсияОбработкиУНФ = 9;  //vd_180511
//	ВерсияОбработкиУНФ = 10; //vd_180511
//	ВерсияОбработкиУНФ = 11; //vd_180511
//	ВерсияОбработкиУНФ = 12; //vd_180511
//	ВерсияОбработкиУНФ = 14; //vd_180511
//	ВерсияОбработкиУНФ = 15; //vd_180530     
//	ВерсияОбработкиУНФ = 16; //vd_180606
//	ВерсияОбработкиУНФ = 17; //vd_180621
//	ВерсияОбработкиУНФ = 18; //vd_180622 Запуск и доработка обработки для 1.6.15.39
//	ВерсияОбработкиУНФ = 19; //vd_181002 Доработана до украинской УТ, исправлены ошибки по загрузке, доработана загрузка фото, исправна настройка использовать нумерацию ЦБД
//	ВерсияОбработкиУНФ = 20; //vd_181002 Выгрузка подтверждений. Начальные настройки при преходе  на 2.0.0.29
//	ВерсияОбработкиУНФ = 21; //vd_181022 Исправлены ошибки формы мобильные устройства

//	
//	Возврат ВерсияОбработкиУНФ;	
//КонецФункции


#КонецОбласти







